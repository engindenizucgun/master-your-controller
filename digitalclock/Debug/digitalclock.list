
digitalclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004938  08004938  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004940  08004940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  080049b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080049b8  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a76  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002043  00000000  00000000  00030b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00033a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023294  00000000  00000000  00034908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010892  00000000  00000000  00057b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d69c2  00000000  00000000  0006842e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013edf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e4  00000000  00000000  0013ee40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800482c 	.word	0x0800482c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800482c 	.word	0x0800482c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <SystemClock_Config>:
}
//------------------------------------------------------CLOCK---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//

void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	; 0x58
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2244      	movs	r2, #68	; 0x44
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f9bc 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000596:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059a:	f000 ff71 	bl	8001480 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a4:	f000 fa7e 	bl	8000aa4 <Error_Handler>
  }


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2310      	movs	r3, #16
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 ffb4 	bl	800152c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80005ca:	f000 fa6b 	bl	8000aa4 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fbb4 	bl	8001d54 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005f2:	f000 fa57 	bl	8000aa4 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	; 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <AdjustHour>:
}

//------------------------------------------------------ADJUST HOUR & MINUTE---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//

void AdjustHour(void) {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  if (hours >= 0 && GPIOC->IDR & GPIO_IDR_ID1) {
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <AdjustHour+0x84>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <AdjustHour+0x88>)
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <AdjustHour+0x20>
    hours++;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <AdjustHour+0x84>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <AdjustHour+0x84>)
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e02b      	b.n	8000678 <AdjustHour+0x78>
  } else if (hours > 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <AdjustHour+0x84>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00b      	beq.n	8000640 <AdjustHour+0x40>
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <AdjustHour+0x88>)
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	2b00      	cmp	r3, #0
 8000632:	d005      	beq.n	8000640 <AdjustHour+0x40>
    hours--;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <AdjustHour+0x84>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <AdjustHour+0x84>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e01b      	b.n	8000678 <AdjustHour+0x78>
  }
    else if (hours > 23 && GPIOC->IDR & GPIO_IDR_ID1) {
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <AdjustHour+0x84>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b17      	cmp	r3, #23
 8000646:	d909      	bls.n	800065c <AdjustHour+0x5c>
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <AdjustHour+0x88>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <AdjustHour+0x5c>
      hours = 0;
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <AdjustHour+0x84>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e00d      	b.n	8000678 <AdjustHour+0x78>
    }
    else if (hours == 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <AdjustHour+0x84>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d109      	bne.n	8000678 <AdjustHour+0x78>
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <AdjustHour+0x88>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <AdjustHour+0x78>
    	hours = 23;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <AdjustHour+0x84>)
 8000672:	2217      	movs	r2, #23
 8000674:	601a      	str	r2, [r3, #0]
    }

}
 8000676:	e7ff      	b.n	8000678 <AdjustHour+0x78>
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000168 	.word	0x20000168
 8000688:	48000800 	.word	0x48000800

0800068c <AdjustMinute>:

void AdjustMinute(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  if (minutes >= 0 && GPIOC->IDR & GPIO_IDR_ID1) {
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <AdjustMinute+0x84>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <AdjustMinute+0x88>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d005      	beq.n	80006ac <AdjustMinute+0x20>
    minutes++;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <AdjustMinute+0x84>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <AdjustMinute+0x84>)
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e02b      	b.n	8000704 <AdjustMinute+0x78>
  } else if (minutes > 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <AdjustMinute+0x84>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <AdjustMinute+0x40>
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <AdjustMinute+0x88>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <AdjustMinute+0x40>
	  minutes--;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <AdjustMinute+0x84>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <AdjustMinute+0x84>)
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	e01b      	b.n	8000704 <AdjustMinute+0x78>
  }
    else if (minutes == 59 && GPIOC->IDR & GPIO_IDR_ID1) {
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <AdjustMinute+0x84>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b3b      	cmp	r3, #59	; 0x3b
 80006d2:	d109      	bne.n	80006e8 <AdjustMinute+0x5c>
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <AdjustMinute+0x88>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <AdjustMinute+0x5c>
      minutes = 0;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <AdjustMinute+0x84>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e00d      	b.n	8000704 <AdjustMinute+0x78>
    }
    else if (minutes == 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <AdjustMinute+0x84>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d109      	bne.n	8000704 <AdjustMinute+0x78>
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <AdjustMinute+0x88>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d003      	beq.n	8000704 <AdjustMinute+0x78>
      minutes = 59;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <AdjustMinute+0x84>)
 80006fe:	223b      	movs	r2, #59	; 0x3b
 8000700:	601a      	str	r2, [r3, #0]
    }

  }
 8000702:	e7ff      	b.n	8000704 <AdjustMinute+0x78>
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000164 	.word	0x20000164
 8000714:	48000800 	.word	0x48000800

08000718 <printClockValue>:

//------------------------------------------------------PRINT CLOCK---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//

void printClockValue(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    printf("%02lu:%02lu:%02lu\n", hours, minutes, seconds);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <printClockValue+0x1c>)
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <printClockValue+0x20>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <printClockValue+0x24>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <printClockValue+0x28>)
 800072a:	f003 f8f1 	bl	8003910 <iprintf>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000168 	.word	0x20000168
 8000738:	20000164 	.word	0x20000164
 800073c:	20000160 	.word	0x20000160
 8000740:	08004844 	.word	0x08004844

08000744 <EXTI0_IRQHandler>:

//------------------------------------------------------EXTI HANDLERS---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//

void EXTI0_IRQHandler(void) {
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & EXTI_PR1_PIF0) {
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <EXTI0_IRQHandler+0x20>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d002      	beq.n	800075a <EXTI0_IRQHandler+0x16>
        EXTI->PR1 = EXTI_PR1_PIF0;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <EXTI0_IRQHandler+0x20>)
 8000756:	2201      	movs	r2, #1
 8000758:	615a      	str	r2, [r3, #20]
        // Handle the button press on EXTI line 0
    }
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40010400 	.word	0x40010400

08000768 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & EXTI_PR1_PIF1) {
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <EXTI1_IRQHandler+0x20>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <EXTI1_IRQHandler+0x16>
        EXTI->PR1 = EXTI_PR1_PIF1;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <EXTI1_IRQHandler+0x20>)
 800077a:	2202      	movs	r2, #2
 800077c:	615a      	str	r2, [r3, #20]
        // Handle the button press on EXTI line 1
    }
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40010400 	.word	0x40010400

0800078c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & EXTI_PR1_PIF2) {
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <EXTI2_IRQHandler+0x20>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <EXTI2_IRQHandler+0x16>
        EXTI->PR1 = EXTI_PR1_PIF2;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <EXTI2_IRQHandler+0x20>)
 800079e:	2204      	movs	r2, #4
 80007a0:	615a      	str	r2, [r3, #20]
        // Handle the button press on EXTI line 2
    }
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40010400 	.word	0x40010400

080007b0 <main>:

//------------------------------------------------------MAIN FUNCTION---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//

int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  HAL_Init();
 80007b4:	f000 fb36 	bl	8000e24 <HAL_Init>
  SystemClock_Config();
 80007b8:	f7ff fedc 	bl	8000574 <SystemClock_Config>
  MX_USART2_UART_Init();
 80007bc:	f000 f8b8 	bl	8000930 <MX_USART2_UART_Init>
  MX_GPIO_Init();
 80007c0:	f000 f8e6 	bl	8000990 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007c4:	f000 f866 	bl	8000894 <MX_TIM2_Init>

  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <main+0xcc>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <main+0xcc>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  GPIOC->MODER &= ~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE1_Msk | GPIO_MODER_MODE2_Msk);
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <main+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a29      	ldr	r2, [pc, #164]	; (8000880 <main+0xd0>)
 80007da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007de:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  if (GPIOC->IDR & GPIO_IDR_ID0) {
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <main+0xd0>)
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f9      	beq.n	80007e0 <main+0x30>
	              buttonPressCount++;
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <main+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <main+0xd4>)
 80007f4:	6013      	str	r3, [r2, #0]
	              if (buttonPressCount == 1) {
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0xd4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d103      	bne.n	8000806 <main+0x56>
	                  buttonPressStart = milliseconds;
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <main+0xd8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <main+0xdc>)
 8000804:	6013      	str	r3, [r2, #0]
	              }

	              // Button released, handle different cases based on press count and adjustment mode
	              if (buttonPressCount == 1 && !adjustmentMode) {
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0xd4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d111      	bne.n	8000832 <main+0x82>
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <main+0xe0>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f083 0301 	eor.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00a      	beq.n	8000832 <main+0x82>
	                  // Pressed once, start adjustment mode for hour
	              	adjustmentMode = true;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <main+0xe0>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
	                  AdjustHour();
 8000822:	f7ff feed 	bl	8000600 <AdjustHour>
	                  buttonPressCount++;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0xd4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a15      	ldr	r2, [pc, #84]	; (8000884 <main+0xd4>)
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e022      	b.n	8000878 <main+0xc8>
	              }  else if (buttonPressCount == 2 && adjustmentMode) {
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0xd4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d10b      	bne.n	8000852 <main+0xa2>
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <main+0xe0>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d007      	beq.n	8000852 <main+0xa2>
	                  // Pressed twice, start adjustment mode for minute
	                  AdjustMinute();
 8000842:	f7ff ff23 	bl	800068c <AdjustMinute>
	                  buttonPressCount++;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <main+0xd4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <main+0xd4>)
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	e012      	b.n	8000878 <main+0xc8>
	              }  else if (buttonPressCount == 3 && adjustmentMode) {
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <main+0xd4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d1c2      	bne.n	80007e0 <main+0x30>
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <main+0xe0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0be      	beq.n	80007e0 <main+0x30>
	                  // Pressed once, exit adjustment mode and print adjusted clock
	              	printClockValue();
 8000862:	f7ff ff59 	bl	8000718 <printClockValue>
	              	adjustmentMode = false;
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <main+0xe0>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
	              	buttonPressStart = 0;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <main+0xdc>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
	                buttonPressCount = 0;
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <main+0xd4>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
	  if (GPIOC->IDR & GPIO_IDR_ID0) {
 8000878:	e7b2      	b.n	80007e0 <main+0x30>
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000
 8000880:	48000800 	.word	0x48000800
 8000884:	20000170 	.word	0x20000170
 8000888:	2000015c 	.word	0x2000015c
 800088c:	20000174 	.word	0x20000174
 8000890:	2000016c 	.word	0x2000016c

08000894 <MX_TIM2_Init>:




static void MX_TIM2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]


  htim2.Instance = TIM2;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM2_Init+0x98>)
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_TIM2_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_TIM2_Init+0x98>)
 80008c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80008cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_TIM2_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_TIM2_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_TIM2_Init+0x98>)
 80008dc:	f001 ff9a 	bl	8002814 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008e6:	f000 f8dd 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_TIM2_Init+0x98>)
 80008f8:	f002 f902 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000902:	f000 f8cf 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_TIM2_Init+0x98>)
 8000914:	f002 faee 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800091e:	f000 f8c1 	bl	8000aa4 <Error_Handler>
  }


}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000008c 	.word	0x2000008c

08000930 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART2_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x58>)
 8000974:	f002 fb42 	bl	8002ffc <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f891 	bl	8000aa4 <Error_Handler>
  }


}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000d8 	.word	0x200000d8
 800098c:	40004400 	.word	0x40004400

08000990 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a35      	ldr	r2, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a29      	ldr	r2, [pc, #164]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_GPIO_Init+0x108>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	21b0      	movs	r1, #176	; 0xb0
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f000 fd11 	bl	8001434 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <MX_GPIO_Init+0x10c>)
 8000a1a:	f000 fd0b 	bl	8001434 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = B1_Pin|SET_Pin|INCREASE_Pin|DECREASE_Pin;
 8000a1e:	f242 0307 	movw	r3, #8199	; 0x2007
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0x110>)
 8000a36:	f000 fb83 	bl	8001140 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a3a:	23b0      	movs	r3, #176	; 0xb0
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fb74 	bl	8001140 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 fb67 	bl	8001140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD4_Pin;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_GPIO_Init+0x10c>)
 8000a8c:	f000 fb58 	bl	8001140 <HAL_GPIO_Init>
 }
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	48000800 	.word	0x48000800

08000aa4 <Error_Handler>:


void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop

  __disable_irq();


}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b10:	d113      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_TIM_Base_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_TIM_Base_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_TIM_Base_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f000 facf 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f000 fae8 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0a2      	sub	sp, #136	; 0x88
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2260      	movs	r2, #96	; 0x60
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fec9 	bl	8003900 <memset>
  if(huart->Instance==USART2)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d138      	bne.n	8000bea <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fb09 	bl	800219c <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b90:	f7ff ff88 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f000 faab 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3788      	adds	r7, #136	; 0x88
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f948 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM2_IRQHandler+0x10>)
 8000c56:	f001 fe34 	bl	80028c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000008c 	.word	0x2000008c

08000c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c76:	f3af 8000 	nop.w
 8000c7a:	4601      	mov	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
  }

  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e009      	b.n	8000cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf1      	blt.n	8000cb0 <_write+0x12>
  }
  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_close>:

int _close(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_isatty>:

int _isatty(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f002 fd9c 	bl	80038ac <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20010000 	.word	0x20010000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000178 	.word	0x20000178
 8000da8:	20000190 	.word	0x20000190

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f002 fd5b 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fcd5 	bl	80007b0 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e14:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8000e18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e1c:	20000190 	.word	0x20000190

08000e20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_Init+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_Init+0x3c>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f93e 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f80f 	bl	8000e64 <HAL_InitTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	e001      	b.n	8000e56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e52:	f7ff fe31 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d023      	beq.n	8000ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_InitTick+0x70>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f949 	bl	8001126 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d809      	bhi.n	8000eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f913 	bl	80010d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e004      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e001      	b.n	8000ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	2000017c 	.word	0x2000017c

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000017c 	.word	0x2000017c

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e154      	b.n	80013fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8146 	beq.w	80013f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d005      	beq.n	8001180 <HAL_GPIO_Init+0x40>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d130      	bne.n	80011e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	f003 0201 	and.w	r2, r3, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d017      	beq.n	800121e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a0 	beq.w	80013f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b58      	ldr	r3, [pc, #352]	; (8001418 <HAL_GPIO_Init+0x2d8>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a57      	ldr	r2, [pc, #348]	; (8001418 <HAL_GPIO_Init+0x2d8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b55      	ldr	r3, [pc, #340]	; (8001418 <HAL_GPIO_Init+0x2d8>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012cc:	4a53      	ldr	r2, [pc, #332]	; (800141c <HAL_GPIO_Init+0x2dc>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f6:	d019      	beq.n	800132c <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a49      	ldr	r2, [pc, #292]	; (8001420 <HAL_GPIO_Init+0x2e0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a48      	ldr	r2, [pc, #288]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_GPIO_Init+0x1e4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x1e0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a46      	ldr	r2, [pc, #280]	; (800142c <HAL_GPIO_Init+0x2ec>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_GPIO_Init+0x1dc>
 8001318:	2304      	movs	r3, #4
 800131a:	e008      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 800131c:	2307      	movs	r3, #7
 800131e:	e006      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 8001320:	2303      	movs	r3, #3
 8001322:	e004      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 8001324:	2302      	movs	r3, #2
 8001326:	e002      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 800132c:	2300      	movs	r3, #0
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	f002 0203 	and.w	r2, r2, #3
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	4093      	lsls	r3, r2
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800133e:	4937      	ldr	r1, [pc, #220]	; (800141c <HAL_GPIO_Init+0x2dc>)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001370:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139a:	4a25      	ldr	r2, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c4:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	f47f aea3 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	371c      	adds	r7, #28
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	48000400 	.word	0x48000400
 8001424:	48000800 	.word	0x48000800
 8001428:	48000c00 	.word	0x48000c00
 800142c:	48001000 	.word	0x48001000
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_PWREx_GetVoltageRange+0x18>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40007000 	.word	0x40007000

08001480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148e:	d130      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149c:	d038      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2232      	movs	r2, #50	; 0x32
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9b      	lsrs	r3, r3, #18
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c4:	e002      	b.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	d102      	bne.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f2      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d110      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e00f      	b.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d007      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007000 	.word	0x40007000
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83

0800152c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f000 bc02 	b.w	8001d44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001540:	4b96      	ldr	r3, [pc, #600]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154a:	4b94      	ldr	r3, [pc, #592]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80e4 	beq.w	800172a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_RCC_OscConfig+0x4c>
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	f040 808b 	bne.w	8001686 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b01      	cmp	r3, #1
 8001574:	f040 8087 	bne.w	8001686 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001578:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x64>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e3d9      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4b81      	ldr	r3, [pc, #516]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_RCC_OscConfig+0x7e>
 80015a0:	4b7e      	ldr	r3, [pc, #504]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a8:	e005      	b.n	80015b6 <HAL_RCC_OscConfig+0x8a>
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d223      	bcs.n	8001602 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fd8c 	bl	80020dc <RCC_SetFlashLatencyFromMSIRange>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e3ba      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a72      	ldr	r2, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	496d      	ldr	r1, [pc, #436]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	4968      	ldr	r1, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e025      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001602:	4b66      	ldr	r3, [pc, #408]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a65      	ldr	r2, [pc, #404]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4960      	ldr	r1, [pc, #384]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001620:	4b5e      	ldr	r3, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	495b      	ldr	r1, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fd4c 	bl	80020dc <RCC_SetFlashLatencyFromMSIRange>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e37a      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164e:	f000 fc81 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	4950      	ldr	r1, [pc, #320]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	4a4e      	ldr	r2, [pc, #312]	; (80017a4 <HAL_RCC_OscConfig+0x278>)
 800166c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800166e:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <HAL_RCC_OscConfig+0x27c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fbf6 	bl	8000e64 <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d052      	beq.n	8001728 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	e35e      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d032      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a42      	ldr	r2, [pc, #264]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169a:	f7ff fc33 	bl	8000f04 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc2f 	bl	8000f04 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e347      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a35      	ldr	r2, [pc, #212]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4930      	ldr	r1, [pc, #192]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	492b      	ldr	r1, [pc, #172]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
 80016f2:	e01a      	b.n	800172a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001700:	f7ff fc00 	bl	8000f04 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001708:	f7ff fbfc 	bl	8000f04 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e314      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1dc>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d073      	beq.n	800181e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x21c>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d10e      	bne.n	8001760 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d063      	beq.n	800181c <HAL_RCC_OscConfig+0x2f0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d15f      	bne.n	800181c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e2f1      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x24c>
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e025      	b.n	80017c4 <HAL_RCC_OscConfig+0x298>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d114      	bne.n	80017ac <HAL_RCC_OscConfig+0x280>
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a02      	ldr	r2, [pc, #8]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e013      	b.n	80017c4 <HAL_RCC_OscConfig+0x298>
 800179c:	40021000 	.word	0x40021000
 80017a0:	08004858 	.word	0x08004858
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004
 80017ac:	4ba0      	ldr	r3, [pc, #640]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a9f      	ldr	r2, [pc, #636]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b9d      	ldr	r3, [pc, #628]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a9c      	ldr	r2, [pc, #624]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb9a 	bl	8000f04 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb96 	bl	8000f04 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e2ae      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2a8>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb86 	bl	8000f04 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb82 	bl	8000f04 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e29a      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x2d0>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d060      	beq.n	80018ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x310>
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d119      	bne.n	800186a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d116      	bne.n	800186a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183c:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x328>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e277      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	4973      	ldr	r1, [pc, #460]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	e040      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d023      	beq.n	80018ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fb41 	bl	8000f04 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fb3d 	bl	8000f04 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e255      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	495f      	ldr	r1, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb1d 	bl	8000f04 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff fb19 	bl	8000f04 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e231      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03c      	beq.n	8001972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01c      	beq.n	800193a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff faf8 	bl	8000f04 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff faf4 	bl	8000f04 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e20c      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ef      	beq.n	8001918 <HAL_RCC_OscConfig+0x3ec>
 8001938:	e01b      	b.n	8001972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800193c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001940:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff fadb 	bl	8000f04 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fad7 	bl	8000f04 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1ef      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a6 	beq.w	8001acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6593      	str	r3, [r2, #88]	; 0x58
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a8:	2301      	movs	r3, #1
 80019aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d118      	bne.n	80019ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fa9e 	bl	8000f04 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019cc:	f7ff fa9a 	bl	8000f04 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1b2      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4d8>
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a02:	e029      	b.n	8001a58 <HAL_RCC_OscConfig+0x52c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d115      	bne.n	8001a38 <HAL_RCC_OscConfig+0x50c>
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x52c>
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40007000 	.word	0x40007000
 8001a38:	4b9a      	ldr	r3, [pc, #616]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a99      	ldr	r2, [pc, #612]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a48:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a95      	ldr	r2, [pc, #596]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d016      	beq.n	8001a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fa50 	bl	8000f04 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff fa4c 	bl	8000f04 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e162      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	4b89      	ldr	r3, [pc, #548]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ed      	beq.n	8001a68 <HAL_RCC_OscConfig+0x53c>
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fa39 	bl	8000f04 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff fa35 	bl	8000f04 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e14b      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aac:	4b7d      	ldr	r3, [pc, #500]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ed      	bne.n	8001a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a77      	ldr	r2, [pc, #476]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d03c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae6:	4a6f      	ldr	r2, [pc, #444]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fa08 	bl	8000f04 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af8:	f7ff fa04 	bl	8000f04 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e11c      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ef      	beq.n	8001af8 <HAL_RCC_OscConfig+0x5cc>
 8001b18:	e01b      	b.n	8001b52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b1a:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b20:	4a60      	ldr	r2, [pc, #384]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f9eb 	bl	8000f04 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b32:	f7ff f9e7 	bl	8000f04 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0ff      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80f3 	beq.w	8001d42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	f040 80c9 	bne.w	8001cf8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b66:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d12c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	3b01      	subs	r3, #1
 8001b86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d123      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d113      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d06b      	beq.n	8001cac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d062      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0ac      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf6:	f7ff f985 	bl	8000f04 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f981 	bl	8000f04 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e099      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x77c>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c36:	0212      	lsls	r2, r2, #8
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c3e:	0852      	lsrs	r2, r2, #1
 8001c40:	3a01      	subs	r2, #1
 8001c42:	0552      	lsls	r2, r2, #21
 8001c44:	4311      	orrs	r1, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c4a:	0852      	lsrs	r2, r2, #1
 8001c4c:	3a01      	subs	r2, #1
 8001c4e:	0652      	lsls	r2, r2, #25
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c56:	06d2      	lsls	r2, r2, #27
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4912      	ldr	r1, [pc, #72]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c78:	f7ff f944 	bl	8000f04 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f940 	bl	8000f04 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e058      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_RCC_OscConfig+0x778>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9e:	e050      	b.n	8001d42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e04f      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d144      	bne.n	8001d42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd0:	f7ff f918 	bl	8000f04 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f914 	bl	8000f04 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e02c      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x7ac>
 8001cf6:	e024      	b.n	8001d42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d01f      	beq.n	8001d3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f8fb 	bl	8000f04 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff f8f7 	bl	8000f04 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e00f      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	4905      	ldr	r1, [pc, #20]	; (8001d4c <HAL_RCC_OscConfig+0x820>)
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x824>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
 8001d3c:	e001      	b.n	8001d42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	feeefffc 	.word	0xfeeefffc

08001d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0e7      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b75      	ldr	r3, [pc, #468]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b72      	ldr	r3, [pc, #456]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4970      	ldr	r1, [pc, #448]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b6e      	ldr	r3, [pc, #440]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0cf      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d908      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4960      	ldr	r1, [pc, #384]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d04c      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d121      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0a6      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df2:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d115      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e09a      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0a:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e08e      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e086      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f023 0203 	bic.w	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4943      	ldr	r1, [pc, #268]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e3c:	f7ff f862 	bl	8000f04 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e44:	f7ff f85e 	bl	8000f04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e06e      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 020c 	and.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1eb      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d208      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	492b      	ldr	r1, [pc, #172]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d210      	bcs.n	8001eca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 0207 	bic.w	r2, r3, #7
 8001eb0:	4923      	ldr	r1, [pc, #140]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e036      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4918      	ldr	r1, [pc, #96]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4910      	ldr	r1, [pc, #64]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f08:	f000 f824 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	490b      	ldr	r1, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x1f4>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1fc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ff99 	bl	8000e64 <HAL_InitTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f36:	7afb      	ldrb	r3, [r7, #11]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08004858 	.word	0x08004858
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d11e      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e004      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d134      	bne.n	800204c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d003      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0xac>
 8001ff8:	e005      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	e005      	b.n	800200c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_GetSysClockFreq+0x114>)
 8002002:	617b      	str	r3, [r7, #20]
      break;
 8002004:	e002      	b.n	800200c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	617b      	str	r3, [r7, #20]
      break;
 800200a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	fb03 f202 	mul.w	r2, r3, r2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	0e5b      	lsrs	r3, r3, #25
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	3301      	adds	r3, #1
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800204c:	69bb      	ldr	r3, [r7, #24]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	08004870 	.word	0x08004870
 8002064:	00f42400 	.word	0x00f42400
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_RCC_GetHCLKFreq+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000

08002084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002088:	f7ff fff0 	bl	800206c <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08004868 	.word	0x08004868

080020b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b4:	f7ff ffda 	bl	800206c <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0adb      	lsrs	r3, r3, #11
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4904      	ldr	r1, [pc, #16]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08004868 	.word	0x08004868

080020dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f4:	f7ff f9b6 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 80020f8:	6178      	str	r0, [r7, #20]
 80020fa:	e014      	b.n	8002126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002114:	f7ff f9a6 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 8002118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212c:	d10b      	bne.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d919      	bls.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2ba0      	cmp	r3, #160	; 0xa0
 8002138:	d902      	bls.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213a:	2302      	movs	r3, #2
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	e013      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e010      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d902      	bls.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800214c:	2303      	movs	r3, #3
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e00a      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d102      	bne.n	800215e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002158:	2302      	movs	r3, #2
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e004      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b70      	cmp	r3, #112	; 0x70
 8002162:	d101      	bne.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002164:	2301      	movs	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 0207 	bic.w	r2, r3, #7
 8002170:	4909      	ldr	r1, [pc, #36]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	40022000 	.word	0x40022000

0800219c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d031      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c0:	d01a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c6:	d814      	bhi.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d0:	d10f      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021de:	e00c      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fa22 	bl	8002630 <RCCEx_PLLSAI1_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f0:	e003      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	74fb      	strb	r3, [r7, #19]
      break;
 80021f6:	e000      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002200:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	494e      	ldr	r1, [pc, #312]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002216:	e001      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 809e 	beq.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00d      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	6593      	str	r3, [r2, #88]	; 0x58
 8002250:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225c:	2301      	movs	r3, #1
 800225e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002260:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800226c:	f7fe fe4a 	bl	8000f04 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002272:	e009      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe fe46 	bl	8000f04 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d902      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	74fb      	strb	r3, [r7, #19]
        break;
 8002286:	e005      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ef      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d15a      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01e      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d019      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022e2:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d016      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fe06 	bl	8000f04 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fa:	e00b      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fe02 	bl	8000f04 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d902      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	74fb      	strb	r3, [r7, #19]
            break;
 8002312:	e006      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ec      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10b      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
 8002344:	e006      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002354:	7c7b      	ldrb	r3, [r7, #17]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	4a8c      	ldr	r2, [pc, #560]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002364:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002372:	4b87      	ldr	r3, [pc, #540]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f023 0203 	bic.w	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4983      	ldr	r1, [pc, #524]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002394:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f023 020c 	bic.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	497b      	ldr	r1, [pc, #492]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023b6:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	4972      	ldr	r1, [pc, #456]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023d8:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	496a      	ldr	r1, [pc, #424]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	4961      	ldr	r1, [pc, #388]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800241c:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4959      	ldr	r1, [pc, #356]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243e:	4b54      	ldr	r3, [pc, #336]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4950      	ldr	r1, [pc, #320]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002460:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	4948      	ldr	r1, [pc, #288]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	493f      	ldr	r1, [pc, #252]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d028      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a4:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	4937      	ldr	r1, [pc, #220]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c2:	d106      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a31      	ldr	r2, [pc, #196]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	e011      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024da:	d10c      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	2101      	movs	r1, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f8a4 	bl	8002630 <RCCEx_PLLSAI1_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d028      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	491f      	ldr	r1, [pc, #124]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002520:	d106      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252c:	60d3      	str	r3, [r2, #12]
 800252e:	e011      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002538:	d10c      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	2101      	movs	r1, #1
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f875 	bl	8002630 <RCCEx_PLLSAI1_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02b      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257e:	d109      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a02      	ldr	r2, [pc, #8]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
 800258c:	e014      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2101      	movs	r1, #1
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f843 	bl	8002630 <RCCEx_PLLSAI1_Config>
 80025aa:	4603      	mov	r3, r0
 80025ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01c      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e2:	d10c      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f820 	bl	8002630 <RCCEx_PLLSAI1_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4904      	ldr	r1, [pc, #16]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002620:	7cbb      	ldrb	r3, [r7, #18]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d018      	beq.n	800267c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800264a:	4b71      	ldr	r3, [pc, #452]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0203 	and.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10d      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
       ||
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002662:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
       ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d047      	beq.n	8002706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	e044      	b.n	8002706 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d018      	beq.n	80026b6 <RCCEx_PLLSAI1_Config+0x86>
 8002684:	2b03      	cmp	r3, #3
 8002686:	d825      	bhi.n	80026d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002688:	2b01      	cmp	r3, #1
 800268a:	d002      	beq.n	8002692 <RCCEx_PLLSAI1_Config+0x62>
 800268c:	2b02      	cmp	r3, #2
 800268e:	d009      	beq.n	80026a4 <RCCEx_PLLSAI1_Config+0x74>
 8002690:	e020      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002692:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11d      	bne.n	80026da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a2:	e01a      	b.n	80026da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026a4:	4b5a      	ldr	r3, [pc, #360]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e013      	b.n	80026de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026b6:	4b56      	ldr	r3, [pc, #344]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026c2:	4b53      	ldr	r3, [pc, #332]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026d2:	e006      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      break;
 80026d8:	e004      	b.n	80026e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026da:	bf00      	nop
 80026dc:	e002      	b.n	80026e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	430b      	orrs	r3, r1
 8002700:	4943      	ldr	r1, [pc, #268]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d17c      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3f      	ldr	r2, [pc, #252]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002718:	f7fe fbf4 	bl	8000f04 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800271e:	e009      	b.n	8002734 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002720:	f7fe fbf0 	bl	8000f04 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d902      	bls.n	8002734 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	73fb      	strb	r3, [r7, #15]
        break;
 8002732:	e005      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ef      	bne.n	8002720 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d15f      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d110      	bne.n	800276e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6892      	ldr	r2, [r2, #8]
 800275c:	0211      	lsls	r1, r2, #8
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	06d2      	lsls	r2, r2, #27
 8002764:	430a      	orrs	r2, r1
 8002766:	492a      	ldr	r1, [pc, #168]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	610b      	str	r3, [r1, #16]
 800276c:	e027      	b.n	80027be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d112      	bne.n	800279a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800277c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	0211      	lsls	r1, r2, #8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6912      	ldr	r2, [r2, #16]
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0552      	lsls	r2, r2, #21
 8002790:	430a      	orrs	r2, r1
 8002792:	491f      	ldr	r1, [pc, #124]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
 8002798:	e011      	b.n	80027be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	0211      	lsls	r1, r2, #8
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6952      	ldr	r2, [r2, #20]
 80027b0:	0852      	lsrs	r2, r2, #1
 80027b2:	3a01      	subs	r2, #1
 80027b4:	0652      	lsls	r2, r2, #25
 80027b6:	430a      	orrs	r2, r1
 80027b8:	4915      	ldr	r1, [pc, #84]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a13      	ldr	r2, [pc, #76]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe fb9b 	bl	8000f04 <HAL_GetTick>
 80027ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d0:	e009      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027d2:	f7fe fb97 	bl	8000f04 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d902      	bls.n	80027e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	73fb      	strb	r3, [r7, #15]
          break;
 80027e4:	e005      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ef      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e049      	b.n	80028ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe f960 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 fa50 	bl	8002cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d122      	bne.n	800291e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d11b      	bne.n	800291e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0202 	mvn.w	r2, #2
 80028ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9d8 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 800290a:	e005      	b.n	8002918 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9ca 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9db 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d122      	bne.n	8002972 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d11b      	bne.n	8002972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f06f 0204 	mvn.w	r2, #4
 8002942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f9ae 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 800295e:	e005      	b.n	800296c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f9a0 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9b1 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b08      	cmp	r3, #8
 800297e:	d122      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11b      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0208 	mvn.w	r2, #8
 8002996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2204      	movs	r2, #4
 800299c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f984 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 80029b2:	e005      	b.n	80029c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f976 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f987 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d122      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d11b      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0210 	mvn.w	r2, #16
 80029ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2208      	movs	r2, #8
 80029f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f95a 	bl	8002cba <HAL_TIM_IC_CaptureCallback>
 8002a06:	e005      	b.n	8002a14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f94c 	bl	8002ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f95d 	bl	8002cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0201 	mvn.w	r2, #1
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f926 	bl	8002c92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d10e      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b80      	cmp	r3, #128	; 0x80
 8002a60:	d107      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fab1 	bl	8002fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d107      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 faa4 	bl	8002fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f90b 	bl	8002ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0220 	mvn.w	r2, #32
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa64 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_ConfigClockSource+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0b6      	b.n	8002c8a <HAL_TIM_ConfigClockSource+0x18a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d03e      	beq.n	8002bd8 <HAL_TIM_ConfigClockSource+0xd8>
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5e:	f200 8087 	bhi.w	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	f000 8086 	beq.w	8002c76 <HAL_TIM_ConfigClockSource+0x176>
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	d87f      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b70:	2b70      	cmp	r3, #112	; 0x70
 8002b72:	d01a      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0xaa>
 8002b74:	2b70      	cmp	r3, #112	; 0x70
 8002b76:	d87b      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b78:	2b60      	cmp	r3, #96	; 0x60
 8002b7a:	d050      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x11e>
 8002b7c:	2b60      	cmp	r3, #96	; 0x60
 8002b7e:	d877      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b80:	2b50      	cmp	r3, #80	; 0x50
 8002b82:	d03c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xfe>
 8002b84:	2b50      	cmp	r3, #80	; 0x50
 8002b86:	d873      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d058      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x13e>
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d86f      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b90:	2b30      	cmp	r3, #48	; 0x30
 8002b92:	d064      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15e>
 8002b94:	2b30      	cmp	r3, #48	; 0x30
 8002b96:	d86b      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d060      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15e>
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d867      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15e>
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d05a      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x15e>
 8002ba8:	e062      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f000 f97b 	bl	8002eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	609a      	str	r2, [r3, #8]
      break;
 8002bd6:	e04f      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f000 f964 	bl	8002eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bfa:	609a      	str	r2, [r3, #8]
      break;
 8002bfc:	e03c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 f8d8 	bl	8002dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2150      	movs	r1, #80	; 0x50
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f931 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e02c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 f8f7 	bl	8002e1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2160      	movs	r1, #96	; 0x60
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f921 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e01c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 f8b8 	bl	8002dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2140      	movs	r1, #64	; 0x40
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f911 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e00c      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f000 f908 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002c6e:	e003      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e000      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_Base_SetConfig+0x20>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d108      	bne.n	8002d2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00b      	beq.n	8002d4a <TIM_Base_SetConfig+0x52>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d38:	d007      	beq.n	8002d4a <TIM_Base_SetConfig+0x52>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0x52>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <TIM_Base_SetConfig+0xc4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <TIM_Base_SetConfig+0xbc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_Base_SetConfig+0xa0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <TIM_Base_SetConfig+0xc0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0xa0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <TIM_Base_SetConfig+0xc4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400

08002dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0201 	bic.w	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f023 030a 	bic.w	r3, r3, #10
 8002dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0210 	bic.w	r2, r3, #16
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	031b      	lsls	r3, r3, #12
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f043 0307 	orr.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e04f      	b.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d108      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d004      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10c      	bne.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40014000 	.word	0x40014000

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e040      	b.n	8003090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fd92 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f82c 	bl	8003098 <UART_SetConfig>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa7a 	bl	800354c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb01 	bl	8003690 <UART_CheckIdleState>
 800308e:	4603      	mov	r3, r0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800309c:	b08a      	sub	sp, #40	; 0x28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4313      	orrs	r3, r2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b9e      	ldr	r3, [pc, #632]	; (8003340 <UART_SetConfig+0x2a8>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a93      	ldr	r2, [pc, #588]	; (8003344 <UART_SetConfig+0x2ac>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	4313      	orrs	r3, r2
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a8a      	ldr	r2, [pc, #552]	; (8003348 <UART_SetConfig+0x2b0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d126      	bne.n	8003170 <UART_SetConfig+0xd8>
 8003122:	4b8a      	ldr	r3, [pc, #552]	; (800334c <UART_SetConfig+0x2b4>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d81b      	bhi.n	8003168 <UART_SetConfig+0xd0>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0xa0>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	08003159 	.word	0x08003159
 8003140:	08003151 	.word	0x08003151
 8003144:	08003161 	.word	0x08003161
 8003148:	2301      	movs	r3, #1
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e0ab      	b.n	80032a8 <UART_SetConfig+0x210>
 8003150:	2302      	movs	r3, #2
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	e0a7      	b.n	80032a8 <UART_SetConfig+0x210>
 8003158:	2304      	movs	r3, #4
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e0a3      	b.n	80032a8 <UART_SetConfig+0x210>
 8003160:	2308      	movs	r3, #8
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e09f      	b.n	80032a8 <UART_SetConfig+0x210>
 8003168:	2310      	movs	r3, #16
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316e:	e09b      	b.n	80032a8 <UART_SetConfig+0x210>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a76      	ldr	r2, [pc, #472]	; (8003350 <UART_SetConfig+0x2b8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d138      	bne.n	80031ec <UART_SetConfig+0x154>
 800317a:	4b74      	ldr	r3, [pc, #464]	; (800334c <UART_SetConfig+0x2b4>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d82d      	bhi.n	80031e4 <UART_SetConfig+0x14c>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0xf8>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080031e5 	.word	0x080031e5
 800319c:	080031e5 	.word	0x080031e5
 80031a0:	080031d5 	.word	0x080031d5
 80031a4:	080031e5 	.word	0x080031e5
 80031a8:	080031e5 	.word	0x080031e5
 80031ac:	080031e5 	.word	0x080031e5
 80031b0:	080031cd 	.word	0x080031cd
 80031b4:	080031e5 	.word	0x080031e5
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	080031e5 	.word	0x080031e5
 80031c0:	080031dd 	.word	0x080031dd
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ca:	e06d      	b.n	80032a8 <UART_SetConfig+0x210>
 80031cc:	2302      	movs	r3, #2
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d2:	e069      	b.n	80032a8 <UART_SetConfig+0x210>
 80031d4:	2304      	movs	r3, #4
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031da:	e065      	b.n	80032a8 <UART_SetConfig+0x210>
 80031dc:	2308      	movs	r3, #8
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e2:	e061      	b.n	80032a8 <UART_SetConfig+0x210>
 80031e4:	2310      	movs	r3, #16
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ea:	e05d      	b.n	80032a8 <UART_SetConfig+0x210>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <UART_SetConfig+0x2bc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d125      	bne.n	8003242 <UART_SetConfig+0x1aa>
 80031f6:	4b55      	ldr	r3, [pc, #340]	; (800334c <UART_SetConfig+0x2b4>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d016      	beq.n	8003232 <UART_SetConfig+0x19a>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d818      	bhi.n	800323a <UART_SetConfig+0x1a2>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d00a      	beq.n	8003222 <UART_SetConfig+0x18a>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d814      	bhi.n	800323a <UART_SetConfig+0x1a2>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <UART_SetConfig+0x182>
 8003214:	2b10      	cmp	r3, #16
 8003216:	d008      	beq.n	800322a <UART_SetConfig+0x192>
 8003218:	e00f      	b.n	800323a <UART_SetConfig+0x1a2>
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003220:	e042      	b.n	80032a8 <UART_SetConfig+0x210>
 8003222:	2302      	movs	r3, #2
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003228:	e03e      	b.n	80032a8 <UART_SetConfig+0x210>
 800322a:	2304      	movs	r3, #4
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003230:	e03a      	b.n	80032a8 <UART_SetConfig+0x210>
 8003232:	2308      	movs	r3, #8
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003238:	e036      	b.n	80032a8 <UART_SetConfig+0x210>
 800323a:	2310      	movs	r3, #16
 800323c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003240:	e032      	b.n	80032a8 <UART_SetConfig+0x210>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <UART_SetConfig+0x2ac>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d12a      	bne.n	80032a2 <UART_SetConfig+0x20a>
 800324c:	4b3f      	ldr	r3, [pc, #252]	; (800334c <UART_SetConfig+0x2b4>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325a:	d01a      	beq.n	8003292 <UART_SetConfig+0x1fa>
 800325c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003260:	d81b      	bhi.n	800329a <UART_SetConfig+0x202>
 8003262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003266:	d00c      	beq.n	8003282 <UART_SetConfig+0x1ea>
 8003268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326c:	d815      	bhi.n	800329a <UART_SetConfig+0x202>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <UART_SetConfig+0x1e2>
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d008      	beq.n	800328a <UART_SetConfig+0x1f2>
 8003278:	e00f      	b.n	800329a <UART_SetConfig+0x202>
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003280:	e012      	b.n	80032a8 <UART_SetConfig+0x210>
 8003282:	2302      	movs	r3, #2
 8003284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003288:	e00e      	b.n	80032a8 <UART_SetConfig+0x210>
 800328a:	2304      	movs	r3, #4
 800328c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003290:	e00a      	b.n	80032a8 <UART_SetConfig+0x210>
 8003292:	2308      	movs	r3, #8
 8003294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003298:	e006      	b.n	80032a8 <UART_SetConfig+0x210>
 800329a:	2310      	movs	r3, #16
 800329c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a0:	e002      	b.n	80032a8 <UART_SetConfig+0x210>
 80032a2:	2310      	movs	r3, #16
 80032a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a25      	ldr	r2, [pc, #148]	; (8003344 <UART_SetConfig+0x2ac>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f040 808a 	bne.w	80033c8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d824      	bhi.n	8003306 <UART_SetConfig+0x26e>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0x22c>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	08003307 	.word	0x08003307
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	08003307 	.word	0x08003307
 80032d4:	080032f7 	.word	0x080032f7
 80032d8:	08003307 	.word	0x08003307
 80032dc:	08003307 	.word	0x08003307
 80032e0:	08003307 	.word	0x08003307
 80032e4:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7fe fecc 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 80032ec:	61f8      	str	r0, [r7, #28]
        break;
 80032ee:	e010      	b.n	8003312 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <UART_SetConfig+0x2c0>)
 80032f2:	61fb      	str	r3, [r7, #28]
        break;
 80032f4:	e00d      	b.n	8003312 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fe2d 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 80032fa:	61f8      	str	r0, [r7, #28]
        break;
 80032fc:	e009      	b.n	8003312 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	61fb      	str	r3, [r7, #28]
        break;
 8003304:	e005      	b.n	8003312 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8109 	beq.w	800352c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	429a      	cmp	r2, r3
 8003328:	d305      	bcc.n	8003336 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	429a      	cmp	r2, r3
 8003334:	d912      	bls.n	800335c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800333c:	e0f6      	b.n	800352c <UART_SetConfig+0x494>
 800333e:	bf00      	nop
 8003340:	efff69f3 	.word	0xefff69f3
 8003344:	40008000 	.word	0x40008000
 8003348:	40013800 	.word	0x40013800
 800334c:	40021000 	.word	0x40021000
 8003350:	40004400 	.word	0x40004400
 8003354:	40004800 	.word	0x40004800
 8003358:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2200      	movs	r2, #0
 8003360:	461c      	mov	r4, r3
 8003362:	4615      	mov	r5, r2
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	022b      	lsls	r3, r5, #8
 800336e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003372:	0222      	lsls	r2, r4, #8
 8003374:	68f9      	ldr	r1, [r7, #12]
 8003376:	6849      	ldr	r1, [r1, #4]
 8003378:	0849      	lsrs	r1, r1, #1
 800337a:	2000      	movs	r0, #0
 800337c:	4688      	mov	r8, r1
 800337e:	4681      	mov	r9, r0
 8003380:	eb12 0a08 	adds.w	sl, r2, r8
 8003384:	eb43 0b09 	adc.w	fp, r3, r9
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003396:	4650      	mov	r0, sl
 8003398:	4659      	mov	r1, fp
 800339a:	f7fc ff69 	bl	8000270 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4613      	mov	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ac:	d308      	bcc.n	80033c0 <UART_SetConfig+0x328>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b4:	d204      	bcs.n	80033c0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e0b5      	b.n	800352c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033c6:	e0b1      	b.n	800352c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d0:	d15d      	bne.n	800348e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80033d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d827      	bhi.n	800342a <UART_SetConfig+0x392>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x348>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003405 	.word	0x08003405
 80033e4:	0800340d 	.word	0x0800340d
 80033e8:	08003415 	.word	0x08003415
 80033ec:	0800342b 	.word	0x0800342b
 80033f0:	0800341b 	.word	0x0800341b
 80033f4:	0800342b 	.word	0x0800342b
 80033f8:	0800342b 	.word	0x0800342b
 80033fc:	0800342b 	.word	0x0800342b
 8003400:	08003423 	.word	0x08003423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7fe fe3e 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 8003408:	61f8      	str	r0, [r7, #28]
        break;
 800340a:	e014      	b.n	8003436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7fe fe50 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8003410:	61f8      	str	r0, [r7, #28]
        break;
 8003412:	e010      	b.n	8003436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <UART_SetConfig+0x4b0>)
 8003416:	61fb      	str	r3, [r7, #28]
        break;
 8003418:	e00d      	b.n	8003436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341a:	f7fe fd9b 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 800341e:	61f8      	str	r0, [r7, #28]
        break;
 8003420:	e009      	b.n	8003436 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	61fb      	str	r3, [r7, #28]
        break;
 8003428:	e005      	b.n	8003436 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d077      	beq.n	800352c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005a      	lsls	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	441a      	add	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b0f      	cmp	r3, #15
 8003456:	d916      	bls.n	8003486 <UART_SetConfig+0x3ee>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d212      	bcs.n	8003486 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f023 030f 	bic.w	r3, r3, #15
 8003468:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	b29b      	uxth	r3, r3
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	b29a      	uxth	r2, r3
 8003476:	8afb      	ldrh	r3, [r7, #22]
 8003478:	4313      	orrs	r3, r2
 800347a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	8afa      	ldrh	r2, [r7, #22]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e052      	b.n	800352c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800348c:	e04e      	b.n	800352c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800348e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003492:	2b08      	cmp	r3, #8
 8003494:	d827      	bhi.n	80034e6 <UART_SetConfig+0x44e>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <UART_SetConfig+0x404>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034c1 	.word	0x080034c1
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034d1 	.word	0x080034d1
 80034a8:	080034e7 	.word	0x080034e7
 80034ac:	080034d7 	.word	0x080034d7
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034e7 	.word	0x080034e7
 80034b8:	080034e7 	.word	0x080034e7
 80034bc:	080034df 	.word	0x080034df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c0:	f7fe fde0 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 80034c4:	61f8      	str	r0, [r7, #28]
        break;
 80034c6:	e014      	b.n	80034f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7fe fdf2 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 80034cc:	61f8      	str	r0, [r7, #28]
        break;
 80034ce:	e010      	b.n	80034f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <UART_SetConfig+0x4b0>)
 80034d2:	61fb      	str	r3, [r7, #28]
        break;
 80034d4:	e00d      	b.n	80034f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d6:	f7fe fd3d 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 80034da:	61f8      	str	r0, [r7, #28]
        break;
 80034dc:	e009      	b.n	80034f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e2:	61fb      	str	r3, [r7, #28]
        break;
 80034e4:	e005      	b.n	80034f2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034f0:	bf00      	nop
    }

    if (pclk != 0U)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d019      	beq.n	800352c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	085a      	lsrs	r2, r3, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	441a      	add	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d909      	bls.n	8003526 <UART_SetConfig+0x48e>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d205      	bcs.n	8003526 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	e002      	b.n	800352c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003538:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800353c:	4618      	mov	r0, r3
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003546:	bf00      	nop
 8003548:	00f42400 	.word	0x00f42400

0800354c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01a      	beq.n	8003662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364a:	d10a      	bne.n	8003662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a0:	f7fd fc30 	bl	8000f04 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d10e      	bne.n	80036d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f82d 	bl	8003722 <UART_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e023      	b.n	800371a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d10e      	bne.n	80036fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f817 	bl	8003722 <UART_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e00d      	b.n	800371a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b09c      	sub	sp, #112	; 0x70
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003732:	e0a5      	b.n	8003880 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	f000 80a1 	beq.w	8003880 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fd fbe1 	bl	8000f04 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <UART_WaitOnFlagUntilTimeout+0x32>
 800374e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003750:	2b00      	cmp	r3, #0
 8003752:	d13e      	bne.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003764:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003768:	667b      	str	r3, [r7, #100]	; 0x64
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003774:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e6      	bne.n	8003754 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3308      	adds	r3, #8
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	663b      	str	r3, [r7, #96]	; 0x60
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e067      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d04f      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ee:	d147      	bne.n	8003880 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800380e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
 800381a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800381e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e6      	bne.n	80037fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	613b      	str	r3, [r7, #16]
   return(result);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	66bb      	str	r3, [r7, #104]	; 0x68
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800384c:	623a      	str	r2, [r7, #32]
 800384e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	69f9      	ldr	r1, [r7, #28]
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	61bb      	str	r3, [r7, #24]
   return(result);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e010      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	429a      	cmp	r2, r3
 800389c:	f43f af4a 	beq.w	8003734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3770      	adds	r7, #112	; 0x70
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <__errno>:
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <__errno+0x8>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 ffae 	bl	800482c <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	08004940 	.word	0x08004940
 80038f4:	08004940 	.word	0x08004940
 80038f8:	08004940 	.word	0x08004940
 80038fc:	08004944 	.word	0x08004944

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <iprintf>:
 8003910:	b40f      	push	{r0, r1, r2, r3}
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <iprintf+0x2c>)
 8003914:	b513      	push	{r0, r1, r4, lr}
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	b124      	cbz	r4, 8003924 <iprintf+0x14>
 800391a:	69a3      	ldr	r3, [r4, #24]
 800391c:	b913      	cbnz	r3, 8003924 <iprintf+0x14>
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f866 	bl	80039f0 <__sinit>
 8003924:	ab05      	add	r3, sp, #20
 8003926:	9a04      	ldr	r2, [sp, #16]
 8003928:	68a1      	ldr	r1, [r4, #8]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	4620      	mov	r0, r4
 800392e:	f000 f9bd 	bl	8003cac <_vfiprintf_r>
 8003932:	b002      	add	sp, #8
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003938:	b004      	add	sp, #16
 800393a:	4770      	bx	lr
 800393c:	2000000c 	.word	0x2000000c

08003940 <std>:
 8003940:	2300      	movs	r3, #0
 8003942:	b510      	push	{r4, lr}
 8003944:	4604      	mov	r4, r0
 8003946:	e9c0 3300 	strd	r3, r3, [r0]
 800394a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394e:	6083      	str	r3, [r0, #8]
 8003950:	8181      	strh	r1, [r0, #12]
 8003952:	6643      	str	r3, [r0, #100]	; 0x64
 8003954:	81c2      	strh	r2, [r0, #14]
 8003956:	6183      	str	r3, [r0, #24]
 8003958:	4619      	mov	r1, r3
 800395a:	2208      	movs	r2, #8
 800395c:	305c      	adds	r0, #92	; 0x5c
 800395e:	f7ff ffcf 	bl	8003900 <memset>
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <std+0x38>)
 8003964:	6263      	str	r3, [r4, #36]	; 0x24
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <std+0x3c>)
 8003968:	62a3      	str	r3, [r4, #40]	; 0x28
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <std+0x40>)
 800396c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <std+0x44>)
 8003970:	6224      	str	r4, [r4, #32]
 8003972:	6323      	str	r3, [r4, #48]	; 0x30
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	08004255 	.word	0x08004255
 800397c:	08004277 	.word	0x08004277
 8003980:	080042af 	.word	0x080042af
 8003984:	080042d3 	.word	0x080042d3

08003988 <_cleanup_r>:
 8003988:	4901      	ldr	r1, [pc, #4]	; (8003990 <_cleanup_r+0x8>)
 800398a:	f000 b8af 	b.w	8003aec <_fwalk_reent>
 800398e:	bf00      	nop
 8003990:	080045ad 	.word	0x080045ad

08003994 <__sfmoreglue>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	2268      	movs	r2, #104	; 0x68
 8003998:	1e4d      	subs	r5, r1, #1
 800399a:	4355      	muls	r5, r2
 800399c:	460e      	mov	r6, r1
 800399e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039a2:	f000 f8e5 	bl	8003b70 <_malloc_r>
 80039a6:	4604      	mov	r4, r0
 80039a8:	b140      	cbz	r0, 80039bc <__sfmoreglue+0x28>
 80039aa:	2100      	movs	r1, #0
 80039ac:	e9c0 1600 	strd	r1, r6, [r0]
 80039b0:	300c      	adds	r0, #12
 80039b2:	60a0      	str	r0, [r4, #8]
 80039b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039b8:	f7ff ffa2 	bl	8003900 <memset>
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}

080039c0 <__sfp_lock_acquire>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__sfp_lock_acquire+0x8>)
 80039c2:	f000 b8b3 	b.w	8003b2c <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	20000181 	.word	0x20000181

080039cc <__sfp_lock_release>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__sfp_lock_release+0x8>)
 80039ce:	f000 b8ae 	b.w	8003b2e <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	20000181 	.word	0x20000181

080039d8 <__sinit_lock_acquire>:
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <__sinit_lock_acquire+0x8>)
 80039da:	f000 b8a7 	b.w	8003b2c <__retarget_lock_acquire_recursive>
 80039de:	bf00      	nop
 80039e0:	20000182 	.word	0x20000182

080039e4 <__sinit_lock_release>:
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <__sinit_lock_release+0x8>)
 80039e6:	f000 b8a2 	b.w	8003b2e <__retarget_lock_release_recursive>
 80039ea:	bf00      	nop
 80039ec:	20000182 	.word	0x20000182

080039f0 <__sinit>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4604      	mov	r4, r0
 80039f4:	f7ff fff0 	bl	80039d8 <__sinit_lock_acquire>
 80039f8:	69a3      	ldr	r3, [r4, #24]
 80039fa:	b11b      	cbz	r3, 8003a04 <__sinit+0x14>
 80039fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a00:	f7ff bff0 	b.w	80039e4 <__sinit_lock_release>
 8003a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a08:	6523      	str	r3, [r4, #80]	; 0x50
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <__sinit+0x68>)
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <__sinit+0x6c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	bf04      	itt	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	61a3      	streq	r3, [r4, #24]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 f820 	bl	8003a60 <__sfp>
 8003a20:	6060      	str	r0, [r4, #4]
 8003a22:	4620      	mov	r0, r4
 8003a24:	f000 f81c 	bl	8003a60 <__sfp>
 8003a28:	60a0      	str	r0, [r4, #8]
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 f818 	bl	8003a60 <__sfp>
 8003a30:	2200      	movs	r2, #0
 8003a32:	60e0      	str	r0, [r4, #12]
 8003a34:	2104      	movs	r1, #4
 8003a36:	6860      	ldr	r0, [r4, #4]
 8003a38:	f7ff ff82 	bl	8003940 <std>
 8003a3c:	68a0      	ldr	r0, [r4, #8]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2109      	movs	r1, #9
 8003a42:	f7ff ff7d 	bl	8003940 <std>
 8003a46:	68e0      	ldr	r0, [r4, #12]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	2112      	movs	r1, #18
 8003a4c:	f7ff ff78 	bl	8003940 <std>
 8003a50:	2301      	movs	r3, #1
 8003a52:	61a3      	str	r3, [r4, #24]
 8003a54:	e7d2      	b.n	80039fc <__sinit+0xc>
 8003a56:	bf00      	nop
 8003a58:	080048a0 	.word	0x080048a0
 8003a5c:	08003989 	.word	0x08003989

08003a60 <__sfp>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	4607      	mov	r7, r0
 8003a64:	f7ff ffac 	bl	80039c0 <__sfp_lock_acquire>
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <__sfp+0x84>)
 8003a6a:	681e      	ldr	r6, [r3, #0]
 8003a6c:	69b3      	ldr	r3, [r6, #24]
 8003a6e:	b913      	cbnz	r3, 8003a76 <__sfp+0x16>
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff ffbd 	bl	80039f0 <__sinit>
 8003a76:	3648      	adds	r6, #72	; 0x48
 8003a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	d503      	bpl.n	8003a88 <__sfp+0x28>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	b30b      	cbz	r3, 8003ac8 <__sfp+0x68>
 8003a84:	6836      	ldr	r6, [r6, #0]
 8003a86:	e7f7      	b.n	8003a78 <__sfp+0x18>
 8003a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a8c:	b9d5      	cbnz	r5, 8003ac4 <__sfp+0x64>
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <__sfp+0x88>)
 8003a90:	60e3      	str	r3, [r4, #12]
 8003a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a96:	6665      	str	r5, [r4, #100]	; 0x64
 8003a98:	f000 f847 	bl	8003b2a <__retarget_lock_init_recursive>
 8003a9c:	f7ff ff96 	bl	80039cc <__sfp_lock_release>
 8003aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003aa8:	6025      	str	r5, [r4, #0]
 8003aaa:	61a5      	str	r5, [r4, #24]
 8003aac:	2208      	movs	r2, #8
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ab4:	f7ff ff24 	bl	8003900 <memset>
 8003ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac4:	3468      	adds	r4, #104	; 0x68
 8003ac6:	e7d9      	b.n	8003a7c <__sfp+0x1c>
 8003ac8:	2104      	movs	r1, #4
 8003aca:	4638      	mov	r0, r7
 8003acc:	f7ff ff62 	bl	8003994 <__sfmoreglue>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	6030      	str	r0, [r6, #0]
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d1d5      	bne.n	8003a84 <__sfp+0x24>
 8003ad8:	f7ff ff78 	bl	80039cc <__sfp_lock_release>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	e7ee      	b.n	8003ac0 <__sfp+0x60>
 8003ae2:	bf00      	nop
 8003ae4:	080048a0 	.word	0x080048a0
 8003ae8:	ffff0001 	.word	0xffff0001

08003aec <_fwalk_reent>:
 8003aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af0:	4606      	mov	r6, r0
 8003af2:	4688      	mov	r8, r1
 8003af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003af8:	2700      	movs	r7, #0
 8003afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003afe:	f1b9 0901 	subs.w	r9, r9, #1
 8003b02:	d505      	bpl.n	8003b10 <_fwalk_reent+0x24>
 8003b04:	6824      	ldr	r4, [r4, #0]
 8003b06:	2c00      	cmp	r4, #0
 8003b08:	d1f7      	bne.n	8003afa <_fwalk_reent+0xe>
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b10:	89ab      	ldrh	r3, [r5, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d907      	bls.n	8003b26 <_fwalk_reent+0x3a>
 8003b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	d003      	beq.n	8003b26 <_fwalk_reent+0x3a>
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4630      	mov	r0, r6
 8003b22:	47c0      	blx	r8
 8003b24:	4307      	orrs	r7, r0
 8003b26:	3568      	adds	r5, #104	; 0x68
 8003b28:	e7e9      	b.n	8003afe <_fwalk_reent+0x12>

08003b2a <__retarget_lock_init_recursive>:
 8003b2a:	4770      	bx	lr

08003b2c <__retarget_lock_acquire_recursive>:
 8003b2c:	4770      	bx	lr

08003b2e <__retarget_lock_release_recursive>:
 8003b2e:	4770      	bx	lr

08003b30 <sbrk_aligned>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4e0e      	ldr	r6, [pc, #56]	; (8003b6c <sbrk_aligned+0x3c>)
 8003b34:	460c      	mov	r4, r1
 8003b36:	6831      	ldr	r1, [r6, #0]
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b911      	cbnz	r1, 8003b42 <sbrk_aligned+0x12>
 8003b3c:	f000 fb7a 	bl	8004234 <_sbrk_r>
 8003b40:	6030      	str	r0, [r6, #0]
 8003b42:	4621      	mov	r1, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 fb75 	bl	8004234 <_sbrk_r>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	d00a      	beq.n	8003b64 <sbrk_aligned+0x34>
 8003b4e:	1cc4      	adds	r4, r0, #3
 8003b50:	f024 0403 	bic.w	r4, r4, #3
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d007      	beq.n	8003b68 <sbrk_aligned+0x38>
 8003b58:	1a21      	subs	r1, r4, r0
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 fb6a 	bl	8004234 <_sbrk_r>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d101      	bne.n	8003b68 <sbrk_aligned+0x38>
 8003b64:	f04f 34ff 	mov.w	r4, #4294967295
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	20000188 	.word	0x20000188

08003b70 <_malloc_r>:
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	1ccd      	adds	r5, r1, #3
 8003b76:	f025 0503 	bic.w	r5, r5, #3
 8003b7a:	3508      	adds	r5, #8
 8003b7c:	2d0c      	cmp	r5, #12
 8003b7e:	bf38      	it	cc
 8003b80:	250c      	movcc	r5, #12
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	4607      	mov	r7, r0
 8003b86:	db01      	blt.n	8003b8c <_malloc_r+0x1c>
 8003b88:	42a9      	cmp	r1, r5
 8003b8a:	d905      	bls.n	8003b98 <_malloc_r+0x28>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	2600      	movs	r6, #0
 8003b92:	4630      	mov	r0, r6
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	4e2e      	ldr	r6, [pc, #184]	; (8003c54 <_malloc_r+0xe4>)
 8003b9a:	f000 fdbb 	bl	8004714 <__malloc_lock>
 8003b9e:	6833      	ldr	r3, [r6, #0]
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	bb34      	cbnz	r4, 8003bf2 <_malloc_r+0x82>
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	f7ff ffc2 	bl	8003b30 <sbrk_aligned>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	4604      	mov	r4, r0
 8003bb0:	d14d      	bne.n	8003c4e <_malloc_r+0xde>
 8003bb2:	6834      	ldr	r4, [r6, #0]
 8003bb4:	4626      	mov	r6, r4
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	d140      	bne.n	8003c3c <_malloc_r+0xcc>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	eb04 0803 	add.w	r8, r4, r3
 8003bc4:	f000 fb36 	bl	8004234 <_sbrk_r>
 8003bc8:	4580      	cmp	r8, r0
 8003bca:	d13a      	bne.n	8003c42 <_malloc_r+0xd2>
 8003bcc:	6821      	ldr	r1, [r4, #0]
 8003bce:	3503      	adds	r5, #3
 8003bd0:	1a6d      	subs	r5, r5, r1
 8003bd2:	f025 0503 	bic.w	r5, r5, #3
 8003bd6:	3508      	adds	r5, #8
 8003bd8:	2d0c      	cmp	r5, #12
 8003bda:	bf38      	it	cc
 8003bdc:	250c      	movcc	r5, #12
 8003bde:	4629      	mov	r1, r5
 8003be0:	4638      	mov	r0, r7
 8003be2:	f7ff ffa5 	bl	8003b30 <sbrk_aligned>
 8003be6:	3001      	adds	r0, #1
 8003be8:	d02b      	beq.n	8003c42 <_malloc_r+0xd2>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	442b      	add	r3, r5
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	e00e      	b.n	8003c10 <_malloc_r+0xa0>
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	1b52      	subs	r2, r2, r5
 8003bf6:	d41e      	bmi.n	8003c36 <_malloc_r+0xc6>
 8003bf8:	2a0b      	cmp	r2, #11
 8003bfa:	d916      	bls.n	8003c2a <_malloc_r+0xba>
 8003bfc:	1961      	adds	r1, r4, r5
 8003bfe:	42a3      	cmp	r3, r4
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	bf18      	it	ne
 8003c04:	6059      	strne	r1, [r3, #4]
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	bf08      	it	eq
 8003c0a:	6031      	streq	r1, [r6, #0]
 8003c0c:	5162      	str	r2, [r4, r5]
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	4638      	mov	r0, r7
 8003c12:	f104 060b 	add.w	r6, r4, #11
 8003c16:	f000 fd83 	bl	8004720 <__malloc_unlock>
 8003c1a:	f026 0607 	bic.w	r6, r6, #7
 8003c1e:	1d23      	adds	r3, r4, #4
 8003c20:	1af2      	subs	r2, r6, r3
 8003c22:	d0b6      	beq.n	8003b92 <_malloc_r+0x22>
 8003c24:	1b9b      	subs	r3, r3, r6
 8003c26:	50a3      	str	r3, [r4, r2]
 8003c28:	e7b3      	b.n	8003b92 <_malloc_r+0x22>
 8003c2a:	6862      	ldr	r2, [r4, #4]
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	bf0c      	ite	eq
 8003c30:	6032      	streq	r2, [r6, #0]
 8003c32:	605a      	strne	r2, [r3, #4]
 8003c34:	e7ec      	b.n	8003c10 <_malloc_r+0xa0>
 8003c36:	4623      	mov	r3, r4
 8003c38:	6864      	ldr	r4, [r4, #4]
 8003c3a:	e7b2      	b.n	8003ba2 <_malloc_r+0x32>
 8003c3c:	4634      	mov	r4, r6
 8003c3e:	6876      	ldr	r6, [r6, #4]
 8003c40:	e7b9      	b.n	8003bb6 <_malloc_r+0x46>
 8003c42:	230c      	movs	r3, #12
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4638      	mov	r0, r7
 8003c48:	f000 fd6a 	bl	8004720 <__malloc_unlock>
 8003c4c:	e7a1      	b.n	8003b92 <_malloc_r+0x22>
 8003c4e:	6025      	str	r5, [r4, #0]
 8003c50:	e7de      	b.n	8003c10 <_malloc_r+0xa0>
 8003c52:	bf00      	nop
 8003c54:	20000184 	.word	0x20000184

08003c58 <__sfputc_r>:
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	b410      	push	{r4}
 8003c60:	6093      	str	r3, [r2, #8]
 8003c62:	da08      	bge.n	8003c76 <__sfputc_r+0x1e>
 8003c64:	6994      	ldr	r4, [r2, #24]
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	db01      	blt.n	8003c6e <__sfputc_r+0x16>
 8003c6a:	290a      	cmp	r1, #10
 8003c6c:	d103      	bne.n	8003c76 <__sfputc_r+0x1e>
 8003c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c72:	f000 bb33 	b.w	80042dc <__swbuf_r>
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	1c58      	adds	r0, r3, #1
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	7019      	strb	r1, [r3, #0]
 8003c7e:	4608      	mov	r0, r1
 8003c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <__sfputs_r>:
 8003c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	18d5      	adds	r5, r2, r3
 8003c90:	42ac      	cmp	r4, r5
 8003c92:	d101      	bne.n	8003c98 <__sfputs_r+0x12>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e007      	b.n	8003ca8 <__sfputs_r+0x22>
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ffda 	bl	8003c58 <__sfputc_r>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d1f3      	bne.n	8003c90 <__sfputs_r+0xa>
 8003ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cac <_vfiprintf_r>:
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	b09d      	sub	sp, #116	; 0x74
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	4698      	mov	r8, r3
 8003cb8:	4606      	mov	r6, r0
 8003cba:	b118      	cbz	r0, 8003cc4 <_vfiprintf_r+0x18>
 8003cbc:	6983      	ldr	r3, [r0, #24]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <_vfiprintf_r+0x18>
 8003cc0:	f7ff fe96 	bl	80039f0 <__sinit>
 8003cc4:	4b89      	ldr	r3, [pc, #548]	; (8003eec <_vfiprintf_r+0x240>)
 8003cc6:	429d      	cmp	r5, r3
 8003cc8:	d11b      	bne.n	8003d02 <_vfiprintf_r+0x56>
 8003cca:	6875      	ldr	r5, [r6, #4]
 8003ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cce:	07d9      	lsls	r1, r3, #31
 8003cd0:	d405      	bmi.n	8003cde <_vfiprintf_r+0x32>
 8003cd2:	89ab      	ldrh	r3, [r5, #12]
 8003cd4:	059a      	lsls	r2, r3, #22
 8003cd6:	d402      	bmi.n	8003cde <_vfiprintf_r+0x32>
 8003cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cda:	f7ff ff27 	bl	8003b2c <__retarget_lock_acquire_recursive>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	d501      	bpl.n	8003ce8 <_vfiprintf_r+0x3c>
 8003ce4:	692b      	ldr	r3, [r5, #16]
 8003ce6:	b9eb      	cbnz	r3, 8003d24 <_vfiprintf_r+0x78>
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4630      	mov	r0, r6
 8003cec:	f000 fb5a 	bl	80043a4 <__swsetup_r>
 8003cf0:	b1c0      	cbz	r0, 8003d24 <_vfiprintf_r+0x78>
 8003cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cf4:	07dc      	lsls	r4, r3, #31
 8003cf6:	d50e      	bpl.n	8003d16 <_vfiprintf_r+0x6a>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	b01d      	add	sp, #116	; 0x74
 8003cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <_vfiprintf_r+0x244>)
 8003d04:	429d      	cmp	r5, r3
 8003d06:	d101      	bne.n	8003d0c <_vfiprintf_r+0x60>
 8003d08:	68b5      	ldr	r5, [r6, #8]
 8003d0a:	e7df      	b.n	8003ccc <_vfiprintf_r+0x20>
 8003d0c:	4b79      	ldr	r3, [pc, #484]	; (8003ef4 <_vfiprintf_r+0x248>)
 8003d0e:	429d      	cmp	r5, r3
 8003d10:	bf08      	it	eq
 8003d12:	68f5      	ldreq	r5, [r6, #12]
 8003d14:	e7da      	b.n	8003ccc <_vfiprintf_r+0x20>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	0598      	lsls	r0, r3, #22
 8003d1a:	d4ed      	bmi.n	8003cf8 <_vfiprintf_r+0x4c>
 8003d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d1e:	f7ff ff06 	bl	8003b2e <__retarget_lock_release_recursive>
 8003d22:	e7e9      	b.n	8003cf8 <_vfiprintf_r+0x4c>
 8003d24:	2300      	movs	r3, #0
 8003d26:	9309      	str	r3, [sp, #36]	; 0x24
 8003d28:	2320      	movs	r3, #32
 8003d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d32:	2330      	movs	r3, #48	; 0x30
 8003d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ef8 <_vfiprintf_r+0x24c>
 8003d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d3c:	f04f 0901 	mov.w	r9, #1
 8003d40:	4623      	mov	r3, r4
 8003d42:	469a      	mov	sl, r3
 8003d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d48:	b10a      	cbz	r2, 8003d4e <_vfiprintf_r+0xa2>
 8003d4a:	2a25      	cmp	r2, #37	; 0x25
 8003d4c:	d1f9      	bne.n	8003d42 <_vfiprintf_r+0x96>
 8003d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8003d52:	d00b      	beq.n	8003d6c <_vfiprintf_r+0xc0>
 8003d54:	465b      	mov	r3, fp
 8003d56:	4622      	mov	r2, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f7ff ff93 	bl	8003c86 <__sfputs_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	f000 80aa 	beq.w	8003eba <_vfiprintf_r+0x20e>
 8003d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d68:	445a      	add	r2, fp
 8003d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a2 	beq.w	8003eba <_vfiprintf_r+0x20e>
 8003d76:	2300      	movs	r3, #0
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d80:	f10a 0a01 	add.w	sl, sl, #1
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	9307      	str	r3, [sp, #28]
 8003d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d8e:	4654      	mov	r4, sl
 8003d90:	2205      	movs	r2, #5
 8003d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d96:	4858      	ldr	r0, [pc, #352]	; (8003ef8 <_vfiprintf_r+0x24c>)
 8003d98:	f7fc fa1a 	bl	80001d0 <memchr>
 8003d9c:	9a04      	ldr	r2, [sp, #16]
 8003d9e:	b9d8      	cbnz	r0, 8003dd8 <_vfiprintf_r+0x12c>
 8003da0:	06d1      	lsls	r1, r2, #27
 8003da2:	bf44      	itt	mi
 8003da4:	2320      	movmi	r3, #32
 8003da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003daa:	0713      	lsls	r3, r2, #28
 8003dac:	bf44      	itt	mi
 8003dae:	232b      	movmi	r3, #43	; 0x2b
 8003db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db4:	f89a 3000 	ldrb.w	r3, [sl]
 8003db8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dba:	d015      	beq.n	8003de8 <_vfiprintf_r+0x13c>
 8003dbc:	9a07      	ldr	r2, [sp, #28]
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f04f 0c0a 	mov.w	ip, #10
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dcc:	3b30      	subs	r3, #48	; 0x30
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d94e      	bls.n	8003e70 <_vfiprintf_r+0x1c4>
 8003dd2:	b1b0      	cbz	r0, 8003e02 <_vfiprintf_r+0x156>
 8003dd4:	9207      	str	r2, [sp, #28]
 8003dd6:	e014      	b.n	8003e02 <_vfiprintf_r+0x156>
 8003dd8:	eba0 0308 	sub.w	r3, r0, r8
 8003ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8003de0:	4313      	orrs	r3, r2
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	46a2      	mov	sl, r4
 8003de6:	e7d2      	b.n	8003d8e <_vfiprintf_r+0xe2>
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	1d19      	adds	r1, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	9103      	str	r1, [sp, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfbb      	ittet	lt
 8003df4:	425b      	neglt	r3, r3
 8003df6:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfa:	9307      	strge	r3, [sp, #28]
 8003dfc:	9307      	strlt	r3, [sp, #28]
 8003dfe:	bfb8      	it	lt
 8003e00:	9204      	strlt	r2, [sp, #16]
 8003e02:	7823      	ldrb	r3, [r4, #0]
 8003e04:	2b2e      	cmp	r3, #46	; 0x2e
 8003e06:	d10c      	bne.n	8003e22 <_vfiprintf_r+0x176>
 8003e08:	7863      	ldrb	r3, [r4, #1]
 8003e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0c:	d135      	bne.n	8003e7a <_vfiprintf_r+0x1ce>
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	9203      	str	r2, [sp, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfb8      	it	lt
 8003e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e1e:	3402      	adds	r4, #2
 8003e20:	9305      	str	r3, [sp, #20]
 8003e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f08 <_vfiprintf_r+0x25c>
 8003e26:	7821      	ldrb	r1, [r4, #0]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	f7fc f9d0 	bl	80001d0 <memchr>
 8003e30:	b140      	cbz	r0, 8003e44 <_vfiprintf_r+0x198>
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	eba0 000a 	sub.w	r0, r0, sl
 8003e38:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3c:	9b04      	ldr	r3, [sp, #16]
 8003e3e:	4303      	orrs	r3, r0
 8003e40:	3401      	adds	r4, #1
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	482c      	ldr	r0, [pc, #176]	; (8003efc <_vfiprintf_r+0x250>)
 8003e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e4e:	2206      	movs	r2, #6
 8003e50:	f7fc f9be 	bl	80001d0 <memchr>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d03f      	beq.n	8003ed8 <_vfiprintf_r+0x22c>
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <_vfiprintf_r+0x254>)
 8003e5a:	bb1b      	cbnz	r3, 8003ea4 <_vfiprintf_r+0x1f8>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	3307      	adds	r3, #7
 8003e60:	f023 0307 	bic.w	r3, r3, #7
 8003e64:	3308      	adds	r3, #8
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6a:	443b      	add	r3, r7
 8003e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6e:	e767      	b.n	8003d40 <_vfiprintf_r+0x94>
 8003e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e74:	460c      	mov	r4, r1
 8003e76:	2001      	movs	r0, #1
 8003e78:	e7a5      	b.n	8003dc6 <_vfiprintf_r+0x11a>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	3401      	adds	r4, #1
 8003e7e:	9305      	str	r3, [sp, #20]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f04f 0c0a 	mov.w	ip, #10
 8003e86:	4620      	mov	r0, r4
 8003e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8c:	3a30      	subs	r2, #48	; 0x30
 8003e8e:	2a09      	cmp	r2, #9
 8003e90:	d903      	bls.n	8003e9a <_vfiprintf_r+0x1ee>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0c5      	beq.n	8003e22 <_vfiprintf_r+0x176>
 8003e96:	9105      	str	r1, [sp, #20]
 8003e98:	e7c3      	b.n	8003e22 <_vfiprintf_r+0x176>
 8003e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e7f0      	b.n	8003e86 <_vfiprintf_r+0x1da>
 8003ea4:	ab03      	add	r3, sp, #12
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <_vfiprintf_r+0x258>)
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f3af 8000 	nop.w
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	1c78      	adds	r0, r7, #1
 8003eb8:	d1d6      	bne.n	8003e68 <_vfiprintf_r+0x1bc>
 8003eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ebc:	07d9      	lsls	r1, r3, #31
 8003ebe:	d405      	bmi.n	8003ecc <_vfiprintf_r+0x220>
 8003ec0:	89ab      	ldrh	r3, [r5, #12]
 8003ec2:	059a      	lsls	r2, r3, #22
 8003ec4:	d402      	bmi.n	8003ecc <_vfiprintf_r+0x220>
 8003ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ec8:	f7ff fe31 	bl	8003b2e <__retarget_lock_release_recursive>
 8003ecc:	89ab      	ldrh	r3, [r5, #12]
 8003ece:	065b      	lsls	r3, r3, #25
 8003ed0:	f53f af12 	bmi.w	8003cf8 <_vfiprintf_r+0x4c>
 8003ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ed6:	e711      	b.n	8003cfc <_vfiprintf_r+0x50>
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	462a      	mov	r2, r5
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <_vfiprintf_r+0x258>)
 8003ee0:	a904      	add	r1, sp, #16
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f000 f880 	bl	8003fe8 <_printf_i>
 8003ee8:	e7e4      	b.n	8003eb4 <_vfiprintf_r+0x208>
 8003eea:	bf00      	nop
 8003eec:	080048c4 	.word	0x080048c4
 8003ef0:	080048e4 	.word	0x080048e4
 8003ef4:	080048a4 	.word	0x080048a4
 8003ef8:	08004904 	.word	0x08004904
 8003efc:	0800490e 	.word	0x0800490e
 8003f00:	00000000 	.word	0x00000000
 8003f04:	08003c87 	.word	0x08003c87
 8003f08:	0800490a 	.word	0x0800490a

08003f0c <_printf_common>:
 8003f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f10:	4616      	mov	r6, r2
 8003f12:	4699      	mov	r9, r3
 8003f14:	688a      	ldr	r2, [r1, #8]
 8003f16:	690b      	ldr	r3, [r1, #16]
 8003f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	bfb8      	it	lt
 8003f20:	4613      	movlt	r3, r2
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f28:	4607      	mov	r7, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	b10a      	cbz	r2, 8003f32 <_printf_common+0x26>
 8003f2e:	3301      	adds	r3, #1
 8003f30:	6033      	str	r3, [r6, #0]
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	0699      	lsls	r1, r3, #26
 8003f36:	bf42      	ittt	mi
 8003f38:	6833      	ldrmi	r3, [r6, #0]
 8003f3a:	3302      	addmi	r3, #2
 8003f3c:	6033      	strmi	r3, [r6, #0]
 8003f3e:	6825      	ldr	r5, [r4, #0]
 8003f40:	f015 0506 	ands.w	r5, r5, #6
 8003f44:	d106      	bne.n	8003f54 <_printf_common+0x48>
 8003f46:	f104 0a19 	add.w	sl, r4, #25
 8003f4a:	68e3      	ldr	r3, [r4, #12]
 8003f4c:	6832      	ldr	r2, [r6, #0]
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	42ab      	cmp	r3, r5
 8003f52:	dc26      	bgt.n	8003fa2 <_printf_common+0x96>
 8003f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f58:	1e13      	subs	r3, r2, #0
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	bf18      	it	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	0692      	lsls	r2, r2, #26
 8003f62:	d42b      	bmi.n	8003fbc <_printf_common+0xb0>
 8003f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f68:	4649      	mov	r1, r9
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	47c0      	blx	r8
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d01e      	beq.n	8003fb0 <_printf_common+0xa4>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	68e5      	ldr	r5, [r4, #12]
 8003f76:	6832      	ldr	r2, [r6, #0]
 8003f78:	f003 0306 	and.w	r3, r3, #6
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	bf08      	it	eq
 8003f80:	1aad      	subeq	r5, r5, r2
 8003f82:	68a3      	ldr	r3, [r4, #8]
 8003f84:	6922      	ldr	r2, [r4, #16]
 8003f86:	bf0c      	ite	eq
 8003f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f8c:	2500      	movne	r5, #0
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	bfc4      	itt	gt
 8003f92:	1a9b      	subgt	r3, r3, r2
 8003f94:	18ed      	addgt	r5, r5, r3
 8003f96:	2600      	movs	r6, #0
 8003f98:	341a      	adds	r4, #26
 8003f9a:	42b5      	cmp	r5, r6
 8003f9c:	d11a      	bne.n	8003fd4 <_printf_common+0xc8>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e008      	b.n	8003fb4 <_printf_common+0xa8>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4652      	mov	r2, sl
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	4638      	mov	r0, r7
 8003faa:	47c0      	blx	r8
 8003fac:	3001      	adds	r0, #1
 8003fae:	d103      	bne.n	8003fb8 <_printf_common+0xac>
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb8:	3501      	adds	r5, #1
 8003fba:	e7c6      	b.n	8003f4a <_printf_common+0x3e>
 8003fbc:	18e1      	adds	r1, r4, r3
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	2030      	movs	r0, #48	; 0x30
 8003fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc6:	4422      	add	r2, r4
 8003fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	e7c7      	b.n	8003f64 <_printf_common+0x58>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4649      	mov	r1, r9
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d0e6      	beq.n	8003fb0 <_printf_common+0xa4>
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7d9      	b.n	8003f9a <_printf_common+0x8e>
	...

08003fe8 <_printf_i>:
 8003fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	7e0f      	ldrb	r7, [r1, #24]
 8003fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ff0:	2f78      	cmp	r7, #120	; 0x78
 8003ff2:	4691      	mov	r9, r2
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	469a      	mov	sl, r3
 8003ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ffe:	d807      	bhi.n	8004010 <_printf_i+0x28>
 8004000:	2f62      	cmp	r7, #98	; 0x62
 8004002:	d80a      	bhi.n	800401a <_printf_i+0x32>
 8004004:	2f00      	cmp	r7, #0
 8004006:	f000 80d8 	beq.w	80041ba <_printf_i+0x1d2>
 800400a:	2f58      	cmp	r7, #88	; 0x58
 800400c:	f000 80a3 	beq.w	8004156 <_printf_i+0x16e>
 8004010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004018:	e03a      	b.n	8004090 <_printf_i+0xa8>
 800401a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401e:	2b15      	cmp	r3, #21
 8004020:	d8f6      	bhi.n	8004010 <_printf_i+0x28>
 8004022:	a101      	add	r1, pc, #4	; (adr r1, 8004028 <_printf_i+0x40>)
 8004024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004028:	08004081 	.word	0x08004081
 800402c:	08004095 	.word	0x08004095
 8004030:	08004011 	.word	0x08004011
 8004034:	08004011 	.word	0x08004011
 8004038:	08004011 	.word	0x08004011
 800403c:	08004011 	.word	0x08004011
 8004040:	08004095 	.word	0x08004095
 8004044:	08004011 	.word	0x08004011
 8004048:	08004011 	.word	0x08004011
 800404c:	08004011 	.word	0x08004011
 8004050:	08004011 	.word	0x08004011
 8004054:	080041a1 	.word	0x080041a1
 8004058:	080040c5 	.word	0x080040c5
 800405c:	08004183 	.word	0x08004183
 8004060:	08004011 	.word	0x08004011
 8004064:	08004011 	.word	0x08004011
 8004068:	080041c3 	.word	0x080041c3
 800406c:	08004011 	.word	0x08004011
 8004070:	080040c5 	.word	0x080040c5
 8004074:	08004011 	.word	0x08004011
 8004078:	08004011 	.word	0x08004011
 800407c:	0800418b 	.word	0x0800418b
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	1d1a      	adds	r2, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	602a      	str	r2, [r5, #0]
 8004088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800408c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004090:	2301      	movs	r3, #1
 8004092:	e0a3      	b.n	80041dc <_printf_i+0x1f4>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	6829      	ldr	r1, [r5, #0]
 8004098:	0606      	lsls	r6, r0, #24
 800409a:	f101 0304 	add.w	r3, r1, #4
 800409e:	d50a      	bpl.n	80040b6 <_printf_i+0xce>
 80040a0:	680e      	ldr	r6, [r1, #0]
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	2e00      	cmp	r6, #0
 80040a6:	da03      	bge.n	80040b0 <_printf_i+0xc8>
 80040a8:	232d      	movs	r3, #45	; 0x2d
 80040aa:	4276      	negs	r6, r6
 80040ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b0:	485e      	ldr	r0, [pc, #376]	; (800422c <_printf_i+0x244>)
 80040b2:	230a      	movs	r3, #10
 80040b4:	e019      	b.n	80040ea <_printf_i+0x102>
 80040b6:	680e      	ldr	r6, [r1, #0]
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040be:	bf18      	it	ne
 80040c0:	b236      	sxthne	r6, r6
 80040c2:	e7ef      	b.n	80040a4 <_printf_i+0xbc>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	1d19      	adds	r1, r3, #4
 80040ca:	6029      	str	r1, [r5, #0]
 80040cc:	0601      	lsls	r1, r0, #24
 80040ce:	d501      	bpl.n	80040d4 <_printf_i+0xec>
 80040d0:	681e      	ldr	r6, [r3, #0]
 80040d2:	e002      	b.n	80040da <_printf_i+0xf2>
 80040d4:	0646      	lsls	r6, r0, #25
 80040d6:	d5fb      	bpl.n	80040d0 <_printf_i+0xe8>
 80040d8:	881e      	ldrh	r6, [r3, #0]
 80040da:	4854      	ldr	r0, [pc, #336]	; (800422c <_printf_i+0x244>)
 80040dc:	2f6f      	cmp	r7, #111	; 0x6f
 80040de:	bf0c      	ite	eq
 80040e0:	2308      	moveq	r3, #8
 80040e2:	230a      	movne	r3, #10
 80040e4:	2100      	movs	r1, #0
 80040e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ea:	6865      	ldr	r5, [r4, #4]
 80040ec:	60a5      	str	r5, [r4, #8]
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	bfa2      	ittt	ge
 80040f2:	6821      	ldrge	r1, [r4, #0]
 80040f4:	f021 0104 	bicge.w	r1, r1, #4
 80040f8:	6021      	strge	r1, [r4, #0]
 80040fa:	b90e      	cbnz	r6, 8004100 <_printf_i+0x118>
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	d04d      	beq.n	800419c <_printf_i+0x1b4>
 8004100:	4615      	mov	r5, r2
 8004102:	fbb6 f1f3 	udiv	r1, r6, r3
 8004106:	fb03 6711 	mls	r7, r3, r1, r6
 800410a:	5dc7      	ldrb	r7, [r0, r7]
 800410c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004110:	4637      	mov	r7, r6
 8004112:	42bb      	cmp	r3, r7
 8004114:	460e      	mov	r6, r1
 8004116:	d9f4      	bls.n	8004102 <_printf_i+0x11a>
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10b      	bne.n	8004134 <_printf_i+0x14c>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	07de      	lsls	r6, r3, #31
 8004120:	d508      	bpl.n	8004134 <_printf_i+0x14c>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	6861      	ldr	r1, [r4, #4]
 8004126:	4299      	cmp	r1, r3
 8004128:	bfde      	ittt	le
 800412a:	2330      	movle	r3, #48	; 0x30
 800412c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004130:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004134:	1b52      	subs	r2, r2, r5
 8004136:	6122      	str	r2, [r4, #16]
 8004138:	f8cd a000 	str.w	sl, [sp]
 800413c:	464b      	mov	r3, r9
 800413e:	aa03      	add	r2, sp, #12
 8004140:	4621      	mov	r1, r4
 8004142:	4640      	mov	r0, r8
 8004144:	f7ff fee2 	bl	8003f0c <_printf_common>
 8004148:	3001      	adds	r0, #1
 800414a:	d14c      	bne.n	80041e6 <_printf_i+0x1fe>
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	b004      	add	sp, #16
 8004152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004156:	4835      	ldr	r0, [pc, #212]	; (800422c <_printf_i+0x244>)
 8004158:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800415c:	6829      	ldr	r1, [r5, #0]
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	f851 6b04 	ldr.w	r6, [r1], #4
 8004164:	6029      	str	r1, [r5, #0]
 8004166:	061d      	lsls	r5, r3, #24
 8004168:	d514      	bpl.n	8004194 <_printf_i+0x1ac>
 800416a:	07df      	lsls	r7, r3, #31
 800416c:	bf44      	itt	mi
 800416e:	f043 0320 	orrmi.w	r3, r3, #32
 8004172:	6023      	strmi	r3, [r4, #0]
 8004174:	b91e      	cbnz	r6, 800417e <_printf_i+0x196>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	f023 0320 	bic.w	r3, r3, #32
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	2310      	movs	r3, #16
 8004180:	e7b0      	b.n	80040e4 <_printf_i+0xfc>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	2378      	movs	r3, #120	; 0x78
 800418c:	4828      	ldr	r0, [pc, #160]	; (8004230 <_printf_i+0x248>)
 800418e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004192:	e7e3      	b.n	800415c <_printf_i+0x174>
 8004194:	0659      	lsls	r1, r3, #25
 8004196:	bf48      	it	mi
 8004198:	b2b6      	uxthmi	r6, r6
 800419a:	e7e6      	b.n	800416a <_printf_i+0x182>
 800419c:	4615      	mov	r5, r2
 800419e:	e7bb      	b.n	8004118 <_printf_i+0x130>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	6826      	ldr	r6, [r4, #0]
 80041a4:	6961      	ldr	r1, [r4, #20]
 80041a6:	1d18      	adds	r0, r3, #4
 80041a8:	6028      	str	r0, [r5, #0]
 80041aa:	0635      	lsls	r5, r6, #24
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0x1cc>
 80041b0:	6019      	str	r1, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0x1d2>
 80041b4:	0670      	lsls	r0, r6, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0x1c8>
 80041b8:	8019      	strh	r1, [r3, #0]
 80041ba:	2300      	movs	r3, #0
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	4615      	mov	r5, r2
 80041c0:	e7ba      	b.n	8004138 <_printf_i+0x150>
 80041c2:	682b      	ldr	r3, [r5, #0]
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	602a      	str	r2, [r5, #0]
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	2100      	movs	r1, #0
 80041ce:	4628      	mov	r0, r5
 80041d0:	f7fb fffe 	bl	80001d0 <memchr>
 80041d4:	b108      	cbz	r0, 80041da <_printf_i+0x1f2>
 80041d6:	1b40      	subs	r0, r0, r5
 80041d8:	6060      	str	r0, [r4, #4]
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	2300      	movs	r3, #0
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	e7a8      	b.n	8004138 <_printf_i+0x150>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	462a      	mov	r2, r5
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d0ab      	beq.n	800414c <_printf_i+0x164>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	079b      	lsls	r3, r3, #30
 80041f8:	d413      	bmi.n	8004222 <_printf_i+0x23a>
 80041fa:	68e0      	ldr	r0, [r4, #12]
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	4298      	cmp	r0, r3
 8004200:	bfb8      	it	lt
 8004202:	4618      	movlt	r0, r3
 8004204:	e7a4      	b.n	8004150 <_printf_i+0x168>
 8004206:	2301      	movs	r3, #1
 8004208:	4632      	mov	r2, r6
 800420a:	4649      	mov	r1, r9
 800420c:	4640      	mov	r0, r8
 800420e:	47d0      	blx	sl
 8004210:	3001      	adds	r0, #1
 8004212:	d09b      	beq.n	800414c <_printf_i+0x164>
 8004214:	3501      	adds	r5, #1
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	9903      	ldr	r1, [sp, #12]
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	42ab      	cmp	r3, r5
 800421e:	dcf2      	bgt.n	8004206 <_printf_i+0x21e>
 8004220:	e7eb      	b.n	80041fa <_printf_i+0x212>
 8004222:	2500      	movs	r5, #0
 8004224:	f104 0619 	add.w	r6, r4, #25
 8004228:	e7f5      	b.n	8004216 <_printf_i+0x22e>
 800422a:	bf00      	nop
 800422c:	08004915 	.word	0x08004915
 8004230:	08004926 	.word	0x08004926

08004234 <_sbrk_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d06      	ldr	r5, [pc, #24]	; (8004250 <_sbrk_r+0x1c>)
 8004238:	2300      	movs	r3, #0
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f7fc fd7e 	bl	8000d40 <_sbrk>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_sbrk_r+0x1a>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_sbrk_r+0x1a>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	2000018c 	.word	0x2000018c

08004254 <__sread>:
 8004254:	b510      	push	{r4, lr}
 8004256:	460c      	mov	r4, r1
 8004258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425c:	f000 fab2 	bl	80047c4 <_read_r>
 8004260:	2800      	cmp	r0, #0
 8004262:	bfab      	itete	ge
 8004264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004266:	89a3      	ldrhlt	r3, [r4, #12]
 8004268:	181b      	addge	r3, r3, r0
 800426a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800426e:	bfac      	ite	ge
 8004270:	6563      	strge	r3, [r4, #84]	; 0x54
 8004272:	81a3      	strhlt	r3, [r4, #12]
 8004274:	bd10      	pop	{r4, pc}

08004276 <__swrite>:
 8004276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427a:	461f      	mov	r7, r3
 800427c:	898b      	ldrh	r3, [r1, #12]
 800427e:	05db      	lsls	r3, r3, #23
 8004280:	4605      	mov	r5, r0
 8004282:	460c      	mov	r4, r1
 8004284:	4616      	mov	r6, r2
 8004286:	d505      	bpl.n	8004294 <__swrite+0x1e>
 8004288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428c:	2302      	movs	r3, #2
 800428e:	2200      	movs	r2, #0
 8004290:	f000 f9c8 	bl	8004624 <_lseek_r>
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800429a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	4632      	mov	r2, r6
 80042a2:	463b      	mov	r3, r7
 80042a4:	4628      	mov	r0, r5
 80042a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042aa:	f000 b869 	b.w	8004380 <_write_r>

080042ae <__sseek>:
 80042ae:	b510      	push	{r4, lr}
 80042b0:	460c      	mov	r4, r1
 80042b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b6:	f000 f9b5 	bl	8004624 <_lseek_r>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	bf15      	itete	ne
 80042c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80042c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ca:	81a3      	strheq	r3, [r4, #12]
 80042cc:	bf18      	it	ne
 80042ce:	81a3      	strhne	r3, [r4, #12]
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <__sclose>:
 80042d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d6:	f000 b8d3 	b.w	8004480 <_close_r>
	...

080042dc <__swbuf_r>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	460e      	mov	r6, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	4605      	mov	r5, r0
 80042e4:	b118      	cbz	r0, 80042ee <__swbuf_r+0x12>
 80042e6:	6983      	ldr	r3, [r0, #24]
 80042e8:	b90b      	cbnz	r3, 80042ee <__swbuf_r+0x12>
 80042ea:	f7ff fb81 	bl	80039f0 <__sinit>
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <__swbuf_r+0x98>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d12b      	bne.n	800434c <__swbuf_r+0x70>
 80042f4:	686c      	ldr	r4, [r5, #4]
 80042f6:	69a3      	ldr	r3, [r4, #24]
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	071a      	lsls	r2, r3, #28
 80042fe:	d52f      	bpl.n	8004360 <__swbuf_r+0x84>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	b36b      	cbz	r3, 8004360 <__swbuf_r+0x84>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	1ac0      	subs	r0, r0, r3
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	b2f6      	uxtb	r6, r6
 800430e:	4283      	cmp	r3, r0
 8004310:	4637      	mov	r7, r6
 8004312:	dc04      	bgt.n	800431e <__swbuf_r+0x42>
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f948 	bl	80045ac <_fflush_r>
 800431c:	bb30      	cbnz	r0, 800436c <__swbuf_r+0x90>
 800431e:	68a3      	ldr	r3, [r4, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	60a3      	str	r3, [r4, #8]
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	701e      	strb	r6, [r3, #0]
 800432c:	6963      	ldr	r3, [r4, #20]
 800432e:	3001      	adds	r0, #1
 8004330:	4283      	cmp	r3, r0
 8004332:	d004      	beq.n	800433e <__swbuf_r+0x62>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d506      	bpl.n	8004348 <__swbuf_r+0x6c>
 800433a:	2e0a      	cmp	r6, #10
 800433c:	d104      	bne.n	8004348 <__swbuf_r+0x6c>
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f000 f933 	bl	80045ac <_fflush_r>
 8004346:	b988      	cbnz	r0, 800436c <__swbuf_r+0x90>
 8004348:	4638      	mov	r0, r7
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <__swbuf_r+0x9c>)
 800434e:	429c      	cmp	r4, r3
 8004350:	d101      	bne.n	8004356 <__swbuf_r+0x7a>
 8004352:	68ac      	ldr	r4, [r5, #8]
 8004354:	e7cf      	b.n	80042f6 <__swbuf_r+0x1a>
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <__swbuf_r+0xa0>)
 8004358:	429c      	cmp	r4, r3
 800435a:	bf08      	it	eq
 800435c:	68ec      	ldreq	r4, [r5, #12]
 800435e:	e7ca      	b.n	80042f6 <__swbuf_r+0x1a>
 8004360:	4621      	mov	r1, r4
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f81e 	bl	80043a4 <__swsetup_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0cb      	beq.n	8004304 <__swbuf_r+0x28>
 800436c:	f04f 37ff 	mov.w	r7, #4294967295
 8004370:	e7ea      	b.n	8004348 <__swbuf_r+0x6c>
 8004372:	bf00      	nop
 8004374:	080048c4 	.word	0x080048c4
 8004378:	080048e4 	.word	0x080048e4
 800437c:	080048a4 	.word	0x080048a4

08004380 <_write_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	; (80043a0 <_write_r+0x20>)
 8004384:	4604      	mov	r4, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	2200      	movs	r2, #0
 800438c:	602a      	str	r2, [r5, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc fc85 	bl	8000c9e <_write>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_write_r+0x1e>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_write_r+0x1e>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	2000018c 	.word	0x2000018c

080043a4 <__swsetup_r>:
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <__swsetup_r+0xcc>)
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	4606      	mov	r6, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	b125      	cbz	r5, 80043ba <__swsetup_r+0x16>
 80043b0:	69ab      	ldr	r3, [r5, #24]
 80043b2:	b913      	cbnz	r3, 80043ba <__swsetup_r+0x16>
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff fb1b 	bl	80039f0 <__sinit>
 80043ba:	4b2e      	ldr	r3, [pc, #184]	; (8004474 <__swsetup_r+0xd0>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	d10f      	bne.n	80043e0 <__swsetup_r+0x3c>
 80043c0:	686c      	ldr	r4, [r5, #4]
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c8:	0719      	lsls	r1, r3, #28
 80043ca:	d42c      	bmi.n	8004426 <__swsetup_r+0x82>
 80043cc:	06dd      	lsls	r5, r3, #27
 80043ce:	d411      	bmi.n	80043f4 <__swsetup_r+0x50>
 80043d0:	2309      	movs	r3, #9
 80043d2:	6033      	str	r3, [r6, #0]
 80043d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	e03e      	b.n	800445e <__swsetup_r+0xba>
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <__swsetup_r+0xd4>)
 80043e2:	429c      	cmp	r4, r3
 80043e4:	d101      	bne.n	80043ea <__swsetup_r+0x46>
 80043e6:	68ac      	ldr	r4, [r5, #8]
 80043e8:	e7eb      	b.n	80043c2 <__swsetup_r+0x1e>
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <__swsetup_r+0xd8>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	bf08      	it	eq
 80043f0:	68ec      	ldreq	r4, [r5, #12]
 80043f2:	e7e6      	b.n	80043c2 <__swsetup_r+0x1e>
 80043f4:	0758      	lsls	r0, r3, #29
 80043f6:	d512      	bpl.n	800441e <__swsetup_r+0x7a>
 80043f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043fa:	b141      	cbz	r1, 800440e <__swsetup_r+0x6a>
 80043fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004400:	4299      	cmp	r1, r3
 8004402:	d002      	beq.n	800440a <__swsetup_r+0x66>
 8004404:	4630      	mov	r0, r6
 8004406:	f000 f991 	bl	800472c <_free_r>
 800440a:	2300      	movs	r3, #0
 800440c:	6363      	str	r3, [r4, #52]	; 0x34
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	2300      	movs	r3, #0
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	b94b      	cbnz	r3, 800443e <__swsetup_r+0x9a>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004434:	d003      	beq.n	800443e <__swsetup_r+0x9a>
 8004436:	4621      	mov	r1, r4
 8004438:	4630      	mov	r0, r6
 800443a:	f000 f92b 	bl	8004694 <__smakebuf_r>
 800443e:	89a0      	ldrh	r0, [r4, #12]
 8004440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004444:	f010 0301 	ands.w	r3, r0, #1
 8004448:	d00a      	beq.n	8004460 <__swsetup_r+0xbc>
 800444a:	2300      	movs	r3, #0
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6963      	ldr	r3, [r4, #20]
 8004450:	425b      	negs	r3, r3
 8004452:	61a3      	str	r3, [r4, #24]
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	b943      	cbnz	r3, 800446a <__swsetup_r+0xc6>
 8004458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800445c:	d1ba      	bne.n	80043d4 <__swsetup_r+0x30>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	0781      	lsls	r1, r0, #30
 8004462:	bf58      	it	pl
 8004464:	6963      	ldrpl	r3, [r4, #20]
 8004466:	60a3      	str	r3, [r4, #8]
 8004468:	e7f4      	b.n	8004454 <__swsetup_r+0xb0>
 800446a:	2000      	movs	r0, #0
 800446c:	e7f7      	b.n	800445e <__swsetup_r+0xba>
 800446e:	bf00      	nop
 8004470:	2000000c 	.word	0x2000000c
 8004474:	080048c4 	.word	0x080048c4
 8004478:	080048e4 	.word	0x080048e4
 800447c:	080048a4 	.word	0x080048a4

08004480 <_close_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d06      	ldr	r5, [pc, #24]	; (800449c <_close_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fc fc23 	bl	8000cd6 <_close>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_close_r+0x1a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_close_r+0x1a>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	2000018c 	.word	0x2000018c

080044a0 <__sflush_r>:
 80044a0:	898a      	ldrh	r2, [r1, #12]
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	4605      	mov	r5, r0
 80044a8:	0710      	lsls	r0, r2, #28
 80044aa:	460c      	mov	r4, r1
 80044ac:	d458      	bmi.n	8004560 <__sflush_r+0xc0>
 80044ae:	684b      	ldr	r3, [r1, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dc05      	bgt.n	80044c0 <__sflush_r+0x20>
 80044b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dc02      	bgt.n	80044c0 <__sflush_r+0x20>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	d0f9      	beq.n	80044ba <__sflush_r+0x1a>
 80044c6:	2300      	movs	r3, #0
 80044c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044cc:	682f      	ldr	r7, [r5, #0]
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	d032      	beq.n	8004538 <__sflush_r+0x98>
 80044d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	075a      	lsls	r2, r3, #29
 80044d8:	d505      	bpl.n	80044e6 <__sflush_r+0x46>
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	1ac0      	subs	r0, r0, r3
 80044de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044e0:	b10b      	cbz	r3, 80044e6 <__sflush_r+0x46>
 80044e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044e4:	1ac0      	subs	r0, r0, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	4602      	mov	r2, r0
 80044ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ec:	6a21      	ldr	r1, [r4, #32]
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b0      	blx	r6
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	d106      	bne.n	8004506 <__sflush_r+0x66>
 80044f8:	6829      	ldr	r1, [r5, #0]
 80044fa:	291d      	cmp	r1, #29
 80044fc:	d82c      	bhi.n	8004558 <__sflush_r+0xb8>
 80044fe:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <__sflush_r+0x108>)
 8004500:	40ca      	lsrs	r2, r1
 8004502:	07d6      	lsls	r6, r2, #31
 8004504:	d528      	bpl.n	8004558 <__sflush_r+0xb8>
 8004506:	2200      	movs	r2, #0
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	04d9      	lsls	r1, r3, #19
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	d504      	bpl.n	800451c <__sflush_r+0x7c>
 8004512:	1c42      	adds	r2, r0, #1
 8004514:	d101      	bne.n	800451a <__sflush_r+0x7a>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	b903      	cbnz	r3, 800451c <__sflush_r+0x7c>
 800451a:	6560      	str	r0, [r4, #84]	; 0x54
 800451c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451e:	602f      	str	r7, [r5, #0]
 8004520:	2900      	cmp	r1, #0
 8004522:	d0ca      	beq.n	80044ba <__sflush_r+0x1a>
 8004524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004528:	4299      	cmp	r1, r3
 800452a:	d002      	beq.n	8004532 <__sflush_r+0x92>
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f8fd 	bl	800472c <_free_r>
 8004532:	2000      	movs	r0, #0
 8004534:	6360      	str	r0, [r4, #52]	; 0x34
 8004536:	e7c1      	b.n	80044bc <__sflush_r+0x1c>
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	2301      	movs	r3, #1
 800453c:	4628      	mov	r0, r5
 800453e:	47b0      	blx	r6
 8004540:	1c41      	adds	r1, r0, #1
 8004542:	d1c7      	bne.n	80044d4 <__sflush_r+0x34>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0c4      	beq.n	80044d4 <__sflush_r+0x34>
 800454a:	2b1d      	cmp	r3, #29
 800454c:	d001      	beq.n	8004552 <__sflush_r+0xb2>
 800454e:	2b16      	cmp	r3, #22
 8004550:	d101      	bne.n	8004556 <__sflush_r+0xb6>
 8004552:	602f      	str	r7, [r5, #0]
 8004554:	e7b1      	b.n	80044ba <__sflush_r+0x1a>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	e7ad      	b.n	80044bc <__sflush_r+0x1c>
 8004560:	690f      	ldr	r7, [r1, #16]
 8004562:	2f00      	cmp	r7, #0
 8004564:	d0a9      	beq.n	80044ba <__sflush_r+0x1a>
 8004566:	0793      	lsls	r3, r2, #30
 8004568:	680e      	ldr	r6, [r1, #0]
 800456a:	bf08      	it	eq
 800456c:	694b      	ldreq	r3, [r1, #20]
 800456e:	600f      	str	r7, [r1, #0]
 8004570:	bf18      	it	ne
 8004572:	2300      	movne	r3, #0
 8004574:	eba6 0807 	sub.w	r8, r6, r7
 8004578:	608b      	str	r3, [r1, #8]
 800457a:	f1b8 0f00 	cmp.w	r8, #0
 800457e:	dd9c      	ble.n	80044ba <__sflush_r+0x1a>
 8004580:	6a21      	ldr	r1, [r4, #32]
 8004582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004584:	4643      	mov	r3, r8
 8004586:	463a      	mov	r2, r7
 8004588:	4628      	mov	r0, r5
 800458a:	47b0      	blx	r6
 800458c:	2800      	cmp	r0, #0
 800458e:	dc06      	bgt.n	800459e <__sflush_r+0xfe>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	e78e      	b.n	80044bc <__sflush_r+0x1c>
 800459e:	4407      	add	r7, r0
 80045a0:	eba8 0800 	sub.w	r8, r8, r0
 80045a4:	e7e9      	b.n	800457a <__sflush_r+0xda>
 80045a6:	bf00      	nop
 80045a8:	20400001 	.word	0x20400001

080045ac <_fflush_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	690b      	ldr	r3, [r1, #16]
 80045b0:	4605      	mov	r5, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	b913      	cbnz	r3, 80045bc <_fflush_r+0x10>
 80045b6:	2500      	movs	r5, #0
 80045b8:	4628      	mov	r0, r5
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	b118      	cbz	r0, 80045c6 <_fflush_r+0x1a>
 80045be:	6983      	ldr	r3, [r0, #24]
 80045c0:	b90b      	cbnz	r3, 80045c6 <_fflush_r+0x1a>
 80045c2:	f7ff fa15 	bl	80039f0 <__sinit>
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <_fflush_r+0x6c>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d11b      	bne.n	8004604 <_fflush_r+0x58>
 80045cc:	686c      	ldr	r4, [r5, #4]
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <_fflush_r+0xa>
 80045d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045d8:	07d0      	lsls	r0, r2, #31
 80045da:	d404      	bmi.n	80045e6 <_fflush_r+0x3a>
 80045dc:	0599      	lsls	r1, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_fflush_r+0x3a>
 80045e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e2:	f7ff faa3 	bl	8003b2c <__retarget_lock_acquire_recursive>
 80045e6:	4628      	mov	r0, r5
 80045e8:	4621      	mov	r1, r4
 80045ea:	f7ff ff59 	bl	80044a0 <__sflush_r>
 80045ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f0:	07da      	lsls	r2, r3, #31
 80045f2:	4605      	mov	r5, r0
 80045f4:	d4e0      	bmi.n	80045b8 <_fflush_r+0xc>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	059b      	lsls	r3, r3, #22
 80045fa:	d4dd      	bmi.n	80045b8 <_fflush_r+0xc>
 80045fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045fe:	f7ff fa96 	bl	8003b2e <__retarget_lock_release_recursive>
 8004602:	e7d9      	b.n	80045b8 <_fflush_r+0xc>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <_fflush_r+0x70>)
 8004606:	429c      	cmp	r4, r3
 8004608:	d101      	bne.n	800460e <_fflush_r+0x62>
 800460a:	68ac      	ldr	r4, [r5, #8]
 800460c:	e7df      	b.n	80045ce <_fflush_r+0x22>
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <_fflush_r+0x74>)
 8004610:	429c      	cmp	r4, r3
 8004612:	bf08      	it	eq
 8004614:	68ec      	ldreq	r4, [r5, #12]
 8004616:	e7da      	b.n	80045ce <_fflush_r+0x22>
 8004618:	080048c4 	.word	0x080048c4
 800461c:	080048e4 	.word	0x080048e4
 8004620:	080048a4 	.word	0x080048a4

08004624 <_lseek_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d07      	ldr	r5, [pc, #28]	; (8004644 <_lseek_r+0x20>)
 8004628:	4604      	mov	r4, r0
 800462a:	4608      	mov	r0, r1
 800462c:	4611      	mov	r1, r2
 800462e:	2200      	movs	r2, #0
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f7fc fb76 	bl	8000d24 <_lseek>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_lseek_r+0x1e>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_lseek_r+0x1e>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	2000018c 	.word	0x2000018c

08004648 <__swhatbuf_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	460e      	mov	r6, r1
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	2900      	cmp	r1, #0
 8004652:	b096      	sub	sp, #88	; 0x58
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	da08      	bge.n	800466c <__swhatbuf_r+0x24>
 800465a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	061a      	lsls	r2, r3, #24
 8004664:	d410      	bmi.n	8004688 <__swhatbuf_r+0x40>
 8004666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466a:	e00e      	b.n	800468a <__swhatbuf_r+0x42>
 800466c:	466a      	mov	r2, sp
 800466e:	f000 f8bb 	bl	80047e8 <_fstat_r>
 8004672:	2800      	cmp	r0, #0
 8004674:	dbf1      	blt.n	800465a <__swhatbuf_r+0x12>
 8004676:	9a01      	ldr	r2, [sp, #4]
 8004678:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800467c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004680:	425a      	negs	r2, r3
 8004682:	415a      	adcs	r2, r3
 8004684:	602a      	str	r2, [r5, #0]
 8004686:	e7ee      	b.n	8004666 <__swhatbuf_r+0x1e>
 8004688:	2340      	movs	r3, #64	; 0x40
 800468a:	2000      	movs	r0, #0
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	b016      	add	sp, #88	; 0x58
 8004690:	bd70      	pop	{r4, r5, r6, pc}
	...

08004694 <__smakebuf_r>:
 8004694:	898b      	ldrh	r3, [r1, #12]
 8004696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004698:	079d      	lsls	r5, r3, #30
 800469a:	4606      	mov	r6, r0
 800469c:	460c      	mov	r4, r1
 800469e:	d507      	bpl.n	80046b0 <__smakebuf_r+0x1c>
 80046a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	2301      	movs	r3, #1
 80046aa:	6163      	str	r3, [r4, #20]
 80046ac:	b002      	add	sp, #8
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	ab01      	add	r3, sp, #4
 80046b2:	466a      	mov	r2, sp
 80046b4:	f7ff ffc8 	bl	8004648 <__swhatbuf_r>
 80046b8:	9900      	ldr	r1, [sp, #0]
 80046ba:	4605      	mov	r5, r0
 80046bc:	4630      	mov	r0, r6
 80046be:	f7ff fa57 	bl	8003b70 <_malloc_r>
 80046c2:	b948      	cbnz	r0, 80046d8 <__smakebuf_r+0x44>
 80046c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c8:	059a      	lsls	r2, r3, #22
 80046ca:	d4ef      	bmi.n	80046ac <__smakebuf_r+0x18>
 80046cc:	f023 0303 	bic.w	r3, r3, #3
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e7e3      	b.n	80046a0 <__smakebuf_r+0xc>
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <__smakebuf_r+0x7c>)
 80046da:	62b3      	str	r3, [r6, #40]	; 0x28
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	6020      	str	r0, [r4, #0]
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	81a3      	strh	r3, [r4, #12]
 80046e6:	9b00      	ldr	r3, [sp, #0]
 80046e8:	6163      	str	r3, [r4, #20]
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	6120      	str	r0, [r4, #16]
 80046ee:	b15b      	cbz	r3, 8004708 <__smakebuf_r+0x74>
 80046f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 f889 	bl	800480c <_isatty_r>
 80046fa:	b128      	cbz	r0, 8004708 <__smakebuf_r+0x74>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	89a0      	ldrh	r0, [r4, #12]
 800470a:	4305      	orrs	r5, r0
 800470c:	81a5      	strh	r5, [r4, #12]
 800470e:	e7cd      	b.n	80046ac <__smakebuf_r+0x18>
 8004710:	08003989 	.word	0x08003989

08004714 <__malloc_lock>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__malloc_lock+0x8>)
 8004716:	f7ff ba09 	b.w	8003b2c <__retarget_lock_acquire_recursive>
 800471a:	bf00      	nop
 800471c:	20000180 	.word	0x20000180

08004720 <__malloc_unlock>:
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <__malloc_unlock+0x8>)
 8004722:	f7ff ba04 	b.w	8003b2e <__retarget_lock_release_recursive>
 8004726:	bf00      	nop
 8004728:	20000180 	.word	0x20000180

0800472c <_free_r>:
 800472c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800472e:	2900      	cmp	r1, #0
 8004730:	d044      	beq.n	80047bc <_free_r+0x90>
 8004732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004736:	9001      	str	r0, [sp, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f1a1 0404 	sub.w	r4, r1, #4
 800473e:	bfb8      	it	lt
 8004740:	18e4      	addlt	r4, r4, r3
 8004742:	f7ff ffe7 	bl	8004714 <__malloc_lock>
 8004746:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <_free_r+0x94>)
 8004748:	9801      	ldr	r0, [sp, #4]
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	b933      	cbnz	r3, 800475c <_free_r+0x30>
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	6014      	str	r4, [r2, #0]
 8004752:	b003      	add	sp, #12
 8004754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004758:	f7ff bfe2 	b.w	8004720 <__malloc_unlock>
 800475c:	42a3      	cmp	r3, r4
 800475e:	d908      	bls.n	8004772 <_free_r+0x46>
 8004760:	6825      	ldr	r5, [r4, #0]
 8004762:	1961      	adds	r1, r4, r5
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1949      	addeq	r1, r1, r5
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	e7ed      	b.n	800474e <_free_r+0x22>
 8004772:	461a      	mov	r2, r3
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b10b      	cbz	r3, 800477c <_free_r+0x50>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x46>
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	1855      	adds	r5, r2, r1
 8004780:	42a5      	cmp	r5, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x70>
 8004784:	6824      	ldr	r4, [r4, #0]
 8004786:	4421      	add	r1, r4
 8004788:	1854      	adds	r4, r2, r1
 800478a:	42a3      	cmp	r3, r4
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	d1e0      	bne.n	8004752 <_free_r+0x26>
 8004790:	681c      	ldr	r4, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	6053      	str	r3, [r2, #4]
 8004796:	4421      	add	r1, r4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	e7da      	b.n	8004752 <_free_r+0x26>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x78>
 800479e:	230c      	movs	r3, #12
 80047a0:	6003      	str	r3, [r0, #0]
 80047a2:	e7d6      	b.n	8004752 <_free_r+0x26>
 80047a4:	6825      	ldr	r5, [r4, #0]
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf04      	itt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	bf04      	itt	eq
 80047b4:	1949      	addeq	r1, r1, r5
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	6054      	str	r4, [r2, #4]
 80047ba:	e7ca      	b.n	8004752 <_free_r+0x26>
 80047bc:	b003      	add	sp, #12
 80047be:	bd30      	pop	{r4, r5, pc}
 80047c0:	20000184 	.word	0x20000184

080047c4 <_read_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_read_r+0x20>)
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	2200      	movs	r2, #0
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7fc fa46 	bl	8000c64 <_read>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_read_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_read_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	2000018c 	.word	0x2000018c

080047e8 <_fstat_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	; (8004808 <_fstat_r+0x20>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	4611      	mov	r1, r2
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	f7fc fa7a 	bl	8000cee <_fstat>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	d102      	bne.n	8004804 <_fstat_r+0x1c>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	b103      	cbz	r3, 8004804 <_fstat_r+0x1c>
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	bf00      	nop
 8004808:	2000018c 	.word	0x2000018c

0800480c <_isatty_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d06      	ldr	r5, [pc, #24]	; (8004828 <_isatty_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fc fa79 	bl	8000d0e <_isatty>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_isatty_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_isatty_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	2000018c 	.word	0x2000018c

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr
