
digitalclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004690  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004914  08004914  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800491c  0800491c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08004994  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004994  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203f  00000000  00000000  00030a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000339d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023294  00000000  00000000  00034828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001086c  00000000  00000000  00057abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6950  00000000  00000000  00068328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ec78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  0013ecc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004808 	.word	0x08004808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004808 	.word	0x08004808

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <AdjustHour>:
  adjustmentMode = true;
  adjustmentStart = milliseconds;
}


void AdjustHour(void) {
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  if (hours >= 0 && GPIOC->IDR & GPIO_IDR_ID1) {
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <AdjustHour+0x84>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <AdjustHour+0x88>)
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	f003 0302 	and.w	r3, r3, #2
 8000584:	2b00      	cmp	r3, #0
 8000586:	d005      	beq.n	8000594 <AdjustHour+0x20>
    hours++;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <AdjustHour+0x84>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <AdjustHour+0x84>)
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e02b      	b.n	80005ec <AdjustHour+0x78>
  } else if (hours > 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <AdjustHour+0x84>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <AdjustHour+0x40>
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <AdjustHour+0x88>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d005      	beq.n	80005b4 <AdjustHour+0x40>
    hours--;
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <AdjustHour+0x84>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <AdjustHour+0x84>)
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	e01b      	b.n	80005ec <AdjustHour+0x78>
  }
    else if (hours > 23 && GPIOC->IDR & GPIO_IDR_ID1) {
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <AdjustHour+0x84>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b17      	cmp	r3, #23
 80005ba:	d909      	bls.n	80005d0 <AdjustHour+0x5c>
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <AdjustHour+0x88>)
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d003      	beq.n	80005d0 <AdjustHour+0x5c>
      hours = 0;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <AdjustHour+0x84>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	e00d      	b.n	80005ec <AdjustHour+0x78>
    }
    else if (hours == 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <AdjustHour+0x84>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d109      	bne.n	80005ec <AdjustHour+0x78>
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <AdjustHour+0x88>)
 80005da:	691b      	ldr	r3, [r3, #16]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <AdjustHour+0x78>
    	hours = 23;
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <AdjustHour+0x84>)
 80005e6:	2217      	movs	r2, #23
 80005e8:	601a      	str	r2, [r3, #0]
    }
}
 80005ea:	e7ff      	b.n	80005ec <AdjustHour+0x78>
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000168 	.word	0x20000168
 80005fc:	48000800 	.word	0x48000800

08000600 <AdjustMinute>:

void AdjustMinute(void) {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  if (minutes >= 0 && GPIOC->IDR & GPIO_IDR_ID1) {
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <AdjustMinute+0x84>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <AdjustMinute+0x88>)
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <AdjustMinute+0x20>
    minutes++;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <AdjustMinute+0x84>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <AdjustMinute+0x84>)
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e02b      	b.n	8000678 <AdjustMinute+0x78>
  } else if (minutes > 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <AdjustMinute+0x84>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00b      	beq.n	8000640 <AdjustMinute+0x40>
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <AdjustMinute+0x88>)
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	2b00      	cmp	r3, #0
 8000632:	d005      	beq.n	8000640 <AdjustMinute+0x40>
	  minutes--;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <AdjustMinute+0x84>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <AdjustMinute+0x84>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e01b      	b.n	8000678 <AdjustMinute+0x78>
  }
    else if (minutes == 59 && GPIOC->IDR & GPIO_IDR_ID1) {
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <AdjustMinute+0x84>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b3b      	cmp	r3, #59	; 0x3b
 8000646:	d109      	bne.n	800065c <AdjustMinute+0x5c>
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <AdjustMinute+0x88>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <AdjustMinute+0x5c>
      minutes = 0;
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <AdjustMinute+0x84>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	e00d      	b.n	8000678 <AdjustMinute+0x78>
    }
    else if (minutes == 0 && GPIOC->IDR & GPIO_IDR_ID2) {
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <AdjustMinute+0x84>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d109      	bne.n	8000678 <AdjustMinute+0x78>
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <AdjustMinute+0x88>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <AdjustMinute+0x78>
      minutes = 59;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <AdjustMinute+0x84>)
 8000672:	223b      	movs	r2, #59	; 0x3b
 8000674:	601a      	str	r2, [r3, #0]
    }
  }
 8000676:	e7ff      	b.n	8000678 <AdjustMinute+0x78>
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000164 	.word	0x20000164
 8000688:	48000800 	.word	0x48000800

0800068c <printClockValue>:
            }
        }
    }
}

void printClockValue(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    printf("%02lu:%02lu:%02lu\n", hours, minutes, seconds);
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <printClockValue+0x1c>)
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <printClockValue+0x20>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <printClockValue+0x24>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <printClockValue+0x28>)
 800069e:	f003 f925 	bl	80038ec <iprintf>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000168 	.word	0x20000168
 80006ac:	20000164 	.word	0x20000164
 80006b0:	20000160 	.word	0x20000160
 80006b4:	08004820 	.word	0x08004820

080006b8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    if (EXTI->PR1 & EXTI_PR1_PIF0) {
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <EXTI0_IRQHandler+0xa8>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d049      	beq.n	800075c <EXTI0_IRQHandler+0xa4>
        EXTI->PR1 = EXTI_PR1_PIF0;
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <EXTI0_IRQHandler+0xa8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	615a      	str	r2, [r3, #20]

        // Button pressed, increase the press count and record start time if it's the first press
        if (GPIOC->IDR & GPIO_IDR_ID0) {
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <EXTI0_IRQHandler+0xac>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d040      	beq.n	800075c <EXTI0_IRQHandler+0xa4>
            buttonPressCount++;
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 80006e2:	6013      	str	r3, [r2, #0]
            if (buttonPressCount == 1) {
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d103      	bne.n	80006f4 <EXTI0_IRQHandler+0x3c>
                buttonPressStart = milliseconds;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <EXTI0_IRQHandler+0xb4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <EXTI0_IRQHandler+0xb8>)
 80006f2:	6013      	str	r3, [r2, #0]
            }

            // Button released, handle different cases based on press count and adjustment mode
            if (buttonPressCount == 1 && !adjustmentMode) {
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d10e      	bne.n	800071a <EXTI0_IRQHandler+0x62>
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <EXTI0_IRQHandler+0xbc>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f083 0301 	eor.w	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <EXTI0_IRQHandler+0x62>
                // Pressed once, start adjustment mode for hour
                AdjustHour();
 800070a:	f7ff ff33 	bl	8000574 <AdjustHour>
                buttonPressCount++;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e020      	b.n	800075c <EXTI0_IRQHandler+0xa4>
            }  else if (buttonPressCount == 2 && adjustmentMode) {
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d10b      	bne.n	800073a <EXTI0_IRQHandler+0x82>
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <EXTI0_IRQHandler+0xbc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d007      	beq.n	800073a <EXTI0_IRQHandler+0x82>
                // Pressed twice, start adjustment mode for minute
                AdjustMinute();
 800072a:	f7ff ff69 	bl	8000600 <AdjustMinute>
                buttonPressCount++;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	e010      	b.n	800075c <EXTI0_IRQHandler+0xa4>
            }  else if (buttonPressCount == 3 && adjustmentMode) {
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d10c      	bne.n	800075c <EXTI0_IRQHandler+0xa4>
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <EXTI0_IRQHandler+0xbc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <EXTI0_IRQHandler+0xa4>
                // Pressed once, exit adjustment mode and print adjusted clock
            	printClockValue();
 800074a:	f7ff ff9f 	bl	800068c <printClockValue>
            	buttonPressStart = 0;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <EXTI0_IRQHandler+0xb8>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
                buttonPressCount = 0;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <EXTI0_IRQHandler+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]

            }
        }
    }
}
 800075a:	e7ff      	b.n	800075c <EXTI0_IRQHandler+0xa4>
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010400 	.word	0x40010400
 8000764:	48000800 	.word	0x48000800
 8000768:	20000170 	.word	0x20000170
 800076c:	2000015c 	.word	0x2000015c
 8000770:	20000174 	.word	0x20000174
 8000774:	2000016c 	.word	0x2000016c

08000778 <main>:
    NVIC_EnableIRQ(EXTI1_IRQn);
    NVIC_EnableIRQ(EXTI2_IRQn);
  }

int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  HAL_Init();
 800077c:	f000 fb1c 	bl	8000db8 <HAL_Init>
  SystemClock_Config();
 8000780:	f000 f80c 	bl	800079c <SystemClock_Config>
  MX_USART2_UART_Init();
 8000784:	f000 f89e 	bl	80008c4 <MX_USART2_UART_Init>
  MX_GPIO_Init();
 8000788:	f000 f8cc 	bl	8000924 <MX_GPIO_Init>
  MX_TIM2_Init();
 800078c:	f000 f84c 	bl	8000828 <MX_TIM2_Init>

  while (1)
  {
	  HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f000 fb8d 	bl	8000eb0 <HAL_Delay>
	  printClockValue();
 8000796:	f7ff ff79 	bl	800068c <printClockValue>
	  HAL_Delay(100);
 800079a:	e7f9      	b.n	8000790 <main+0x18>

0800079c <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	; 0x58
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2244      	movs	r2, #68	; 0x44
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 f896 	bl	80038dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c2:	f000 fe4b 	bl	800145c <HAL_PWREx_ControlVoltageScaling>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007cc:	f000 f934 	bl	8000a38 <Error_Handler>
  }


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2310      	movs	r3, #16
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007de:	2300      	movs	r3, #0
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fe8e 	bl	8001508 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80007f2:	f000 f921 	bl	8000a38 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fa:	2301      	movs	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fa8e 	bl	8001d30 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800081a:	f000 f90d 	bl	8000a38 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3758      	adds	r7, #88	; 0x58
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0



  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]


  htim2.Instance = TIM2;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_TIM2_Init+0x98>)
 800085c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000870:	f001 ffbe 	bl	80027f0 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800087a:	f000 f8dd 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM2_Init+0x98>)
 800088c:	f002 f926 	bl	8002adc <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000896:	f000 f8cf 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM2_Init+0x98>)
 80008a8:	f002 fb12 	bl	8002ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f000 f8c1 	bl	8000a38 <Error_Handler>
  }


}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000008c 	.word	0x2000008c

080008c4 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_USART2_UART_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x58>)
 8000908:	f002 fb66 	bl	8002fd8 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f891 	bl	8000a38 <Error_Handler>
  }


}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000d8 	.word	0x200000d8
 8000920:	40004400 	.word	0x40004400

08000924 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x108>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a35      	ldr	r2, [pc, #212]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_GPIO_Init+0x108>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <MX_GPIO_Init+0x108>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	21b0      	movs	r1, #176	; 0xb0
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fd35 	bl	8001410 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	4820      	ldr	r0, [pc, #128]	; (8000a30 <MX_GPIO_Init+0x10c>)
 80009ae:	f000 fd2f 	bl	8001410 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = B1_Pin|SET_Pin|INCREASE_Pin|DECREASE_Pin;
 80009b2:	f242 0307 	movw	r3, #8199	; 0x2007
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MX_GPIO_Init+0x110>)
 80009ca:	f000 fba7 	bl	800111c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80009ce:	23b0      	movs	r3, #176	; 0xb0
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fb98 	bl	800111c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 fb8b 	bl	800111c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD4_Pin;
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0x10c>)
 8000a20:	f000 fb7c 	bl	800111c <HAL_GPIO_Init>
 }
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400
 8000a34:	48000800 	.word	0x48000800

08000a38 <Error_Handler>:


void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop

  __disable_irq();


}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa4:	d113      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_TIM_Base_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_TIM_Base_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_TIM_Base_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	201c      	movs	r0, #28
 8000ac4:	f000 faf3 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac8:	201c      	movs	r0, #28
 8000aca:	f000 fb0c 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0a2      	sub	sp, #136	; 0x88
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2260      	movs	r2, #96	; 0x60
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 feed 	bl	80038dc <memset>
  if(huart->Instance==USART2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <HAL_UART_MspInit+0xac>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d138      	bne.n	8000b7e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fb2d 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b24:	f7ff ff88 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6593      	str	r3, [r2, #88]	; 0x58
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 facf 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3788      	adds	r7, #136	; 0x88
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f948 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM2_IRQHandler+0x10>)
 8000bea:	f001 fe58 	bl	800289e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000008c 	.word	0x2000008c

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
  }
  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f002 fdc0 	bl	8003888 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20010000 	.word	0x20010000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000178 	.word	0x20000178
 8000d3c:	20000190 	.word	0x20000190

08000d40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fd7f 	bl	8003894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fcef 	bl	8000778 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da8:	08004924 	.word	0x08004924
  ldr r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db0:	20000190 	.word	0x20000190

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_Init+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_Init+0x3c>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f962 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f80f 	bl	8000df8 <HAL_InitTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	e001      	b.n	8000dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de6:	f7ff fe31 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_InitTick+0x6c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d023      	beq.n	8000e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_InitTick+0x70>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_InitTick+0x6c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f96d 	bl	8001102 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10f      	bne.n	8000e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d809      	bhi.n	8000e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f937 	bl	80010ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_InitTick+0x74>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e004      	b.n	8000e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e001      	b.n	8000e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	2000017c 	.word	0x2000017c

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000017c 	.word	0x2000017c

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	e154      	b.n	80013d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2101      	movs	r1, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8146 	beq.w	80013d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d005      	beq.n	800115c <HAL_GPIO_Init+0x40>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d130      	bne.n	80011be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001192:	2201      	movs	r2, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	f003 0201 	and.w	r2, r3, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d017      	beq.n	80011fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d123      	bne.n	800124e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	6939      	ldr	r1, [r7, #16]
 800124a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0203 	and.w	r2, r3, #3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80a0 	beq.w	80013d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_GPIO_Init+0x2d8>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_GPIO_Init+0x2d8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6613      	str	r3, [r2, #96]	; 0x60
 800129c:	4b55      	ldr	r3, [pc, #340]	; (80013f4 <HAL_GPIO_Init+0x2d8>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a8:	4a53      	ldr	r2, [pc, #332]	; (80013f8 <HAL_GPIO_Init+0x2dc>)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012d2:	d019      	beq.n	8001308 <HAL_GPIO_Init+0x1ec>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a49      	ldr	r2, [pc, #292]	; (80013fc <HAL_GPIO_Init+0x2e0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d013      	beq.n	8001304 <HAL_GPIO_Init+0x1e8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a48      	ldr	r2, [pc, #288]	; (8001400 <HAL_GPIO_Init+0x2e4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1e4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1e0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a46      	ldr	r2, [pc, #280]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1dc>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x1ee>
 80012f8:	2307      	movs	r3, #7
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x1ee>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x1ee>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x1ee>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x1ee>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131a:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x2dc>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_GPIO_Init+0x2f0>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_GPIO_Init+0x2f0>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_GPIO_Init+0x2f0>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_GPIO_Init+0x2f0>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_GPIO_Init+0x2f0>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a0:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_GPIO_Init+0x2f0>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_GPIO_Init+0x2f0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_GPIO_Init+0x2f0>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f aea3 	bne.w	800112c <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800142c:	e002      	b.n	8001434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_PWREx_GetVoltageRange+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40007000 	.word	0x40007000

0800145c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146a:	d130      	bne.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001478:	d038      	beq.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2232      	movs	r2, #50	; 0x32
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	0c9b      	lsrs	r3, r3, #18
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a0:	e002      	b.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b4:	d102      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f2      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c8:	d110      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e00f      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014da:	d007      	beq.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e4:	4a05      	ldr	r2, [pc, #20]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40007000 	.word	0x40007000
 8001500:	20000000 	.word	0x20000000
 8001504:	431bde83 	.word	0x431bde83

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	f000 bc02 	b.w	8001d20 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151c:	4b96      	ldr	r3, [pc, #600]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001526:	4b94      	ldr	r3, [pc, #592]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80e4 	beq.w	8001706 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_RCC_OscConfig+0x4c>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	f040 808b 	bne.w	8001662 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b01      	cmp	r3, #1
 8001550:	f040 8087 	bne.w	8001662 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001554:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x64>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e3d9      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <HAL_RCC_OscConfig+0x7e>
 800157c:	4b7e      	ldr	r3, [pc, #504]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001584:	e005      	b.n	8001592 <HAL_RCC_OscConfig+0x8a>
 8001586:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001592:	4293      	cmp	r3, r2
 8001594:	d223      	bcs.n	80015de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fd8c 	bl	80020b8 <RCC_SetFlashLatencyFromMSIRange>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e3ba      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a72      	ldr	r2, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	496d      	ldr	r1, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	4968      	ldr	r1, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e025      	b.n	800162a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015de:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4960      	ldr	r1, [pc, #384]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fc:	4b5e      	ldr	r3, [pc, #376]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	495b      	ldr	r1, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fd4c 	bl	80020b8 <RCC_SetFlashLatencyFromMSIRange>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e37a      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800162a:	f000 fc81 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 800162e:	4602      	mov	r2, r0
 8001630:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	4950      	ldr	r1, [pc, #320]	; (800177c <HAL_RCC_OscConfig+0x274>)
 800163c:	5ccb      	ldrb	r3, [r1, r3]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	4a4e      	ldr	r2, [pc, #312]	; (8001780 <HAL_RCC_OscConfig+0x278>)
 8001648:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800164a:	4b4e      	ldr	r3, [pc, #312]	; (8001784 <HAL_RCC_OscConfig+0x27c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fbd2 	bl	8000df8 <HAL_InitTick>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d052      	beq.n	8001704 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	e35e      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d032      	beq.n	80016d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a42      	ldr	r2, [pc, #264]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001676:	f7ff fc0f 	bl	8000e98 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167e:	f7ff fc0b 	bl	8000e98 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e347      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001690:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a35      	ldr	r2, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4930      	ldr	r1, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	492b      	ldr	r1, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
 80016ce:	e01a      	b.n	8001706 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fbdc 	bl	8000e98 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e4:	f7ff fbd8 	bl	8000e98 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e314      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1dc>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d073      	beq.n	80017fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d005      	beq.n	8001724 <HAL_RCC_OscConfig+0x21c>
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d10e      	bne.n	800173c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d10b      	bne.n	800173c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d063      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d15f      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e2f1      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001744:	d106      	bne.n	8001754 <HAL_RCC_OscConfig+0x24c>
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e025      	b.n	80017a0 <HAL_RCC_OscConfig+0x298>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175c:	d114      	bne.n	8001788 <HAL_RCC_OscConfig+0x280>
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a02      	ldr	r2, [pc, #8]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e013      	b.n	80017a0 <HAL_RCC_OscConfig+0x298>
 8001778:	40021000 	.word	0x40021000
 800177c:	08004834 	.word	0x08004834
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004
 8001788:	4ba0      	ldr	r3, [pc, #640]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a9f      	ldr	r2, [pc, #636]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b9d      	ldr	r3, [pc, #628]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a9c      	ldr	r2, [pc, #624]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb76 	bl	8000e98 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fb72 	bl	8000e98 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2ae      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c2:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2a8>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb62 	bl	8000e98 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fb5e 	bl	8000e98 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e29a      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ea:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2d0>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d060      	beq.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x310>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d119      	bne.n	8001846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d116      	bne.n	8001846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x328>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e277      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4973      	ldr	r1, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	e040      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d023      	beq.n	8001896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fb1d 	bl	8000e98 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fb19 	bl	8000e98 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e255      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001874:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	495f      	ldr	r1, [pc, #380]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e018      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800189c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff faf9 	bl	8000e98 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff faf5 	bl	8000e98 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e231      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d03c      	beq.n	800194e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01c      	beq.n	8001916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fad4 	bl	8000e98 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f4:	f7ff fad0 	bl	8000e98 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e20c      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCC_OscConfig+0x3ec>
 8001914:	e01b      	b.n	800194e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff fab7 	bl	8000e98 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fab3 	bl	8000e98 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1ef      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ef      	bne.n	800192e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80a6 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10d      	bne.n	8001988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	6593      	str	r3, [r2, #88]	; 0x58
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001984:	2301      	movs	r3, #1
 8001986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_RCC_OscConfig+0x508>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d118      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCC_OscConfig+0x508>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_RCC_OscConfig+0x508>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa7a 	bl	8000e98 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7ff fa76 	bl	8000e98 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1b2      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_RCC_OscConfig+0x508>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4d8>
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019de:	e029      	b.n	8001a34 <HAL_RCC_OscConfig+0x52c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d115      	bne.n	8001a14 <HAL_RCC_OscConfig+0x50c>
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a08:	e014      	b.n	8001a34 <HAL_RCC_OscConfig+0x52c>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
 8001a14:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	4a99      	ldr	r2, [pc, #612]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a24:	4b96      	ldr	r3, [pc, #600]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a95      	ldr	r2, [pc, #596]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d016      	beq.n	8001a6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fa2c 	bl	8000e98 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff fa28 	bl	8000e98 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e162      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ed      	beq.n	8001a44 <HAL_RCC_OscConfig+0x53c>
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fa15 	bl	8000e98 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff fa11 	bl	8000e98 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e14b      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a88:	4b7d      	ldr	r3, [pc, #500]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ed      	bne.n	8001a72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9c:	4b78      	ldr	r3, [pc, #480]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	4a77      	ldr	r2, [pc, #476]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d03c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001abc:	4b70      	ldr	r3, [pc, #448]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac2:	4a6f      	ldr	r2, [pc, #444]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f9e4 	bl	8000e98 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad4:	f7ff f9e0 	bl	8000e98 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e11c      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ae6:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ef      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x5cc>
 8001af4:	e01b      	b.n	8001b2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001af6:	4b62      	ldr	r3, [pc, #392]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afc:	4a60      	ldr	r2, [pc, #384]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff f9c7 	bl	8000e98 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0e:	f7ff f9c3 	bl	8000e98 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0ff      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b20:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ef      	bne.n	8001b0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80f3 	beq.w	8001d1e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	f040 80c9 	bne.w	8001cd4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b42:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 0203 	and.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d12c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	3b01      	subs	r3, #1
 8001b62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d123      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d11b      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d113      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d109      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d06b      	beq.n	8001c88 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d062      	beq.n	8001c7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0ac      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd2:	f7ff f961 	bl	8000e98 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f95d 	bl	8000e98 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e099      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_RCC_OscConfig+0x77c>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c12:	0212      	lsls	r2, r2, #8
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c1a:	0852      	lsrs	r2, r2, #1
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	0552      	lsls	r2, r2, #21
 8001c20:	4311      	orrs	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c26:	0852      	lsrs	r2, r2, #1
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	0652      	lsls	r2, r2, #25
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c32:	06d2      	lsls	r2, r2, #27
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4912      	ldr	r1, [pc, #72]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c54:	f7ff f920 	bl	8000e98 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f91c 	bl	8000e98 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e058      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <HAL_RCC_OscConfig+0x778>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7a:	e050      	b.n	8001d1e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e04f      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
 8001c80:	40021000 	.word	0x40021000
 8001c84:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d144      	bne.n	8001d1e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a20      	ldr	r2, [pc, #128]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001caa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cac:	f7ff f8f4 	bl	8000e98 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f8f0 	bl	8000e98 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e02c      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x7ac>
 8001cd2:	e024      	b.n	8001d1e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d01f      	beq.n	8001d1a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f8d7 	bl	8000e98 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff f8d3 	bl	8000e98 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e00f      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4905      	ldr	r1, [pc, #20]	; (8001d28 <HAL_RCC_OscConfig+0x820>)
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x824>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e001      	b.n	8001d1e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	feeefffc 	.word	0xfeeefffc

08001d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0e7      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4970      	ldr	r1, [pc, #448]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b6e      	ldr	r3, [pc, #440]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0cf      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d908      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4960      	ldr	r1, [pc, #384]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d04c      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d121      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0a6      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e09a      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de6:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e08e      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e086      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4943      	ldr	r1, [pc, #268]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e18:	f7ff f83e 	bl	8000e98 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f83a 	bl	8000e98 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e06e      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d208      	bcs.n	8001e76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	492b      	ldr	r1, [pc, #172]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d210      	bcs.n	8001ea6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0207 	bic.w	r2, r3, #7
 8001e8c:	4923      	ldr	r1, [pc, #140]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_ClockConfig+0x1ec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e036      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4918      	ldr	r1, [pc, #96]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4910      	ldr	r1, [pc, #64]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee4:	f000 f824 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	490b      	ldr	r1, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x1f4>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1fc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ff75 	bl	8000df8 <HAL_InitTick>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f12:	7afb      	ldrb	r3, [r7, #11]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08004834 	.word	0x08004834
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x34>
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d121      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d11e      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f70:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e005      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_RCC_GetSysClockFreq+0x110>)
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e004      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d134      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d003      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0xac>
 8001fd4:	e005      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd8:	617b      	str	r3, [r7, #20]
      break;
 8001fda:	e005      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	617b      	str	r3, [r7, #20]
      break;
 8001fe0:	e002      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	617b      	str	r3, [r7, #20]
      break;
 8001fe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	fb03 f202 	mul.w	r2, r3, r2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0e5b      	lsrs	r3, r3, #25
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	3301      	adds	r3, #1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002028:	69bb      	ldr	r3, [r7, #24]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	0800484c 	.word	0x0800484c
 8002040:	00f42400 	.word	0x00f42400
 8002044:	007a1200 	.word	0x007a1200

08002048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_GetHCLKFreq+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002064:	f7ff fff0 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4904      	ldr	r1, [pc, #16]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08004844 	.word	0x08004844

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002090:	f7ff ffda 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4904      	ldr	r1, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08004844 	.word	0x08004844

080020b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff f9b6 	bl	8001440 <HAL_PWREx_GetVoltageRange>
 80020d4:	6178      	str	r0, [r7, #20]
 80020d6:	e014      	b.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f0:	f7ff f9a6 	bl	8001440 <HAL_PWREx_GetVoltageRange>
 80020f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002100:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002108:	d10b      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d919      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2ba0      	cmp	r3, #160	; 0xa0
 8002114:	d902      	bls.n	800211c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002116:	2302      	movs	r3, #2
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e013      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800211c:	2301      	movs	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e010      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d902      	bls.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002128:	2303      	movs	r3, #3
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e00a      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d102      	bne.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002134:	2302      	movs	r3, #2
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e004      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b70      	cmp	r3, #112	; 0x70
 800213e:	d101      	bne.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 0207 	bic.w	r2, r3, #7
 800214c:	4909      	ldr	r1, [pc, #36]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002180:	2300      	movs	r3, #0
 8002182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002184:	2300      	movs	r3, #0
 8002186:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800219c:	d01a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800219e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021a2:	d814      	bhi.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ac:	d10f      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a5c      	ldr	r2, [pc, #368]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ba:	e00c      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fa22 	bl	800260c <RCCEx_PLLSAI1_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021cc:	e003      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	74fb      	strb	r3, [r7, #19]
      break;
 80021d2:	e000      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021dc:	4b51      	ldr	r3, [pc, #324]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	494e      	ldr	r1, [pc, #312]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021f2:	e001      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 809e 	beq.w	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800221a:	2300      	movs	r3, #0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	4a3f      	ldr	r2, [pc, #252]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	; 0x58
 800222c:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a39      	ldr	r2, [pc, #228]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002248:	f7fe fe26 	bl	8000e98 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800224e:	e009      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe fe22 	bl	8000e98 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d902      	bls.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	74fb      	strb	r3, [r7, #19]
        break;
 8002262:	e005      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ef      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d15a      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01e      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	429a      	cmp	r2, r3
 8002290:	d019      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d016      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fde2 	bl	8000e98 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	e00b      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fdde 	bl	8000e98 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d902      	bls.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	74fb      	strb	r3, [r7, #19]
            break;
 80022ee:	e006      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ec      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800231a:	e009      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
 8002320:	e006      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002330:	7c7b      	ldrb	r3, [r7, #17]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b8d      	ldr	r3, [pc, #564]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a8c      	ldr	r2, [pc, #560]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800234e:	4b87      	ldr	r3, [pc, #540]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f023 0203 	bic.w	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4983      	ldr	r1, [pc, #524]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002370:	4b7e      	ldr	r3, [pc, #504]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 020c 	bic.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	497b      	ldr	r1, [pc, #492]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	4972      	ldr	r1, [pc, #456]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b4:	4b6d      	ldr	r3, [pc, #436]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	496a      	ldr	r1, [pc, #424]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	4961      	ldr	r1, [pc, #388]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023f8:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4959      	ldr	r1, [pc, #356]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800241a:	4b54      	ldr	r3, [pc, #336]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	4950      	ldr	r1, [pc, #320]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244a:	4948      	ldr	r1, [pc, #288]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	493f      	ldr	r1, [pc, #252]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d028      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248e:	4937      	ldr	r1, [pc, #220]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800249e:	d106      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a31      	ldr	r2, [pc, #196]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024aa:	60d3      	str	r3, [r2, #12]
 80024ac:	e011      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f8a4 	bl	800260c <RCCEx_PLLSAI1_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d028      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	491f      	ldr	r1, [pc, #124]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fc:	d106      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002508:	60d3      	str	r3, [r2, #12]
 800250a:	e011      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002514:	d10c      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2101      	movs	r1, #1
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f875 	bl	800260c <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02b      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	4908      	ldr	r1, [pc, #32]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800255a:	d109      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a02      	ldr	r2, [pc, #8]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002566:	60d3      	str	r3, [r2, #12]
 8002568:	e014      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f843 	bl	800260c <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01c      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	4916      	ldr	r1, [pc, #88]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025be:	d10c      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	2102      	movs	r1, #2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f820 	bl	800260c <RCCEx_PLLSAI1_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4904      	ldr	r1, [pc, #16]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002626:	4b71      	ldr	r3, [pc, #452]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0203 	and.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d10d      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
       ||
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800263e:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
       ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d047      	beq.n	80026e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e044      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d018      	beq.n	8002692 <RCCEx_PLLSAI1_Config+0x86>
 8002660:	2b03      	cmp	r3, #3
 8002662:	d825      	bhi.n	80026b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002664:	2b01      	cmp	r3, #1
 8002666:	d002      	beq.n	800266e <RCCEx_PLLSAI1_Config+0x62>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d009      	beq.n	8002680 <RCCEx_PLLSAI1_Config+0x74>
 800266c:	e020      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11d      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267e:	e01a      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002680:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e013      	b.n	80026ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002692:	4b56      	ldr	r3, [pc, #344]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800269e:	4b53      	ldr	r3, [pc, #332]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ae:	e006      	b.n	80026be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e004      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026be:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	430b      	orrs	r3, r1
 80026dc:	4943      	ldr	r1, [pc, #268]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d17c      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7fe fbd0 	bl	8000e98 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026fa:	e009      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fc:	f7fe fbcc 	bl	8000e98 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d902      	bls.n	8002710 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	73fb      	strb	r3, [r7, #15]
        break;
 800270e:	e005      	b.n	800271c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002710:	4b36      	ldr	r3, [pc, #216]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ef      	bne.n	80026fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d15f      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	0211      	lsls	r1, r2, #8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68d2      	ldr	r2, [r2, #12]
 800273e:	06d2      	lsls	r2, r2, #27
 8002740:	430a      	orrs	r2, r1
 8002742:	492a      	ldr	r1, [pc, #168]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	610b      	str	r3, [r1, #16]
 8002748:	e027      	b.n	800279a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d112      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	0211      	lsls	r1, r2, #8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6912      	ldr	r2, [r2, #16]
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0552      	lsls	r2, r2, #21
 800276c:	430a      	orrs	r2, r1
 800276e:	491f      	ldr	r1, [pc, #124]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
 8002774:	e011      	b.n	800279a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800277e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6892      	ldr	r2, [r2, #8]
 8002786:	0211      	lsls	r1, r2, #8
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6952      	ldr	r2, [r2, #20]
 800278c:	0852      	lsrs	r2, r2, #1
 800278e:	3a01      	subs	r2, #1
 8002790:	0652      	lsls	r2, r2, #25
 8002792:	430a      	orrs	r2, r1
 8002794:	4915      	ldr	r1, [pc, #84]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fb77 	bl	8000e98 <HAL_GetTick>
 80027aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ac:	e009      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ae:	f7fe fb73 	bl	8000e98 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	73fb      	strb	r3, [r7, #15]
          break;
 80027c0:	e005      	b.n	80027ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ef      	beq.n	80027ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e049      	b.n	8002896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe f93c 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f000 fa50 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d122      	bne.n	80028fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d11b      	bne.n	80028fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f06f 0202 	mvn.w	r2, #2
 80028ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f9d8 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 80028e6:	e005      	b.n	80028f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f9ca 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9db 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	d122      	bne.n	800294e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d11b      	bne.n	800294e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0204 	mvn.w	r2, #4
 800291e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9ae 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 800293a:	e005      	b.n	8002948 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f9a0 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f9b1 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d122      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11b      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0208 	mvn.w	r2, #8
 8002972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2204      	movs	r2, #4
 8002978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f984 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 800298e:	e005      	b.n	800299c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f976 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f987 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d122      	bne.n	80029f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d11b      	bne.n	80029f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f06f 0210 	mvn.w	r2, #16
 80029c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2208      	movs	r2, #8
 80029cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f95a 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 80029e2:	e005      	b.n	80029f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f94c 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f95d 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10e      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f06f 0201 	mvn.w	r2, #1
 8002a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f926 	bl	8002c6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d10e      	bne.n	8002a4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d107      	bne.n	8002a4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fab1 	bl	8002fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 faa4 	bl	8002fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f90b 	bl	8002cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0220 	mvn.w	r2, #32
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa64 	bl	8002f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x1c>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0b6      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x18a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	d03e      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0xd8>
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	f200 8087 	bhi.w	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	f000 8086 	beq.w	8002c52 <HAL_TIM_ConfigClockSource+0x176>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	d87f      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d01a      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xaa>
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d87b      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b54:	2b60      	cmp	r3, #96	; 0x60
 8002b56:	d050      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x11e>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d877      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b5c:	2b50      	cmp	r3, #80	; 0x50
 8002b5e:	d03c      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0xfe>
 8002b60:	2b50      	cmp	r3, #80	; 0x50
 8002b62:	d873      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d058      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x13e>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d86f      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b6c:	2b30      	cmp	r3, #48	; 0x30
 8002b6e:	d064      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x15e>
 8002b70:	2b30      	cmp	r3, #48	; 0x30
 8002b72:	d86b      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d060      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x15e>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d867      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05c      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x15e>
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d05a      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x15e>
 8002b84:	e062      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f000 f97b 	bl	8002e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	609a      	str	r2, [r3, #8]
      break;
 8002bb2:	e04f      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f000 f964 	bl	8002e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd6:	609a      	str	r2, [r3, #8]
      break;
 8002bd8:	e03c      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f000 f8d8 	bl	8002d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2150      	movs	r1, #80	; 0x50
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f931 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e02c      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 f8f7 	bl	8002dfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2160      	movs	r1, #96	; 0x60
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f921 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c18:	e01c      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 f8b8 	bl	8002d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2140      	movs	r1, #64	; 0x40
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f911 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c38:	e00c      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f000 f908 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c4a:	e003      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e000      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <TIM_Base_SetConfig+0xbc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0x20>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d108      	bne.n	8002d06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <TIM_Base_SetConfig+0xbc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <TIM_Base_SetConfig+0x52>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d007      	beq.n	8002d26 <TIM_Base_SetConfig+0x52>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <TIM_Base_SetConfig+0xc0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <TIM_Base_SetConfig+0x52>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <TIM_Base_SetConfig+0xc4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d108      	bne.n	8002d38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <TIM_Base_SetConfig+0xbc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0xa0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <TIM_Base_SetConfig+0xc0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0xa0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <TIM_Base_SetConfig+0xc4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	615a      	str	r2, [r3, #20]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400

08002d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0201 	bic.w	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f023 030a 	bic.w	r3, r3, #10
 8002dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	621a      	str	r2, [r3, #32]
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0210 	bic.w	r2, r3, #16
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	031b      	lsls	r3, r3, #12
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f043 0307 	orr.w	r3, r3, #7
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	021a      	lsls	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	609a      	str	r2, [r3, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e04f      	b.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d004      	beq.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10c      	bne.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40014000 	.word	0x40014000

08002f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e040      	b.n	800306c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fd6e 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f82c 	bl	8003074 <UART_SetConfig>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e022      	b.n	800306c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa7a 	bl	8003528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb01 	bl	800366c <UART_CheckIdleState>
 800306a:	4603      	mov	r3, r0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003078:	b08a      	sub	sp, #40	; 0x28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	431a      	orrs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4313      	orrs	r3, r2
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b9e      	ldr	r3, [pc, #632]	; (800331c <UART_SetConfig+0x2a8>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a93      	ldr	r2, [pc, #588]	; (8003320 <UART_SetConfig+0x2ac>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	4313      	orrs	r3, r2
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a8a      	ldr	r2, [pc, #552]	; (8003324 <UART_SetConfig+0x2b0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d126      	bne.n	800314c <UART_SetConfig+0xd8>
 80030fe:	4b8a      	ldr	r3, [pc, #552]	; (8003328 <UART_SetConfig+0x2b4>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d81b      	bhi.n	8003144 <UART_SetConfig+0xd0>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <UART_SetConfig+0xa0>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003135 	.word	0x08003135
 800311c:	0800312d 	.word	0x0800312d
 8003120:	0800313d 	.word	0x0800313d
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e0ab      	b.n	8003284 <UART_SetConfig+0x210>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e0a7      	b.n	8003284 <UART_SetConfig+0x210>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e0a3      	b.n	8003284 <UART_SetConfig+0x210>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e09f      	b.n	8003284 <UART_SetConfig+0x210>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314a:	e09b      	b.n	8003284 <UART_SetConfig+0x210>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a76      	ldr	r2, [pc, #472]	; (800332c <UART_SetConfig+0x2b8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d138      	bne.n	80031c8 <UART_SetConfig+0x154>
 8003156:	4b74      	ldr	r3, [pc, #464]	; (8003328 <UART_SetConfig+0x2b4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d82d      	bhi.n	80031c0 <UART_SetConfig+0x14c>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <UART_SetConfig+0xf8>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	080031a1 	.word	0x080031a1
 8003170:	080031c1 	.word	0x080031c1
 8003174:	080031c1 	.word	0x080031c1
 8003178:	080031c1 	.word	0x080031c1
 800317c:	080031b1 	.word	0x080031b1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031c1 	.word	0x080031c1
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031a9 	.word	0x080031a9
 8003190:	080031c1 	.word	0x080031c1
 8003194:	080031c1 	.word	0x080031c1
 8003198:	080031c1 	.word	0x080031c1
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e06d      	b.n	8003284 <UART_SetConfig+0x210>
 80031a8:	2302      	movs	r3, #2
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e069      	b.n	8003284 <UART_SetConfig+0x210>
 80031b0:	2304      	movs	r3, #4
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e065      	b.n	8003284 <UART_SetConfig+0x210>
 80031b8:	2308      	movs	r3, #8
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e061      	b.n	8003284 <UART_SetConfig+0x210>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c6:	e05d      	b.n	8003284 <UART_SetConfig+0x210>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a58      	ldr	r2, [pc, #352]	; (8003330 <UART_SetConfig+0x2bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d125      	bne.n	800321e <UART_SetConfig+0x1aa>
 80031d2:	4b55      	ldr	r3, [pc, #340]	; (8003328 <UART_SetConfig+0x2b4>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031dc:	2b30      	cmp	r3, #48	; 0x30
 80031de:	d016      	beq.n	800320e <UART_SetConfig+0x19a>
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d818      	bhi.n	8003216 <UART_SetConfig+0x1a2>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d00a      	beq.n	80031fe <UART_SetConfig+0x18a>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d814      	bhi.n	8003216 <UART_SetConfig+0x1a2>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <UART_SetConfig+0x182>
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d008      	beq.n	8003206 <UART_SetConfig+0x192>
 80031f4:	e00f      	b.n	8003216 <UART_SetConfig+0x1a2>
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fc:	e042      	b.n	8003284 <UART_SetConfig+0x210>
 80031fe:	2302      	movs	r3, #2
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003204:	e03e      	b.n	8003284 <UART_SetConfig+0x210>
 8003206:	2304      	movs	r3, #4
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320c:	e03a      	b.n	8003284 <UART_SetConfig+0x210>
 800320e:	2308      	movs	r3, #8
 8003210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003214:	e036      	b.n	8003284 <UART_SetConfig+0x210>
 8003216:	2310      	movs	r3, #16
 8003218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321c:	e032      	b.n	8003284 <UART_SetConfig+0x210>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3f      	ldr	r2, [pc, #252]	; (8003320 <UART_SetConfig+0x2ac>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d12a      	bne.n	800327e <UART_SetConfig+0x20a>
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <UART_SetConfig+0x2b4>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003236:	d01a      	beq.n	800326e <UART_SetConfig+0x1fa>
 8003238:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800323c:	d81b      	bhi.n	8003276 <UART_SetConfig+0x202>
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003242:	d00c      	beq.n	800325e <UART_SetConfig+0x1ea>
 8003244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003248:	d815      	bhi.n	8003276 <UART_SetConfig+0x202>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <UART_SetConfig+0x1e2>
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d008      	beq.n	8003266 <UART_SetConfig+0x1f2>
 8003254:	e00f      	b.n	8003276 <UART_SetConfig+0x202>
 8003256:	2300      	movs	r3, #0
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325c:	e012      	b.n	8003284 <UART_SetConfig+0x210>
 800325e:	2302      	movs	r3, #2
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003264:	e00e      	b.n	8003284 <UART_SetConfig+0x210>
 8003266:	2304      	movs	r3, #4
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326c:	e00a      	b.n	8003284 <UART_SetConfig+0x210>
 800326e:	2308      	movs	r3, #8
 8003270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003274:	e006      	b.n	8003284 <UART_SetConfig+0x210>
 8003276:	2310      	movs	r3, #16
 8003278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327c:	e002      	b.n	8003284 <UART_SetConfig+0x210>
 800327e:	2310      	movs	r3, #16
 8003280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <UART_SetConfig+0x2ac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	f040 808a 	bne.w	80033a4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003294:	2b08      	cmp	r3, #8
 8003296:	d824      	bhi.n	80032e2 <UART_SetConfig+0x26e>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0x22c>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032e3 	.word	0x080032e3
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032d3 	.word	0x080032d3
 80032b4:	080032e3 	.word	0x080032e3
 80032b8:	080032e3 	.word	0x080032e3
 80032bc:	080032e3 	.word	0x080032e3
 80032c0:	080032db 	.word	0x080032db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7fe fecc 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80032c8:	61f8      	str	r0, [r7, #28]
        break;
 80032ca:	e010      	b.n	80032ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <UART_SetConfig+0x2c0>)
 80032ce:	61fb      	str	r3, [r7, #28]
        break;
 80032d0:	e00d      	b.n	80032ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d2:	f7fe fe2d 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 80032d6:	61f8      	str	r0, [r7, #28]
        break;
 80032d8:	e009      	b.n	80032ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032de:	61fb      	str	r3, [r7, #28]
        break;
 80032e0:	e005      	b.n	80032ee <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8109 	beq.w	8003508 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	429a      	cmp	r2, r3
 8003304:	d305      	bcc.n	8003312 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	d912      	bls.n	8003338 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003318:	e0f6      	b.n	8003508 <UART_SetConfig+0x494>
 800331a:	bf00      	nop
 800331c:	efff69f3 	.word	0xefff69f3
 8003320:	40008000 	.word	0x40008000
 8003324:	40013800 	.word	0x40013800
 8003328:	40021000 	.word	0x40021000
 800332c:	40004400 	.word	0x40004400
 8003330:	40004800 	.word	0x40004800
 8003334:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2200      	movs	r2, #0
 800333c:	461c      	mov	r4, r3
 800333e:	4615      	mov	r5, r2
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	022b      	lsls	r3, r5, #8
 800334a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800334e:	0222      	lsls	r2, r4, #8
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	6849      	ldr	r1, [r1, #4]
 8003354:	0849      	lsrs	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	4688      	mov	r8, r1
 800335a:	4681      	mov	r9, r0
 800335c:	eb12 0a08 	adds.w	sl, r2, r8
 8003360:	eb43 0b09 	adc.w	fp, r3, r9
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003372:	4650      	mov	r0, sl
 8003374:	4659      	mov	r1, fp
 8003376:	f7fc ff7b 	bl	8000270 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4613      	mov	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003388:	d308      	bcc.n	800339c <UART_SetConfig+0x328>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d204      	bcs.n	800339c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	e0b5      	b.n	8003508 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033a2:	e0b1      	b.n	8003508 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	d15d      	bne.n	800346a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80033ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d827      	bhi.n	8003406 <UART_SetConfig+0x392>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0x348>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033e9 	.word	0x080033e9
 80033c4:	080033f1 	.word	0x080033f1
 80033c8:	08003407 	.word	0x08003407
 80033cc:	080033f7 	.word	0x080033f7
 80033d0:	08003407 	.word	0x08003407
 80033d4:	08003407 	.word	0x08003407
 80033d8:	08003407 	.word	0x08003407
 80033dc:	080033ff 	.word	0x080033ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7fe fe3e 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80033e4:	61f8      	str	r0, [r7, #28]
        break;
 80033e6:	e014      	b.n	8003412 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e8:	f7fe fe50 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 80033ec:	61f8      	str	r0, [r7, #28]
        break;
 80033ee:	e010      	b.n	8003412 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <UART_SetConfig+0x4b0>)
 80033f2:	61fb      	str	r3, [r7, #28]
        break;
 80033f4:	e00d      	b.n	8003412 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f6:	f7fe fd9b 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 80033fa:	61f8      	str	r0, [r7, #28]
        break;
 80033fc:	e009      	b.n	8003412 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	61fb      	str	r3, [r7, #28]
        break;
 8003404:	e005      	b.n	8003412 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d077      	beq.n	8003508 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005a      	lsls	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	441a      	add	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b0f      	cmp	r3, #15
 8003432:	d916      	bls.n	8003462 <UART_SetConfig+0x3ee>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343a:	d212      	bcs.n	8003462 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f023 030f 	bic.w	r3, r3, #15
 8003444:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	b29a      	uxth	r2, r3
 8003452:	8afb      	ldrh	r3, [r7, #22]
 8003454:	4313      	orrs	r3, r2
 8003456:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	8afa      	ldrh	r2, [r7, #22]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	e052      	b.n	8003508 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003468:	e04e      	b.n	8003508 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800346a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800346e:	2b08      	cmp	r3, #8
 8003470:	d827      	bhi.n	80034c2 <UART_SetConfig+0x44e>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <UART_SetConfig+0x404>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034a5 	.word	0x080034a5
 8003480:	080034ad 	.word	0x080034ad
 8003484:	080034c3 	.word	0x080034c3
 8003488:	080034b3 	.word	0x080034b3
 800348c:	080034c3 	.word	0x080034c3
 8003490:	080034c3 	.word	0x080034c3
 8003494:	080034c3 	.word	0x080034c3
 8003498:	080034bb 	.word	0x080034bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7fe fde0 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80034a0:	61f8      	str	r0, [r7, #28]
        break;
 80034a2:	e014      	b.n	80034ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7fe fdf2 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 80034a8:	61f8      	str	r0, [r7, #28]
        break;
 80034aa:	e010      	b.n	80034ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <UART_SetConfig+0x4b0>)
 80034ae:	61fb      	str	r3, [r7, #28]
        break;
 80034b0:	e00d      	b.n	80034ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b2:	f7fe fd3d 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 80034b6:	61f8      	str	r0, [r7, #28]
        break;
 80034b8:	e009      	b.n	80034ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034be:	61fb      	str	r3, [r7, #28]
        break;
 80034c0:	e005      	b.n	80034ce <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034cc:	bf00      	nop
    }

    if (pclk != 0U)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d019      	beq.n	8003508 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	085a      	lsrs	r2, r3, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	441a      	add	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d909      	bls.n	8003502 <UART_SetConfig+0x48e>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d205      	bcs.n	8003502 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
 8003500:	e002      	b.n	8003508 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	00f42400 	.word	0x00f42400

08003528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01a      	beq.n	800363e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d10a      	bne.n	800363e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800367c:	f7fd fc0c 	bl	8000e98 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d10e      	bne.n	80036ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f82d 	bl	80036fe <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e023      	b.n	80036f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d10e      	bne.n	80036da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f817 	bl	80036fe <UART_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e00d      	b.n	80036f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b09c      	sub	sp, #112	; 0x70
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	e0a5      	b.n	800385c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	f000 80a1 	beq.w	800385c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fd fbbd 	bl	8000e98 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <UART_WaitOnFlagUntilTimeout+0x32>
 800372a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13e      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800373e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003744:	667b      	str	r3, [r7, #100]	; 0x64
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800374e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003750:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800375c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e6      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	663b      	str	r3, [r7, #96]	; 0x60
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3308      	adds	r3, #8
 8003780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003782:	64ba      	str	r2, [r7, #72]	; 0x48
 8003784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e067      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d04f      	beq.n	800385c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ca:	d147      	bne.n	800385c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
 80037f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e6      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3308      	adds	r3, #8
 800380e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	613b      	str	r3, [r7, #16]
   return(result);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3308      	adds	r3, #8
 8003826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003828:	623a      	str	r2, [r7, #32]
 800382a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	69f9      	ldr	r1, [r7, #28]
 800382e:	6a3a      	ldr	r2, [r7, #32]
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	61bb      	str	r3, [r7, #24]
   return(result);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e5      	bne.n	8003808 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e010      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4013      	ands	r3, r2
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	429a      	cmp	r2, r3
 8003878:	f43f af4a 	beq.w	8003710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3770      	adds	r7, #112	; 0x70
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <__errno>:
 8003888:	4b01      	ldr	r3, [pc, #4]	; (8003890 <__errno+0x8>)
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	2000000c 	.word	0x2000000c

08003894 <__libc_init_array>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4d0d      	ldr	r5, [pc, #52]	; (80038cc <__libc_init_array+0x38>)
 8003898:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <__libc_init_array+0x3c>)
 800389a:	1b64      	subs	r4, r4, r5
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	2600      	movs	r6, #0
 80038a0:	42a6      	cmp	r6, r4
 80038a2:	d109      	bne.n	80038b8 <__libc_init_array+0x24>
 80038a4:	4d0b      	ldr	r5, [pc, #44]	; (80038d4 <__libc_init_array+0x40>)
 80038a6:	4c0c      	ldr	r4, [pc, #48]	; (80038d8 <__libc_init_array+0x44>)
 80038a8:	f000 ffae 	bl	8004808 <_init>
 80038ac:	1b64      	subs	r4, r4, r5
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	2600      	movs	r6, #0
 80038b2:	42a6      	cmp	r6, r4
 80038b4:	d105      	bne.n	80038c2 <__libc_init_array+0x2e>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038bc:	4798      	blx	r3
 80038be:	3601      	adds	r6, #1
 80038c0:	e7ee      	b.n	80038a0 <__libc_init_array+0xc>
 80038c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c6:	4798      	blx	r3
 80038c8:	3601      	adds	r6, #1
 80038ca:	e7f2      	b.n	80038b2 <__libc_init_array+0x1e>
 80038cc:	0800491c 	.word	0x0800491c
 80038d0:	0800491c 	.word	0x0800491c
 80038d4:	0800491c 	.word	0x0800491c
 80038d8:	08004920 	.word	0x08004920

080038dc <memset>:
 80038dc:	4402      	add	r2, r0
 80038de:	4603      	mov	r3, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <iprintf>:
 80038ec:	b40f      	push	{r0, r1, r2, r3}
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <iprintf+0x2c>)
 80038f0:	b513      	push	{r0, r1, r4, lr}
 80038f2:	681c      	ldr	r4, [r3, #0]
 80038f4:	b124      	cbz	r4, 8003900 <iprintf+0x14>
 80038f6:	69a3      	ldr	r3, [r4, #24]
 80038f8:	b913      	cbnz	r3, 8003900 <iprintf+0x14>
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 f866 	bl	80039cc <__sinit>
 8003900:	ab05      	add	r3, sp, #20
 8003902:	9a04      	ldr	r2, [sp, #16]
 8003904:	68a1      	ldr	r1, [r4, #8]
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	4620      	mov	r0, r4
 800390a:	f000 f9bd 	bl	8003c88 <_vfiprintf_r>
 800390e:	b002      	add	sp, #8
 8003910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003914:	b004      	add	sp, #16
 8003916:	4770      	bx	lr
 8003918:	2000000c 	.word	0x2000000c

0800391c <std>:
 800391c:	2300      	movs	r3, #0
 800391e:	b510      	push	{r4, lr}
 8003920:	4604      	mov	r4, r0
 8003922:	e9c0 3300 	strd	r3, r3, [r0]
 8003926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800392a:	6083      	str	r3, [r0, #8]
 800392c:	8181      	strh	r1, [r0, #12]
 800392e:	6643      	str	r3, [r0, #100]	; 0x64
 8003930:	81c2      	strh	r2, [r0, #14]
 8003932:	6183      	str	r3, [r0, #24]
 8003934:	4619      	mov	r1, r3
 8003936:	2208      	movs	r2, #8
 8003938:	305c      	adds	r0, #92	; 0x5c
 800393a:	f7ff ffcf 	bl	80038dc <memset>
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <std+0x38>)
 8003940:	6263      	str	r3, [r4, #36]	; 0x24
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <std+0x3c>)
 8003944:	62a3      	str	r3, [r4, #40]	; 0x28
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <std+0x40>)
 8003948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <std+0x44>)
 800394c:	6224      	str	r4, [r4, #32]
 800394e:	6323      	str	r3, [r4, #48]	; 0x30
 8003950:	bd10      	pop	{r4, pc}
 8003952:	bf00      	nop
 8003954:	08004231 	.word	0x08004231
 8003958:	08004253 	.word	0x08004253
 800395c:	0800428b 	.word	0x0800428b
 8003960:	080042af 	.word	0x080042af

08003964 <_cleanup_r>:
 8003964:	4901      	ldr	r1, [pc, #4]	; (800396c <_cleanup_r+0x8>)
 8003966:	f000 b8af 	b.w	8003ac8 <_fwalk_reent>
 800396a:	bf00      	nop
 800396c:	08004589 	.word	0x08004589

08003970 <__sfmoreglue>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	2268      	movs	r2, #104	; 0x68
 8003974:	1e4d      	subs	r5, r1, #1
 8003976:	4355      	muls	r5, r2
 8003978:	460e      	mov	r6, r1
 800397a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800397e:	f000 f8e5 	bl	8003b4c <_malloc_r>
 8003982:	4604      	mov	r4, r0
 8003984:	b140      	cbz	r0, 8003998 <__sfmoreglue+0x28>
 8003986:	2100      	movs	r1, #0
 8003988:	e9c0 1600 	strd	r1, r6, [r0]
 800398c:	300c      	adds	r0, #12
 800398e:	60a0      	str	r0, [r4, #8]
 8003990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003994:	f7ff ffa2 	bl	80038dc <memset>
 8003998:	4620      	mov	r0, r4
 800399a:	bd70      	pop	{r4, r5, r6, pc}

0800399c <__sfp_lock_acquire>:
 800399c:	4801      	ldr	r0, [pc, #4]	; (80039a4 <__sfp_lock_acquire+0x8>)
 800399e:	f000 b8b3 	b.w	8003b08 <__retarget_lock_acquire_recursive>
 80039a2:	bf00      	nop
 80039a4:	20000181 	.word	0x20000181

080039a8 <__sfp_lock_release>:
 80039a8:	4801      	ldr	r0, [pc, #4]	; (80039b0 <__sfp_lock_release+0x8>)
 80039aa:	f000 b8ae 	b.w	8003b0a <__retarget_lock_release_recursive>
 80039ae:	bf00      	nop
 80039b0:	20000181 	.word	0x20000181

080039b4 <__sinit_lock_acquire>:
 80039b4:	4801      	ldr	r0, [pc, #4]	; (80039bc <__sinit_lock_acquire+0x8>)
 80039b6:	f000 b8a7 	b.w	8003b08 <__retarget_lock_acquire_recursive>
 80039ba:	bf00      	nop
 80039bc:	20000182 	.word	0x20000182

080039c0 <__sinit_lock_release>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__sinit_lock_release+0x8>)
 80039c2:	f000 b8a2 	b.w	8003b0a <__retarget_lock_release_recursive>
 80039c6:	bf00      	nop
 80039c8:	20000182 	.word	0x20000182

080039cc <__sinit>:
 80039cc:	b510      	push	{r4, lr}
 80039ce:	4604      	mov	r4, r0
 80039d0:	f7ff fff0 	bl	80039b4 <__sinit_lock_acquire>
 80039d4:	69a3      	ldr	r3, [r4, #24]
 80039d6:	b11b      	cbz	r3, 80039e0 <__sinit+0x14>
 80039d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039dc:	f7ff bff0 	b.w	80039c0 <__sinit_lock_release>
 80039e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039e4:	6523      	str	r3, [r4, #80]	; 0x50
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <__sinit+0x68>)
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <__sinit+0x6c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	bf04      	itt	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	61a3      	streq	r3, [r4, #24]
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 f820 	bl	8003a3c <__sfp>
 80039fc:	6060      	str	r0, [r4, #4]
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 f81c 	bl	8003a3c <__sfp>
 8003a04:	60a0      	str	r0, [r4, #8]
 8003a06:	4620      	mov	r0, r4
 8003a08:	f000 f818 	bl	8003a3c <__sfp>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	60e0      	str	r0, [r4, #12]
 8003a10:	2104      	movs	r1, #4
 8003a12:	6860      	ldr	r0, [r4, #4]
 8003a14:	f7ff ff82 	bl	800391c <std>
 8003a18:	68a0      	ldr	r0, [r4, #8]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2109      	movs	r1, #9
 8003a1e:	f7ff ff7d 	bl	800391c <std>
 8003a22:	68e0      	ldr	r0, [r4, #12]
 8003a24:	2202      	movs	r2, #2
 8003a26:	2112      	movs	r1, #18
 8003a28:	f7ff ff78 	bl	800391c <std>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61a3      	str	r3, [r4, #24]
 8003a30:	e7d2      	b.n	80039d8 <__sinit+0xc>
 8003a32:	bf00      	nop
 8003a34:	0800487c 	.word	0x0800487c
 8003a38:	08003965 	.word	0x08003965

08003a3c <__sfp>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	4607      	mov	r7, r0
 8003a40:	f7ff ffac 	bl	800399c <__sfp_lock_acquire>
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <__sfp+0x84>)
 8003a46:	681e      	ldr	r6, [r3, #0]
 8003a48:	69b3      	ldr	r3, [r6, #24]
 8003a4a:	b913      	cbnz	r3, 8003a52 <__sfp+0x16>
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7ff ffbd 	bl	80039cc <__sinit>
 8003a52:	3648      	adds	r6, #72	; 0x48
 8003a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	d503      	bpl.n	8003a64 <__sfp+0x28>
 8003a5c:	6833      	ldr	r3, [r6, #0]
 8003a5e:	b30b      	cbz	r3, 8003aa4 <__sfp+0x68>
 8003a60:	6836      	ldr	r6, [r6, #0]
 8003a62:	e7f7      	b.n	8003a54 <__sfp+0x18>
 8003a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a68:	b9d5      	cbnz	r5, 8003aa0 <__sfp+0x64>
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <__sfp+0x88>)
 8003a6c:	60e3      	str	r3, [r4, #12]
 8003a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a72:	6665      	str	r5, [r4, #100]	; 0x64
 8003a74:	f000 f847 	bl	8003b06 <__retarget_lock_init_recursive>
 8003a78:	f7ff ff96 	bl	80039a8 <__sfp_lock_release>
 8003a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a84:	6025      	str	r5, [r4, #0]
 8003a86:	61a5      	str	r5, [r4, #24]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a90:	f7ff ff24 	bl	80038dc <memset>
 8003a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa0:	3468      	adds	r4, #104	; 0x68
 8003aa2:	e7d9      	b.n	8003a58 <__sfp+0x1c>
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f7ff ff62 	bl	8003970 <__sfmoreglue>
 8003aac:	4604      	mov	r4, r0
 8003aae:	6030      	str	r0, [r6, #0]
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d1d5      	bne.n	8003a60 <__sfp+0x24>
 8003ab4:	f7ff ff78 	bl	80039a8 <__sfp_lock_release>
 8003ab8:	230c      	movs	r3, #12
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	e7ee      	b.n	8003a9c <__sfp+0x60>
 8003abe:	bf00      	nop
 8003ac0:	0800487c 	.word	0x0800487c
 8003ac4:	ffff0001 	.word	0xffff0001

08003ac8 <_fwalk_reent>:
 8003ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003acc:	4606      	mov	r6, r0
 8003ace:	4688      	mov	r8, r1
 8003ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ad4:	2700      	movs	r7, #0
 8003ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ada:	f1b9 0901 	subs.w	r9, r9, #1
 8003ade:	d505      	bpl.n	8003aec <_fwalk_reent+0x24>
 8003ae0:	6824      	ldr	r4, [r4, #0]
 8003ae2:	2c00      	cmp	r4, #0
 8003ae4:	d1f7      	bne.n	8003ad6 <_fwalk_reent+0xe>
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aec:	89ab      	ldrh	r3, [r5, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d907      	bls.n	8003b02 <_fwalk_reent+0x3a>
 8003af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003af6:	3301      	adds	r3, #1
 8003af8:	d003      	beq.n	8003b02 <_fwalk_reent+0x3a>
 8003afa:	4629      	mov	r1, r5
 8003afc:	4630      	mov	r0, r6
 8003afe:	47c0      	blx	r8
 8003b00:	4307      	orrs	r7, r0
 8003b02:	3568      	adds	r5, #104	; 0x68
 8003b04:	e7e9      	b.n	8003ada <_fwalk_reent+0x12>

08003b06 <__retarget_lock_init_recursive>:
 8003b06:	4770      	bx	lr

08003b08 <__retarget_lock_acquire_recursive>:
 8003b08:	4770      	bx	lr

08003b0a <__retarget_lock_release_recursive>:
 8003b0a:	4770      	bx	lr

08003b0c <sbrk_aligned>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4e0e      	ldr	r6, [pc, #56]	; (8003b48 <sbrk_aligned+0x3c>)
 8003b10:	460c      	mov	r4, r1
 8003b12:	6831      	ldr	r1, [r6, #0]
 8003b14:	4605      	mov	r5, r0
 8003b16:	b911      	cbnz	r1, 8003b1e <sbrk_aligned+0x12>
 8003b18:	f000 fb7a 	bl	8004210 <_sbrk_r>
 8003b1c:	6030      	str	r0, [r6, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 fb75 	bl	8004210 <_sbrk_r>
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	d00a      	beq.n	8003b40 <sbrk_aligned+0x34>
 8003b2a:	1cc4      	adds	r4, r0, #3
 8003b2c:	f024 0403 	bic.w	r4, r4, #3
 8003b30:	42a0      	cmp	r0, r4
 8003b32:	d007      	beq.n	8003b44 <sbrk_aligned+0x38>
 8003b34:	1a21      	subs	r1, r4, r0
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 fb6a 	bl	8004210 <_sbrk_r>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d101      	bne.n	8003b44 <sbrk_aligned+0x38>
 8003b40:	f04f 34ff 	mov.w	r4, #4294967295
 8003b44:	4620      	mov	r0, r4
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	20000188 	.word	0x20000188

08003b4c <_malloc_r>:
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	1ccd      	adds	r5, r1, #3
 8003b52:	f025 0503 	bic.w	r5, r5, #3
 8003b56:	3508      	adds	r5, #8
 8003b58:	2d0c      	cmp	r5, #12
 8003b5a:	bf38      	it	cc
 8003b5c:	250c      	movcc	r5, #12
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	4607      	mov	r7, r0
 8003b62:	db01      	blt.n	8003b68 <_malloc_r+0x1c>
 8003b64:	42a9      	cmp	r1, r5
 8003b66:	d905      	bls.n	8003b74 <_malloc_r+0x28>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	4630      	mov	r0, r6
 8003b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b74:	4e2e      	ldr	r6, [pc, #184]	; (8003c30 <_malloc_r+0xe4>)
 8003b76:	f000 fdbb 	bl	80046f0 <__malloc_lock>
 8003b7a:	6833      	ldr	r3, [r6, #0]
 8003b7c:	461c      	mov	r4, r3
 8003b7e:	bb34      	cbnz	r4, 8003bce <_malloc_r+0x82>
 8003b80:	4629      	mov	r1, r5
 8003b82:	4638      	mov	r0, r7
 8003b84:	f7ff ffc2 	bl	8003b0c <sbrk_aligned>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	d14d      	bne.n	8003c2a <_malloc_r+0xde>
 8003b8e:	6834      	ldr	r4, [r6, #0]
 8003b90:	4626      	mov	r6, r4
 8003b92:	2e00      	cmp	r6, #0
 8003b94:	d140      	bne.n	8003c18 <_malloc_r+0xcc>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	4631      	mov	r1, r6
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	eb04 0803 	add.w	r8, r4, r3
 8003ba0:	f000 fb36 	bl	8004210 <_sbrk_r>
 8003ba4:	4580      	cmp	r8, r0
 8003ba6:	d13a      	bne.n	8003c1e <_malloc_r+0xd2>
 8003ba8:	6821      	ldr	r1, [r4, #0]
 8003baa:	3503      	adds	r5, #3
 8003bac:	1a6d      	subs	r5, r5, r1
 8003bae:	f025 0503 	bic.w	r5, r5, #3
 8003bb2:	3508      	adds	r5, #8
 8003bb4:	2d0c      	cmp	r5, #12
 8003bb6:	bf38      	it	cc
 8003bb8:	250c      	movcc	r5, #12
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f7ff ffa5 	bl	8003b0c <sbrk_aligned>
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d02b      	beq.n	8003c1e <_malloc_r+0xd2>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	442b      	add	r3, r5
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	e00e      	b.n	8003bec <_malloc_r+0xa0>
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	1b52      	subs	r2, r2, r5
 8003bd2:	d41e      	bmi.n	8003c12 <_malloc_r+0xc6>
 8003bd4:	2a0b      	cmp	r2, #11
 8003bd6:	d916      	bls.n	8003c06 <_malloc_r+0xba>
 8003bd8:	1961      	adds	r1, r4, r5
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	6025      	str	r5, [r4, #0]
 8003bde:	bf18      	it	ne
 8003be0:	6059      	strne	r1, [r3, #4]
 8003be2:	6863      	ldr	r3, [r4, #4]
 8003be4:	bf08      	it	eq
 8003be6:	6031      	streq	r1, [r6, #0]
 8003be8:	5162      	str	r2, [r4, r5]
 8003bea:	604b      	str	r3, [r1, #4]
 8003bec:	4638      	mov	r0, r7
 8003bee:	f104 060b 	add.w	r6, r4, #11
 8003bf2:	f000 fd83 	bl	80046fc <__malloc_unlock>
 8003bf6:	f026 0607 	bic.w	r6, r6, #7
 8003bfa:	1d23      	adds	r3, r4, #4
 8003bfc:	1af2      	subs	r2, r6, r3
 8003bfe:	d0b6      	beq.n	8003b6e <_malloc_r+0x22>
 8003c00:	1b9b      	subs	r3, r3, r6
 8003c02:	50a3      	str	r3, [r4, r2]
 8003c04:	e7b3      	b.n	8003b6e <_malloc_r+0x22>
 8003c06:	6862      	ldr	r2, [r4, #4]
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	bf0c      	ite	eq
 8003c0c:	6032      	streq	r2, [r6, #0]
 8003c0e:	605a      	strne	r2, [r3, #4]
 8003c10:	e7ec      	b.n	8003bec <_malloc_r+0xa0>
 8003c12:	4623      	mov	r3, r4
 8003c14:	6864      	ldr	r4, [r4, #4]
 8003c16:	e7b2      	b.n	8003b7e <_malloc_r+0x32>
 8003c18:	4634      	mov	r4, r6
 8003c1a:	6876      	ldr	r6, [r6, #4]
 8003c1c:	e7b9      	b.n	8003b92 <_malloc_r+0x46>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4638      	mov	r0, r7
 8003c24:	f000 fd6a 	bl	80046fc <__malloc_unlock>
 8003c28:	e7a1      	b.n	8003b6e <_malloc_r+0x22>
 8003c2a:	6025      	str	r5, [r4, #0]
 8003c2c:	e7de      	b.n	8003bec <_malloc_r+0xa0>
 8003c2e:	bf00      	nop
 8003c30:	20000184 	.word	0x20000184

08003c34 <__sfputc_r>:
 8003c34:	6893      	ldr	r3, [r2, #8]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	b410      	push	{r4}
 8003c3c:	6093      	str	r3, [r2, #8]
 8003c3e:	da08      	bge.n	8003c52 <__sfputc_r+0x1e>
 8003c40:	6994      	ldr	r4, [r2, #24]
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	db01      	blt.n	8003c4a <__sfputc_r+0x16>
 8003c46:	290a      	cmp	r1, #10
 8003c48:	d103      	bne.n	8003c52 <__sfputc_r+0x1e>
 8003c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c4e:	f000 bb33 	b.w	80042b8 <__swbuf_r>
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	1c58      	adds	r0, r3, #1
 8003c56:	6010      	str	r0, [r2, #0]
 8003c58:	7019      	strb	r1, [r3, #0]
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <__sfputs_r>:
 8003c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c64:	4606      	mov	r6, r0
 8003c66:	460f      	mov	r7, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	18d5      	adds	r5, r2, r3
 8003c6c:	42ac      	cmp	r4, r5
 8003c6e:	d101      	bne.n	8003c74 <__sfputs_r+0x12>
 8003c70:	2000      	movs	r0, #0
 8003c72:	e007      	b.n	8003c84 <__sfputs_r+0x22>
 8003c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c78:	463a      	mov	r2, r7
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f7ff ffda 	bl	8003c34 <__sfputc_r>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d1f3      	bne.n	8003c6c <__sfputs_r+0xa>
 8003c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c88 <_vfiprintf_r>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	460d      	mov	r5, r1
 8003c8e:	b09d      	sub	sp, #116	; 0x74
 8003c90:	4614      	mov	r4, r2
 8003c92:	4698      	mov	r8, r3
 8003c94:	4606      	mov	r6, r0
 8003c96:	b118      	cbz	r0, 8003ca0 <_vfiprintf_r+0x18>
 8003c98:	6983      	ldr	r3, [r0, #24]
 8003c9a:	b90b      	cbnz	r3, 8003ca0 <_vfiprintf_r+0x18>
 8003c9c:	f7ff fe96 	bl	80039cc <__sinit>
 8003ca0:	4b89      	ldr	r3, [pc, #548]	; (8003ec8 <_vfiprintf_r+0x240>)
 8003ca2:	429d      	cmp	r5, r3
 8003ca4:	d11b      	bne.n	8003cde <_vfiprintf_r+0x56>
 8003ca6:	6875      	ldr	r5, [r6, #4]
 8003ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003caa:	07d9      	lsls	r1, r3, #31
 8003cac:	d405      	bmi.n	8003cba <_vfiprintf_r+0x32>
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	059a      	lsls	r2, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_vfiprintf_r+0x32>
 8003cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cb6:	f7ff ff27 	bl	8003b08 <__retarget_lock_acquire_recursive>
 8003cba:	89ab      	ldrh	r3, [r5, #12]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	d501      	bpl.n	8003cc4 <_vfiprintf_r+0x3c>
 8003cc0:	692b      	ldr	r3, [r5, #16]
 8003cc2:	b9eb      	cbnz	r3, 8003d00 <_vfiprintf_r+0x78>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 fb5a 	bl	8004380 <__swsetup_r>
 8003ccc:	b1c0      	cbz	r0, 8003d00 <_vfiprintf_r+0x78>
 8003cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd0:	07dc      	lsls	r4, r3, #31
 8003cd2:	d50e      	bpl.n	8003cf2 <_vfiprintf_r+0x6a>
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	b01d      	add	sp, #116	; 0x74
 8003cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cde:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <_vfiprintf_r+0x244>)
 8003ce0:	429d      	cmp	r5, r3
 8003ce2:	d101      	bne.n	8003ce8 <_vfiprintf_r+0x60>
 8003ce4:	68b5      	ldr	r5, [r6, #8]
 8003ce6:	e7df      	b.n	8003ca8 <_vfiprintf_r+0x20>
 8003ce8:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <_vfiprintf_r+0x248>)
 8003cea:	429d      	cmp	r5, r3
 8003cec:	bf08      	it	eq
 8003cee:	68f5      	ldreq	r5, [r6, #12]
 8003cf0:	e7da      	b.n	8003ca8 <_vfiprintf_r+0x20>
 8003cf2:	89ab      	ldrh	r3, [r5, #12]
 8003cf4:	0598      	lsls	r0, r3, #22
 8003cf6:	d4ed      	bmi.n	8003cd4 <_vfiprintf_r+0x4c>
 8003cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cfa:	f7ff ff06 	bl	8003b0a <__retarget_lock_release_recursive>
 8003cfe:	e7e9      	b.n	8003cd4 <_vfiprintf_r+0x4c>
 8003d00:	2300      	movs	r3, #0
 8003d02:	9309      	str	r3, [sp, #36]	; 0x24
 8003d04:	2320      	movs	r3, #32
 8003d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0e:	2330      	movs	r3, #48	; 0x30
 8003d10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ed4 <_vfiprintf_r+0x24c>
 8003d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d18:	f04f 0901 	mov.w	r9, #1
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	469a      	mov	sl, r3
 8003d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d24:	b10a      	cbz	r2, 8003d2a <_vfiprintf_r+0xa2>
 8003d26:	2a25      	cmp	r2, #37	; 0x25
 8003d28:	d1f9      	bne.n	8003d1e <_vfiprintf_r+0x96>
 8003d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2e:	d00b      	beq.n	8003d48 <_vfiprintf_r+0xc0>
 8003d30:	465b      	mov	r3, fp
 8003d32:	4622      	mov	r2, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	4630      	mov	r0, r6
 8003d38:	f7ff ff93 	bl	8003c62 <__sfputs_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f000 80aa 	beq.w	8003e96 <_vfiprintf_r+0x20e>
 8003d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d44:	445a      	add	r2, fp
 8003d46:	9209      	str	r2, [sp, #36]	; 0x24
 8003d48:	f89a 3000 	ldrb.w	r3, [sl]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a2 	beq.w	8003e96 <_vfiprintf_r+0x20e>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d5c:	f10a 0a01 	add.w	sl, sl, #1
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	9307      	str	r3, [sp, #28]
 8003d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d68:	931a      	str	r3, [sp, #104]	; 0x68
 8003d6a:	4654      	mov	r4, sl
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d72:	4858      	ldr	r0, [pc, #352]	; (8003ed4 <_vfiprintf_r+0x24c>)
 8003d74:	f7fc fa2c 	bl	80001d0 <memchr>
 8003d78:	9a04      	ldr	r2, [sp, #16]
 8003d7a:	b9d8      	cbnz	r0, 8003db4 <_vfiprintf_r+0x12c>
 8003d7c:	06d1      	lsls	r1, r2, #27
 8003d7e:	bf44      	itt	mi
 8003d80:	2320      	movmi	r3, #32
 8003d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d86:	0713      	lsls	r3, r2, #28
 8003d88:	bf44      	itt	mi
 8003d8a:	232b      	movmi	r3, #43	; 0x2b
 8003d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d90:	f89a 3000 	ldrb.w	r3, [sl]
 8003d94:	2b2a      	cmp	r3, #42	; 0x2a
 8003d96:	d015      	beq.n	8003dc4 <_vfiprintf_r+0x13c>
 8003d98:	9a07      	ldr	r2, [sp, #28]
 8003d9a:	4654      	mov	r4, sl
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f04f 0c0a 	mov.w	ip, #10
 8003da2:	4621      	mov	r1, r4
 8003da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da8:	3b30      	subs	r3, #48	; 0x30
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d94e      	bls.n	8003e4c <_vfiprintf_r+0x1c4>
 8003dae:	b1b0      	cbz	r0, 8003dde <_vfiprintf_r+0x156>
 8003db0:	9207      	str	r2, [sp, #28]
 8003db2:	e014      	b.n	8003dde <_vfiprintf_r+0x156>
 8003db4:	eba0 0308 	sub.w	r3, r0, r8
 8003db8:	fa09 f303 	lsl.w	r3, r9, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	46a2      	mov	sl, r4
 8003dc2:	e7d2      	b.n	8003d6a <_vfiprintf_r+0xe2>
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	1d19      	adds	r1, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9103      	str	r1, [sp, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfbb      	ittet	lt
 8003dd0:	425b      	neglt	r3, r3
 8003dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd6:	9307      	strge	r3, [sp, #28]
 8003dd8:	9307      	strlt	r3, [sp, #28]
 8003dda:	bfb8      	it	lt
 8003ddc:	9204      	strlt	r2, [sp, #16]
 8003dde:	7823      	ldrb	r3, [r4, #0]
 8003de0:	2b2e      	cmp	r3, #46	; 0x2e
 8003de2:	d10c      	bne.n	8003dfe <_vfiprintf_r+0x176>
 8003de4:	7863      	ldrb	r3, [r4, #1]
 8003de6:	2b2a      	cmp	r3, #42	; 0x2a
 8003de8:	d135      	bne.n	8003e56 <_vfiprintf_r+0x1ce>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	1d1a      	adds	r2, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9203      	str	r2, [sp, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfb8      	it	lt
 8003df6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dfa:	3402      	adds	r4, #2
 8003dfc:	9305      	str	r3, [sp, #20]
 8003dfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ee4 <_vfiprintf_r+0x25c>
 8003e02:	7821      	ldrb	r1, [r4, #0]
 8003e04:	2203      	movs	r2, #3
 8003e06:	4650      	mov	r0, sl
 8003e08:	f7fc f9e2 	bl	80001d0 <memchr>
 8003e0c:	b140      	cbz	r0, 8003e20 <_vfiprintf_r+0x198>
 8003e0e:	2340      	movs	r3, #64	; 0x40
 8003e10:	eba0 000a 	sub.w	r0, r0, sl
 8003e14:	fa03 f000 	lsl.w	r0, r3, r0
 8003e18:	9b04      	ldr	r3, [sp, #16]
 8003e1a:	4303      	orrs	r3, r0
 8003e1c:	3401      	adds	r4, #1
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e24:	482c      	ldr	r0, [pc, #176]	; (8003ed8 <_vfiprintf_r+0x250>)
 8003e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e2a:	2206      	movs	r2, #6
 8003e2c:	f7fc f9d0 	bl	80001d0 <memchr>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d03f      	beq.n	8003eb4 <_vfiprintf_r+0x22c>
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <_vfiprintf_r+0x254>)
 8003e36:	bb1b      	cbnz	r3, 8003e80 <_vfiprintf_r+0x1f8>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	3307      	adds	r3, #7
 8003e3c:	f023 0307 	bic.w	r3, r3, #7
 8003e40:	3308      	adds	r3, #8
 8003e42:	9303      	str	r3, [sp, #12]
 8003e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e46:	443b      	add	r3, r7
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4a:	e767      	b.n	8003d1c <_vfiprintf_r+0x94>
 8003e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e50:	460c      	mov	r4, r1
 8003e52:	2001      	movs	r0, #1
 8003e54:	e7a5      	b.n	8003da2 <_vfiprintf_r+0x11a>
 8003e56:	2300      	movs	r3, #0
 8003e58:	3401      	adds	r4, #1
 8003e5a:	9305      	str	r3, [sp, #20]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f04f 0c0a 	mov.w	ip, #10
 8003e62:	4620      	mov	r0, r4
 8003e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e68:	3a30      	subs	r2, #48	; 0x30
 8003e6a:	2a09      	cmp	r2, #9
 8003e6c:	d903      	bls.n	8003e76 <_vfiprintf_r+0x1ee>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0c5      	beq.n	8003dfe <_vfiprintf_r+0x176>
 8003e72:	9105      	str	r1, [sp, #20]
 8003e74:	e7c3      	b.n	8003dfe <_vfiprintf_r+0x176>
 8003e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e7f0      	b.n	8003e62 <_vfiprintf_r+0x1da>
 8003e80:	ab03      	add	r3, sp, #12
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	462a      	mov	r2, r5
 8003e86:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <_vfiprintf_r+0x258>)
 8003e88:	a904      	add	r1, sp, #16
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f3af 8000 	nop.w
 8003e90:	4607      	mov	r7, r0
 8003e92:	1c78      	adds	r0, r7, #1
 8003e94:	d1d6      	bne.n	8003e44 <_vfiprintf_r+0x1bc>
 8003e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e98:	07d9      	lsls	r1, r3, #31
 8003e9a:	d405      	bmi.n	8003ea8 <_vfiprintf_r+0x220>
 8003e9c:	89ab      	ldrh	r3, [r5, #12]
 8003e9e:	059a      	lsls	r2, r3, #22
 8003ea0:	d402      	bmi.n	8003ea8 <_vfiprintf_r+0x220>
 8003ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea4:	f7ff fe31 	bl	8003b0a <__retarget_lock_release_recursive>
 8003ea8:	89ab      	ldrh	r3, [r5, #12]
 8003eaa:	065b      	lsls	r3, r3, #25
 8003eac:	f53f af12 	bmi.w	8003cd4 <_vfiprintf_r+0x4c>
 8003eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eb2:	e711      	b.n	8003cd8 <_vfiprintf_r+0x50>
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <_vfiprintf_r+0x258>)
 8003ebc:	a904      	add	r1, sp, #16
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f000 f880 	bl	8003fc4 <_printf_i>
 8003ec4:	e7e4      	b.n	8003e90 <_vfiprintf_r+0x208>
 8003ec6:	bf00      	nop
 8003ec8:	080048a0 	.word	0x080048a0
 8003ecc:	080048c0 	.word	0x080048c0
 8003ed0:	08004880 	.word	0x08004880
 8003ed4:	080048e0 	.word	0x080048e0
 8003ed8:	080048ea 	.word	0x080048ea
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	08003c63 	.word	0x08003c63
 8003ee4:	080048e6 	.word	0x080048e6

08003ee8 <_printf_common>:
 8003ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	4616      	mov	r6, r2
 8003eee:	4699      	mov	r9, r3
 8003ef0:	688a      	ldr	r2, [r1, #8]
 8003ef2:	690b      	ldr	r3, [r1, #16]
 8003ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bfb8      	it	lt
 8003efc:	4613      	movlt	r3, r2
 8003efe:	6033      	str	r3, [r6, #0]
 8003f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f04:	4607      	mov	r7, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	b10a      	cbz	r2, 8003f0e <_printf_common+0x26>
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	0699      	lsls	r1, r3, #26
 8003f12:	bf42      	ittt	mi
 8003f14:	6833      	ldrmi	r3, [r6, #0]
 8003f16:	3302      	addmi	r3, #2
 8003f18:	6033      	strmi	r3, [r6, #0]
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	f015 0506 	ands.w	r5, r5, #6
 8003f20:	d106      	bne.n	8003f30 <_printf_common+0x48>
 8003f22:	f104 0a19 	add.w	sl, r4, #25
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dc26      	bgt.n	8003f7e <_printf_common+0x96>
 8003f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f34:	1e13      	subs	r3, r2, #0
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	bf18      	it	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	0692      	lsls	r2, r2, #26
 8003f3e:	d42b      	bmi.n	8003f98 <_printf_common+0xb0>
 8003f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f44:	4649      	mov	r1, r9
 8003f46:	4638      	mov	r0, r7
 8003f48:	47c0      	blx	r8
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d01e      	beq.n	8003f8c <_printf_common+0xa4>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	68e5      	ldr	r5, [r4, #12]
 8003f52:	6832      	ldr	r2, [r6, #0]
 8003f54:	f003 0306 	and.w	r3, r3, #6
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	bf08      	it	eq
 8003f5c:	1aad      	subeq	r5, r5, r2
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	6922      	ldr	r2, [r4, #16]
 8003f62:	bf0c      	ite	eq
 8003f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f68:	2500      	movne	r5, #0
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	bfc4      	itt	gt
 8003f6e:	1a9b      	subgt	r3, r3, r2
 8003f70:	18ed      	addgt	r5, r5, r3
 8003f72:	2600      	movs	r6, #0
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xc8>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xa8>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4649      	mov	r1, r9
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c0      	blx	r8
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xac>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c6      	b.n	8003f26 <_printf_common+0x3e>
 8003f98:	18e1      	adds	r1, r4, r3
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	2030      	movs	r0, #48	; 0x30
 8003f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa2:	4422      	add	r2, r4
 8003fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fac:	3302      	adds	r3, #2
 8003fae:	e7c7      	b.n	8003f40 <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa4>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x8e>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4691      	mov	r9, r2
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	469a      	mov	sl, r3
 8003fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d8 	beq.w	8004196 <_printf_i+0x1d2>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80a3 	beq.w	8004132 <_printf_i+0x16e>
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	; (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	0800417d 	.word	0x0800417d
 8004034:	080040a1 	.word	0x080040a1
 8004038:	0800415f 	.word	0x0800415f
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	0800419f 	.word	0x0800419f
 8004048:	08003fed 	.word	0x08003fed
 800404c:	080040a1 	.word	0x080040a1
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004167 	.word	0x08004167
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e0a3      	b.n	80041b8 <_printf_i+0x1f4>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	6829      	ldr	r1, [r5, #0]
 8004074:	0606      	lsls	r6, r0, #24
 8004076:	f101 0304 	add.w	r3, r1, #4
 800407a:	d50a      	bpl.n	8004092 <_printf_i+0xce>
 800407c:	680e      	ldr	r6, [r1, #0]
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	2e00      	cmp	r6, #0
 8004082:	da03      	bge.n	800408c <_printf_i+0xc8>
 8004084:	232d      	movs	r3, #45	; 0x2d
 8004086:	4276      	negs	r6, r6
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	485e      	ldr	r0, [pc, #376]	; (8004208 <_printf_i+0x244>)
 800408e:	230a      	movs	r3, #10
 8004090:	e019      	b.n	80040c6 <_printf_i+0x102>
 8004092:	680e      	ldr	r6, [r1, #0]
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	f010 0f40 	tst.w	r0, #64	; 0x40
 800409a:	bf18      	it	ne
 800409c:	b236      	sxthne	r6, r6
 800409e:	e7ef      	b.n	8004080 <_printf_i+0xbc>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	6029      	str	r1, [r5, #0]
 80040a8:	0601      	lsls	r1, r0, #24
 80040aa:	d501      	bpl.n	80040b0 <_printf_i+0xec>
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <_printf_i+0xf2>
 80040b0:	0646      	lsls	r6, r0, #25
 80040b2:	d5fb      	bpl.n	80040ac <_printf_i+0xe8>
 80040b4:	881e      	ldrh	r6, [r3, #0]
 80040b6:	4854      	ldr	r0, [pc, #336]	; (8004208 <_printf_i+0x244>)
 80040b8:	2f6f      	cmp	r7, #111	; 0x6f
 80040ba:	bf0c      	ite	eq
 80040bc:	2308      	moveq	r3, #8
 80040be:	230a      	movne	r3, #10
 80040c0:	2100      	movs	r1, #0
 80040c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c6:	6865      	ldr	r5, [r4, #4]
 80040c8:	60a5      	str	r5, [r4, #8]
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	bfa2      	ittt	ge
 80040ce:	6821      	ldrge	r1, [r4, #0]
 80040d0:	f021 0104 	bicge.w	r1, r1, #4
 80040d4:	6021      	strge	r1, [r4, #0]
 80040d6:	b90e      	cbnz	r6, 80040dc <_printf_i+0x118>
 80040d8:	2d00      	cmp	r5, #0
 80040da:	d04d      	beq.n	8004178 <_printf_i+0x1b4>
 80040dc:	4615      	mov	r5, r2
 80040de:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e2:	fb03 6711 	mls	r7, r3, r1, r6
 80040e6:	5dc7      	ldrb	r7, [r0, r7]
 80040e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ec:	4637      	mov	r7, r6
 80040ee:	42bb      	cmp	r3, r7
 80040f0:	460e      	mov	r6, r1
 80040f2:	d9f4      	bls.n	80040de <_printf_i+0x11a>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d10b      	bne.n	8004110 <_printf_i+0x14c>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	07de      	lsls	r6, r3, #31
 80040fc:	d508      	bpl.n	8004110 <_printf_i+0x14c>
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	6861      	ldr	r1, [r4, #4]
 8004102:	4299      	cmp	r1, r3
 8004104:	bfde      	ittt	le
 8004106:	2330      	movle	r3, #48	; 0x30
 8004108:	f805 3c01 	strble.w	r3, [r5, #-1]
 800410c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004110:	1b52      	subs	r2, r2, r5
 8004112:	6122      	str	r2, [r4, #16]
 8004114:	f8cd a000 	str.w	sl, [sp]
 8004118:	464b      	mov	r3, r9
 800411a:	aa03      	add	r2, sp, #12
 800411c:	4621      	mov	r1, r4
 800411e:	4640      	mov	r0, r8
 8004120:	f7ff fee2 	bl	8003ee8 <_printf_common>
 8004124:	3001      	adds	r0, #1
 8004126:	d14c      	bne.n	80041c2 <_printf_i+0x1fe>
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	b004      	add	sp, #16
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004132:	4835      	ldr	r0, [pc, #212]	; (8004208 <_printf_i+0x244>)
 8004134:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004138:	6829      	ldr	r1, [r5, #0]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004140:	6029      	str	r1, [r5, #0]
 8004142:	061d      	lsls	r5, r3, #24
 8004144:	d514      	bpl.n	8004170 <_printf_i+0x1ac>
 8004146:	07df      	lsls	r7, r3, #31
 8004148:	bf44      	itt	mi
 800414a:	f043 0320 	orrmi.w	r3, r3, #32
 800414e:	6023      	strmi	r3, [r4, #0]
 8004150:	b91e      	cbnz	r6, 800415a <_printf_i+0x196>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	f023 0320 	bic.w	r3, r3, #32
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	2310      	movs	r3, #16
 800415c:	e7b0      	b.n	80040c0 <_printf_i+0xfc>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	f043 0320 	orr.w	r3, r3, #32
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	2378      	movs	r3, #120	; 0x78
 8004168:	4828      	ldr	r0, [pc, #160]	; (800420c <_printf_i+0x248>)
 800416a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800416e:	e7e3      	b.n	8004138 <_printf_i+0x174>
 8004170:	0659      	lsls	r1, r3, #25
 8004172:	bf48      	it	mi
 8004174:	b2b6      	uxthmi	r6, r6
 8004176:	e7e6      	b.n	8004146 <_printf_i+0x182>
 8004178:	4615      	mov	r5, r2
 800417a:	e7bb      	b.n	80040f4 <_printf_i+0x130>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	6826      	ldr	r6, [r4, #0]
 8004180:	6961      	ldr	r1, [r4, #20]
 8004182:	1d18      	adds	r0, r3, #4
 8004184:	6028      	str	r0, [r5, #0]
 8004186:	0635      	lsls	r5, r6, #24
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	d501      	bpl.n	8004190 <_printf_i+0x1cc>
 800418c:	6019      	str	r1, [r3, #0]
 800418e:	e002      	b.n	8004196 <_printf_i+0x1d2>
 8004190:	0670      	lsls	r0, r6, #25
 8004192:	d5fb      	bpl.n	800418c <_printf_i+0x1c8>
 8004194:	8019      	strh	r1, [r3, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	4615      	mov	r5, r2
 800419c:	e7ba      	b.n	8004114 <_printf_i+0x150>
 800419e:	682b      	ldr	r3, [r5, #0]
 80041a0:	1d1a      	adds	r2, r3, #4
 80041a2:	602a      	str	r2, [r5, #0]
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4628      	mov	r0, r5
 80041ac:	f7fc f810 	bl	80001d0 <memchr>
 80041b0:	b108      	cbz	r0, 80041b6 <_printf_i+0x1f2>
 80041b2:	1b40      	subs	r0, r0, r5
 80041b4:	6060      	str	r0, [r4, #4]
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	2300      	movs	r3, #0
 80041bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c0:	e7a8      	b.n	8004114 <_printf_i+0x150>
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	462a      	mov	r2, r5
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	47d0      	blx	sl
 80041cc:	3001      	adds	r0, #1
 80041ce:	d0ab      	beq.n	8004128 <_printf_i+0x164>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	079b      	lsls	r3, r3, #30
 80041d4:	d413      	bmi.n	80041fe <_printf_i+0x23a>
 80041d6:	68e0      	ldr	r0, [r4, #12]
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	4298      	cmp	r0, r3
 80041dc:	bfb8      	it	lt
 80041de:	4618      	movlt	r0, r3
 80041e0:	e7a4      	b.n	800412c <_printf_i+0x168>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4632      	mov	r2, r6
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	47d0      	blx	sl
 80041ec:	3001      	adds	r0, #1
 80041ee:	d09b      	beq.n	8004128 <_printf_i+0x164>
 80041f0:	3501      	adds	r5, #1
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	9903      	ldr	r1, [sp, #12]
 80041f6:	1a5b      	subs	r3, r3, r1
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	dcf2      	bgt.n	80041e2 <_printf_i+0x21e>
 80041fc:	e7eb      	b.n	80041d6 <_printf_i+0x212>
 80041fe:	2500      	movs	r5, #0
 8004200:	f104 0619 	add.w	r6, r4, #25
 8004204:	e7f5      	b.n	80041f2 <_printf_i+0x22e>
 8004206:	bf00      	nop
 8004208:	080048f1 	.word	0x080048f1
 800420c:	08004902 	.word	0x08004902

08004210 <_sbrk_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d06      	ldr	r5, [pc, #24]	; (800422c <_sbrk_r+0x1c>)
 8004214:	2300      	movs	r3, #0
 8004216:	4604      	mov	r4, r0
 8004218:	4608      	mov	r0, r1
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	f7fc fd5a 	bl	8000cd4 <_sbrk>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_sbrk_r+0x1a>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	b103      	cbz	r3, 800422a <_sbrk_r+0x1a>
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	2000018c 	.word	0x2000018c

08004230 <__sread>:
 8004230:	b510      	push	{r4, lr}
 8004232:	460c      	mov	r4, r1
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	f000 fab2 	bl	80047a0 <_read_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	bfab      	itete	ge
 8004240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004242:	89a3      	ldrhlt	r3, [r4, #12]
 8004244:	181b      	addge	r3, r3, r0
 8004246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800424a:	bfac      	ite	ge
 800424c:	6563      	strge	r3, [r4, #84]	; 0x54
 800424e:	81a3      	strhlt	r3, [r4, #12]
 8004250:	bd10      	pop	{r4, pc}

08004252 <__swrite>:
 8004252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004256:	461f      	mov	r7, r3
 8004258:	898b      	ldrh	r3, [r1, #12]
 800425a:	05db      	lsls	r3, r3, #23
 800425c:	4605      	mov	r5, r0
 800425e:	460c      	mov	r4, r1
 8004260:	4616      	mov	r6, r2
 8004262:	d505      	bpl.n	8004270 <__swrite+0x1e>
 8004264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004268:	2302      	movs	r3, #2
 800426a:	2200      	movs	r2, #0
 800426c:	f000 f9c8 	bl	8004600 <_lseek_r>
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800427a:	81a3      	strh	r3, [r4, #12]
 800427c:	4632      	mov	r2, r6
 800427e:	463b      	mov	r3, r7
 8004280:	4628      	mov	r0, r5
 8004282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004286:	f000 b869 	b.w	800435c <_write_r>

0800428a <__sseek>:
 800428a:	b510      	push	{r4, lr}
 800428c:	460c      	mov	r4, r1
 800428e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004292:	f000 f9b5 	bl	8004600 <_lseek_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	bf15      	itete	ne
 800429c:	6560      	strne	r0, [r4, #84]	; 0x54
 800429e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042a6:	81a3      	strheq	r3, [r4, #12]
 80042a8:	bf18      	it	ne
 80042aa:	81a3      	strhne	r3, [r4, #12]
 80042ac:	bd10      	pop	{r4, pc}

080042ae <__sclose>:
 80042ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b2:	f000 b8d3 	b.w	800445c <_close_r>
	...

080042b8 <__swbuf_r>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	460e      	mov	r6, r1
 80042bc:	4614      	mov	r4, r2
 80042be:	4605      	mov	r5, r0
 80042c0:	b118      	cbz	r0, 80042ca <__swbuf_r+0x12>
 80042c2:	6983      	ldr	r3, [r0, #24]
 80042c4:	b90b      	cbnz	r3, 80042ca <__swbuf_r+0x12>
 80042c6:	f7ff fb81 	bl	80039cc <__sinit>
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <__swbuf_r+0x98>)
 80042cc:	429c      	cmp	r4, r3
 80042ce:	d12b      	bne.n	8004328 <__swbuf_r+0x70>
 80042d0:	686c      	ldr	r4, [r5, #4]
 80042d2:	69a3      	ldr	r3, [r4, #24]
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	071a      	lsls	r2, r3, #28
 80042da:	d52f      	bpl.n	800433c <__swbuf_r+0x84>
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	b36b      	cbz	r3, 800433c <__swbuf_r+0x84>
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	6820      	ldr	r0, [r4, #0]
 80042e4:	1ac0      	subs	r0, r0, r3
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	b2f6      	uxtb	r6, r6
 80042ea:	4283      	cmp	r3, r0
 80042ec:	4637      	mov	r7, r6
 80042ee:	dc04      	bgt.n	80042fa <__swbuf_r+0x42>
 80042f0:	4621      	mov	r1, r4
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 f948 	bl	8004588 <_fflush_r>
 80042f8:	bb30      	cbnz	r0, 8004348 <__swbuf_r+0x90>
 80042fa:	68a3      	ldr	r3, [r4, #8]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60a3      	str	r3, [r4, #8]
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	6022      	str	r2, [r4, #0]
 8004306:	701e      	strb	r6, [r3, #0]
 8004308:	6963      	ldr	r3, [r4, #20]
 800430a:	3001      	adds	r0, #1
 800430c:	4283      	cmp	r3, r0
 800430e:	d004      	beq.n	800431a <__swbuf_r+0x62>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	07db      	lsls	r3, r3, #31
 8004314:	d506      	bpl.n	8004324 <__swbuf_r+0x6c>
 8004316:	2e0a      	cmp	r6, #10
 8004318:	d104      	bne.n	8004324 <__swbuf_r+0x6c>
 800431a:	4621      	mov	r1, r4
 800431c:	4628      	mov	r0, r5
 800431e:	f000 f933 	bl	8004588 <_fflush_r>
 8004322:	b988      	cbnz	r0, 8004348 <__swbuf_r+0x90>
 8004324:	4638      	mov	r0, r7
 8004326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <__swbuf_r+0x9c>)
 800432a:	429c      	cmp	r4, r3
 800432c:	d101      	bne.n	8004332 <__swbuf_r+0x7a>
 800432e:	68ac      	ldr	r4, [r5, #8]
 8004330:	e7cf      	b.n	80042d2 <__swbuf_r+0x1a>
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <__swbuf_r+0xa0>)
 8004334:	429c      	cmp	r4, r3
 8004336:	bf08      	it	eq
 8004338:	68ec      	ldreq	r4, [r5, #12]
 800433a:	e7ca      	b.n	80042d2 <__swbuf_r+0x1a>
 800433c:	4621      	mov	r1, r4
 800433e:	4628      	mov	r0, r5
 8004340:	f000 f81e 	bl	8004380 <__swsetup_r>
 8004344:	2800      	cmp	r0, #0
 8004346:	d0cb      	beq.n	80042e0 <__swbuf_r+0x28>
 8004348:	f04f 37ff 	mov.w	r7, #4294967295
 800434c:	e7ea      	b.n	8004324 <__swbuf_r+0x6c>
 800434e:	bf00      	nop
 8004350:	080048a0 	.word	0x080048a0
 8004354:	080048c0 	.word	0x080048c0
 8004358:	08004880 	.word	0x08004880

0800435c <_write_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d07      	ldr	r5, [pc, #28]	; (800437c <_write_r+0x20>)
 8004360:	4604      	mov	r4, r0
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	2200      	movs	r2, #0
 8004368:	602a      	str	r2, [r5, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f7fc fc61 	bl	8000c32 <_write>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_write_r+0x1e>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b103      	cbz	r3, 800437a <_write_r+0x1e>
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	2000018c 	.word	0x2000018c

08004380 <__swsetup_r>:
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <__swsetup_r+0xcc>)
 8004382:	b570      	push	{r4, r5, r6, lr}
 8004384:	681d      	ldr	r5, [r3, #0]
 8004386:	4606      	mov	r6, r0
 8004388:	460c      	mov	r4, r1
 800438a:	b125      	cbz	r5, 8004396 <__swsetup_r+0x16>
 800438c:	69ab      	ldr	r3, [r5, #24]
 800438e:	b913      	cbnz	r3, 8004396 <__swsetup_r+0x16>
 8004390:	4628      	mov	r0, r5
 8004392:	f7ff fb1b 	bl	80039cc <__sinit>
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <__swsetup_r+0xd0>)
 8004398:	429c      	cmp	r4, r3
 800439a:	d10f      	bne.n	80043bc <__swsetup_r+0x3c>
 800439c:	686c      	ldr	r4, [r5, #4]
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043a4:	0719      	lsls	r1, r3, #28
 80043a6:	d42c      	bmi.n	8004402 <__swsetup_r+0x82>
 80043a8:	06dd      	lsls	r5, r3, #27
 80043aa:	d411      	bmi.n	80043d0 <__swsetup_r+0x50>
 80043ac:	2309      	movs	r3, #9
 80043ae:	6033      	str	r3, [r6, #0]
 80043b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ba:	e03e      	b.n	800443a <__swsetup_r+0xba>
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <__swsetup_r+0xd4>)
 80043be:	429c      	cmp	r4, r3
 80043c0:	d101      	bne.n	80043c6 <__swsetup_r+0x46>
 80043c2:	68ac      	ldr	r4, [r5, #8]
 80043c4:	e7eb      	b.n	800439e <__swsetup_r+0x1e>
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <__swsetup_r+0xd8>)
 80043c8:	429c      	cmp	r4, r3
 80043ca:	bf08      	it	eq
 80043cc:	68ec      	ldreq	r4, [r5, #12]
 80043ce:	e7e6      	b.n	800439e <__swsetup_r+0x1e>
 80043d0:	0758      	lsls	r0, r3, #29
 80043d2:	d512      	bpl.n	80043fa <__swsetup_r+0x7a>
 80043d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043d6:	b141      	cbz	r1, 80043ea <__swsetup_r+0x6a>
 80043d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043dc:	4299      	cmp	r1, r3
 80043de:	d002      	beq.n	80043e6 <__swsetup_r+0x66>
 80043e0:	4630      	mov	r0, r6
 80043e2:	f000 f991 	bl	8004708 <_free_r>
 80043e6:	2300      	movs	r3, #0
 80043e8:	6363      	str	r3, [r4, #52]	; 0x34
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	2300      	movs	r3, #0
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f043 0308 	orr.w	r3, r3, #8
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	b94b      	cbnz	r3, 800441a <__swsetup_r+0x9a>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800440c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004410:	d003      	beq.n	800441a <__swsetup_r+0x9a>
 8004412:	4621      	mov	r1, r4
 8004414:	4630      	mov	r0, r6
 8004416:	f000 f92b 	bl	8004670 <__smakebuf_r>
 800441a:	89a0      	ldrh	r0, [r4, #12]
 800441c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004420:	f010 0301 	ands.w	r3, r0, #1
 8004424:	d00a      	beq.n	800443c <__swsetup_r+0xbc>
 8004426:	2300      	movs	r3, #0
 8004428:	60a3      	str	r3, [r4, #8]
 800442a:	6963      	ldr	r3, [r4, #20]
 800442c:	425b      	negs	r3, r3
 800442e:	61a3      	str	r3, [r4, #24]
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	b943      	cbnz	r3, 8004446 <__swsetup_r+0xc6>
 8004434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004438:	d1ba      	bne.n	80043b0 <__swsetup_r+0x30>
 800443a:	bd70      	pop	{r4, r5, r6, pc}
 800443c:	0781      	lsls	r1, r0, #30
 800443e:	bf58      	it	pl
 8004440:	6963      	ldrpl	r3, [r4, #20]
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	e7f4      	b.n	8004430 <__swsetup_r+0xb0>
 8004446:	2000      	movs	r0, #0
 8004448:	e7f7      	b.n	800443a <__swsetup_r+0xba>
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c
 8004450:	080048a0 	.word	0x080048a0
 8004454:	080048c0 	.word	0x080048c0
 8004458:	08004880 	.word	0x08004880

0800445c <_close_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	; (8004478 <_close_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc fbff 	bl	8000c6a <_close>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_close_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_close_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	2000018c 	.word	0x2000018c

0800447c <__sflush_r>:
 800447c:	898a      	ldrh	r2, [r1, #12]
 800447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	4605      	mov	r5, r0
 8004484:	0710      	lsls	r0, r2, #28
 8004486:	460c      	mov	r4, r1
 8004488:	d458      	bmi.n	800453c <__sflush_r+0xc0>
 800448a:	684b      	ldr	r3, [r1, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	dc05      	bgt.n	800449c <__sflush_r+0x20>
 8004490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	dc02      	bgt.n	800449c <__sflush_r+0x20>
 8004496:	2000      	movs	r0, #0
 8004498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800449c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800449e:	2e00      	cmp	r6, #0
 80044a0:	d0f9      	beq.n	8004496 <__sflush_r+0x1a>
 80044a2:	2300      	movs	r3, #0
 80044a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044a8:	682f      	ldr	r7, [r5, #0]
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	d032      	beq.n	8004514 <__sflush_r+0x98>
 80044ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	075a      	lsls	r2, r3, #29
 80044b4:	d505      	bpl.n	80044c2 <__sflush_r+0x46>
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	1ac0      	subs	r0, r0, r3
 80044ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044bc:	b10b      	cbz	r3, 80044c2 <__sflush_r+0x46>
 80044be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044c0:	1ac0      	subs	r0, r0, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	4602      	mov	r2, r0
 80044c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c8:	6a21      	ldr	r1, [r4, #32]
 80044ca:	4628      	mov	r0, r5
 80044cc:	47b0      	blx	r6
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	d106      	bne.n	80044e2 <__sflush_r+0x66>
 80044d4:	6829      	ldr	r1, [r5, #0]
 80044d6:	291d      	cmp	r1, #29
 80044d8:	d82c      	bhi.n	8004534 <__sflush_r+0xb8>
 80044da:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <__sflush_r+0x108>)
 80044dc:	40ca      	lsrs	r2, r1
 80044de:	07d6      	lsls	r6, r2, #31
 80044e0:	d528      	bpl.n	8004534 <__sflush_r+0xb8>
 80044e2:	2200      	movs	r2, #0
 80044e4:	6062      	str	r2, [r4, #4]
 80044e6:	04d9      	lsls	r1, r3, #19
 80044e8:	6922      	ldr	r2, [r4, #16]
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	d504      	bpl.n	80044f8 <__sflush_r+0x7c>
 80044ee:	1c42      	adds	r2, r0, #1
 80044f0:	d101      	bne.n	80044f6 <__sflush_r+0x7a>
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	b903      	cbnz	r3, 80044f8 <__sflush_r+0x7c>
 80044f6:	6560      	str	r0, [r4, #84]	; 0x54
 80044f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044fa:	602f      	str	r7, [r5, #0]
 80044fc:	2900      	cmp	r1, #0
 80044fe:	d0ca      	beq.n	8004496 <__sflush_r+0x1a>
 8004500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004504:	4299      	cmp	r1, r3
 8004506:	d002      	beq.n	800450e <__sflush_r+0x92>
 8004508:	4628      	mov	r0, r5
 800450a:	f000 f8fd 	bl	8004708 <_free_r>
 800450e:	2000      	movs	r0, #0
 8004510:	6360      	str	r0, [r4, #52]	; 0x34
 8004512:	e7c1      	b.n	8004498 <__sflush_r+0x1c>
 8004514:	6a21      	ldr	r1, [r4, #32]
 8004516:	2301      	movs	r3, #1
 8004518:	4628      	mov	r0, r5
 800451a:	47b0      	blx	r6
 800451c:	1c41      	adds	r1, r0, #1
 800451e:	d1c7      	bne.n	80044b0 <__sflush_r+0x34>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0c4      	beq.n	80044b0 <__sflush_r+0x34>
 8004526:	2b1d      	cmp	r3, #29
 8004528:	d001      	beq.n	800452e <__sflush_r+0xb2>
 800452a:	2b16      	cmp	r3, #22
 800452c:	d101      	bne.n	8004532 <__sflush_r+0xb6>
 800452e:	602f      	str	r7, [r5, #0]
 8004530:	e7b1      	b.n	8004496 <__sflush_r+0x1a>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	e7ad      	b.n	8004498 <__sflush_r+0x1c>
 800453c:	690f      	ldr	r7, [r1, #16]
 800453e:	2f00      	cmp	r7, #0
 8004540:	d0a9      	beq.n	8004496 <__sflush_r+0x1a>
 8004542:	0793      	lsls	r3, r2, #30
 8004544:	680e      	ldr	r6, [r1, #0]
 8004546:	bf08      	it	eq
 8004548:	694b      	ldreq	r3, [r1, #20]
 800454a:	600f      	str	r7, [r1, #0]
 800454c:	bf18      	it	ne
 800454e:	2300      	movne	r3, #0
 8004550:	eba6 0807 	sub.w	r8, r6, r7
 8004554:	608b      	str	r3, [r1, #8]
 8004556:	f1b8 0f00 	cmp.w	r8, #0
 800455a:	dd9c      	ble.n	8004496 <__sflush_r+0x1a>
 800455c:	6a21      	ldr	r1, [r4, #32]
 800455e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004560:	4643      	mov	r3, r8
 8004562:	463a      	mov	r2, r7
 8004564:	4628      	mov	r0, r5
 8004566:	47b0      	blx	r6
 8004568:	2800      	cmp	r0, #0
 800456a:	dc06      	bgt.n	800457a <__sflush_r+0xfe>
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e78e      	b.n	8004498 <__sflush_r+0x1c>
 800457a:	4407      	add	r7, r0
 800457c:	eba8 0800 	sub.w	r8, r8, r0
 8004580:	e7e9      	b.n	8004556 <__sflush_r+0xda>
 8004582:	bf00      	nop
 8004584:	20400001 	.word	0x20400001

08004588 <_fflush_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	690b      	ldr	r3, [r1, #16]
 800458c:	4605      	mov	r5, r0
 800458e:	460c      	mov	r4, r1
 8004590:	b913      	cbnz	r3, 8004598 <_fflush_r+0x10>
 8004592:	2500      	movs	r5, #0
 8004594:	4628      	mov	r0, r5
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	b118      	cbz	r0, 80045a2 <_fflush_r+0x1a>
 800459a:	6983      	ldr	r3, [r0, #24]
 800459c:	b90b      	cbnz	r3, 80045a2 <_fflush_r+0x1a>
 800459e:	f7ff fa15 	bl	80039cc <__sinit>
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <_fflush_r+0x6c>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	d11b      	bne.n	80045e0 <_fflush_r+0x58>
 80045a8:	686c      	ldr	r4, [r5, #4]
 80045aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ef      	beq.n	8004592 <_fflush_r+0xa>
 80045b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045b4:	07d0      	lsls	r0, r2, #31
 80045b6:	d404      	bmi.n	80045c2 <_fflush_r+0x3a>
 80045b8:	0599      	lsls	r1, r3, #22
 80045ba:	d402      	bmi.n	80045c2 <_fflush_r+0x3a>
 80045bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045be:	f7ff faa3 	bl	8003b08 <__retarget_lock_acquire_recursive>
 80045c2:	4628      	mov	r0, r5
 80045c4:	4621      	mov	r1, r4
 80045c6:	f7ff ff59 	bl	800447c <__sflush_r>
 80045ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045cc:	07da      	lsls	r2, r3, #31
 80045ce:	4605      	mov	r5, r0
 80045d0:	d4e0      	bmi.n	8004594 <_fflush_r+0xc>
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	059b      	lsls	r3, r3, #22
 80045d6:	d4dd      	bmi.n	8004594 <_fflush_r+0xc>
 80045d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045da:	f7ff fa96 	bl	8003b0a <__retarget_lock_release_recursive>
 80045de:	e7d9      	b.n	8004594 <_fflush_r+0xc>
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <_fflush_r+0x70>)
 80045e2:	429c      	cmp	r4, r3
 80045e4:	d101      	bne.n	80045ea <_fflush_r+0x62>
 80045e6:	68ac      	ldr	r4, [r5, #8]
 80045e8:	e7df      	b.n	80045aa <_fflush_r+0x22>
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <_fflush_r+0x74>)
 80045ec:	429c      	cmp	r4, r3
 80045ee:	bf08      	it	eq
 80045f0:	68ec      	ldreq	r4, [r5, #12]
 80045f2:	e7da      	b.n	80045aa <_fflush_r+0x22>
 80045f4:	080048a0 	.word	0x080048a0
 80045f8:	080048c0 	.word	0x080048c0
 80045fc:	08004880 	.word	0x08004880

08004600 <_lseek_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d07      	ldr	r5, [pc, #28]	; (8004620 <_lseek_r+0x20>)
 8004604:	4604      	mov	r4, r0
 8004606:	4608      	mov	r0, r1
 8004608:	4611      	mov	r1, r2
 800460a:	2200      	movs	r2, #0
 800460c:	602a      	str	r2, [r5, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f7fc fb52 	bl	8000cb8 <_lseek>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_lseek_r+0x1e>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_lseek_r+0x1e>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	2000018c 	.word	0x2000018c

08004624 <__swhatbuf_r>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	460e      	mov	r6, r1
 8004628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462c:	2900      	cmp	r1, #0
 800462e:	b096      	sub	sp, #88	; 0x58
 8004630:	4614      	mov	r4, r2
 8004632:	461d      	mov	r5, r3
 8004634:	da08      	bge.n	8004648 <__swhatbuf_r+0x24>
 8004636:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	061a      	lsls	r2, r3, #24
 8004640:	d410      	bmi.n	8004664 <__swhatbuf_r+0x40>
 8004642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004646:	e00e      	b.n	8004666 <__swhatbuf_r+0x42>
 8004648:	466a      	mov	r2, sp
 800464a:	f000 f8bb 	bl	80047c4 <_fstat_r>
 800464e:	2800      	cmp	r0, #0
 8004650:	dbf1      	blt.n	8004636 <__swhatbuf_r+0x12>
 8004652:	9a01      	ldr	r2, [sp, #4]
 8004654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800465c:	425a      	negs	r2, r3
 800465e:	415a      	adcs	r2, r3
 8004660:	602a      	str	r2, [r5, #0]
 8004662:	e7ee      	b.n	8004642 <__swhatbuf_r+0x1e>
 8004664:	2340      	movs	r3, #64	; 0x40
 8004666:	2000      	movs	r0, #0
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	b016      	add	sp, #88	; 0x58
 800466c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004670 <__smakebuf_r>:
 8004670:	898b      	ldrh	r3, [r1, #12]
 8004672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004674:	079d      	lsls	r5, r3, #30
 8004676:	4606      	mov	r6, r0
 8004678:	460c      	mov	r4, r1
 800467a:	d507      	bpl.n	800468c <__smakebuf_r+0x1c>
 800467c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	2301      	movs	r3, #1
 8004686:	6163      	str	r3, [r4, #20]
 8004688:	b002      	add	sp, #8
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	ab01      	add	r3, sp, #4
 800468e:	466a      	mov	r2, sp
 8004690:	f7ff ffc8 	bl	8004624 <__swhatbuf_r>
 8004694:	9900      	ldr	r1, [sp, #0]
 8004696:	4605      	mov	r5, r0
 8004698:	4630      	mov	r0, r6
 800469a:	f7ff fa57 	bl	8003b4c <_malloc_r>
 800469e:	b948      	cbnz	r0, 80046b4 <__smakebuf_r+0x44>
 80046a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a4:	059a      	lsls	r2, r3, #22
 80046a6:	d4ef      	bmi.n	8004688 <__smakebuf_r+0x18>
 80046a8:	f023 0303 	bic.w	r3, r3, #3
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	e7e3      	b.n	800467c <__smakebuf_r+0xc>
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <__smakebuf_r+0x7c>)
 80046b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	6020      	str	r0, [r4, #0]
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	9b00      	ldr	r3, [sp, #0]
 80046c4:	6163      	str	r3, [r4, #20]
 80046c6:	9b01      	ldr	r3, [sp, #4]
 80046c8:	6120      	str	r0, [r4, #16]
 80046ca:	b15b      	cbz	r3, 80046e4 <__smakebuf_r+0x74>
 80046cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d0:	4630      	mov	r0, r6
 80046d2:	f000 f889 	bl	80047e8 <_isatty_r>
 80046d6:	b128      	cbz	r0, 80046e4 <__smakebuf_r+0x74>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	89a0      	ldrh	r0, [r4, #12]
 80046e6:	4305      	orrs	r5, r0
 80046e8:	81a5      	strh	r5, [r4, #12]
 80046ea:	e7cd      	b.n	8004688 <__smakebuf_r+0x18>
 80046ec:	08003965 	.word	0x08003965

080046f0 <__malloc_lock>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__malloc_lock+0x8>)
 80046f2:	f7ff ba09 	b.w	8003b08 <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	20000180 	.word	0x20000180

080046fc <__malloc_unlock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__malloc_unlock+0x8>)
 80046fe:	f7ff ba04 	b.w	8003b0a <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	20000180 	.word	0x20000180

08004708 <_free_r>:
 8004708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800470a:	2900      	cmp	r1, #0
 800470c:	d044      	beq.n	8004798 <_free_r+0x90>
 800470e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004712:	9001      	str	r0, [sp, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f1a1 0404 	sub.w	r4, r1, #4
 800471a:	bfb8      	it	lt
 800471c:	18e4      	addlt	r4, r4, r3
 800471e:	f7ff ffe7 	bl	80046f0 <__malloc_lock>
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <_free_r+0x94>)
 8004724:	9801      	ldr	r0, [sp, #4]
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	b933      	cbnz	r3, 8004738 <_free_r+0x30>
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	6014      	str	r4, [r2, #0]
 800472e:	b003      	add	sp, #12
 8004730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004734:	f7ff bfe2 	b.w	80046fc <__malloc_unlock>
 8004738:	42a3      	cmp	r3, r4
 800473a:	d908      	bls.n	800474e <_free_r+0x46>
 800473c:	6825      	ldr	r5, [r4, #0]
 800473e:	1961      	adds	r1, r4, r5
 8004740:	428b      	cmp	r3, r1
 8004742:	bf01      	itttt	eq
 8004744:	6819      	ldreq	r1, [r3, #0]
 8004746:	685b      	ldreq	r3, [r3, #4]
 8004748:	1949      	addeq	r1, r1, r5
 800474a:	6021      	streq	r1, [r4, #0]
 800474c:	e7ed      	b.n	800472a <_free_r+0x22>
 800474e:	461a      	mov	r2, r3
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	b10b      	cbz	r3, 8004758 <_free_r+0x50>
 8004754:	42a3      	cmp	r3, r4
 8004756:	d9fa      	bls.n	800474e <_free_r+0x46>
 8004758:	6811      	ldr	r1, [r2, #0]
 800475a:	1855      	adds	r5, r2, r1
 800475c:	42a5      	cmp	r5, r4
 800475e:	d10b      	bne.n	8004778 <_free_r+0x70>
 8004760:	6824      	ldr	r4, [r4, #0]
 8004762:	4421      	add	r1, r4
 8004764:	1854      	adds	r4, r2, r1
 8004766:	42a3      	cmp	r3, r4
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	d1e0      	bne.n	800472e <_free_r+0x26>
 800476c:	681c      	ldr	r4, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	6053      	str	r3, [r2, #4]
 8004772:	4421      	add	r1, r4
 8004774:	6011      	str	r1, [r2, #0]
 8004776:	e7da      	b.n	800472e <_free_r+0x26>
 8004778:	d902      	bls.n	8004780 <_free_r+0x78>
 800477a:	230c      	movs	r3, #12
 800477c:	6003      	str	r3, [r0, #0]
 800477e:	e7d6      	b.n	800472e <_free_r+0x26>
 8004780:	6825      	ldr	r5, [r4, #0]
 8004782:	1961      	adds	r1, r4, r5
 8004784:	428b      	cmp	r3, r1
 8004786:	bf04      	itt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	6063      	str	r3, [r4, #4]
 800478e:	bf04      	itt	eq
 8004790:	1949      	addeq	r1, r1, r5
 8004792:	6021      	streq	r1, [r4, #0]
 8004794:	6054      	str	r4, [r2, #4]
 8004796:	e7ca      	b.n	800472e <_free_r+0x26>
 8004798:	b003      	add	sp, #12
 800479a:	bd30      	pop	{r4, r5, pc}
 800479c:	20000184 	.word	0x20000184

080047a0 <_read_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d07      	ldr	r5, [pc, #28]	; (80047c0 <_read_r+0x20>)
 80047a4:	4604      	mov	r4, r0
 80047a6:	4608      	mov	r0, r1
 80047a8:	4611      	mov	r1, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	602a      	str	r2, [r5, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f7fc fa22 	bl	8000bf8 <_read>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_read_r+0x1e>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_read_r+0x1e>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	2000018c 	.word	0x2000018c

080047c4 <_fstat_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_fstat_r+0x20>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	f7fc fa56 	bl	8000c82 <_fstat>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d102      	bne.n	80047e0 <_fstat_r+0x1c>
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	b103      	cbz	r3, 80047e0 <_fstat_r+0x1c>
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	bf00      	nop
 80047e4:	2000018c 	.word	0x2000018c

080047e8 <_isatty_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d06      	ldr	r5, [pc, #24]	; (8004804 <_isatty_r+0x1c>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	f7fc fa55 	bl	8000ca2 <_isatty>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_isatty_r+0x1a>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_isatty_r+0x1a>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	2000018c 	.word	0x2000018c

08004808 <_init>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr

08004814 <_fini>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr
