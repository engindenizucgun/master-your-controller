
button_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e0  080034e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034e8  080034e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080034fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080034fc  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf7  00000000  00000000  0002fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000319d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000327e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022512  00000000  00000000  00033558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f910  00000000  00000000  00055a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d508c  00000000  00000000  0006537a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb0  00000000  00000000  0013a458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003480 	.word	0x08003480

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003480 	.word	0x08003480

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa64 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f807 	bl	80004ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8c8 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f896 	bl	8000610 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 f846 	bl	8000574 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>

080004ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b096      	sub	sp, #88	; 0x58
 80004ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2244      	movs	r2, #68	; 0x44
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f002 ffb9 	bl	8003470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000510:	f000 fd74 	bl	8000ffc <HAL_PWREx_ControlVoltageScaling>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051a:	f000 f929 	bl	8000770 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	2302      	movs	r3, #2
 8000520:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	2310      	movs	r3, #16
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052c:	2300      	movs	r3, #0
 800052e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fdb7 	bl	80010a8 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000540:	f000 f916 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000548:	2301      	movs	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f001 f9b7 	bl	80018d0 <HAL_RCC_ClockConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000568:	f000 f902 	bl	8000770 <Error_Handler>
  }
}
 800056c:	bf00      	nop
 800056e:	3758      	adds	r7, #88	; 0x58
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_TIM2_Init+0x98>)
 8000594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42015;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_TIM2_Init+0x98>)
 800059c:	f24a 421f 	movw	r2, #42015	; 0xa41f
 80005a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_TIM2_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_TIM2_Init+0x98>)
 80005aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_TIM2_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_TIM2_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <MX_TIM2_Init+0x98>)
 80005be:	f001 fee7 	bl	8002390 <HAL_TIM_Base_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005c8:	f000 f8d2 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_TIM2_Init+0x98>)
 80005da:	f002 f84f 	bl	800267c <HAL_TIM_ConfigClockSource>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80005e4:	f000 f8c4 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_TIM2_Init+0x98>)
 80005f6:	f002 fa3b 	bl	8002a70 <HAL_TIMEx_MasterConfigSynchronization>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000600:	f000 f8b6 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000028 	.word	0x20000028

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_USART2_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART2_UART_Init+0x58>)
 8000654:	f002 fa90 	bl	8002b78 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f887 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000074 	.word	0x20000074
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <MX_GPIO_Init+0xf8>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a37      	ldr	r2, [pc, #220]	; (8000768 <MX_GPIO_Init+0xf8>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_GPIO_Init+0xf8>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a31      	ldr	r2, [pc, #196]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a2b      	ldr	r2, [pc, #172]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xf8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	21b0      	movs	r1, #176	; 0xb0
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f000 fc5f 	bl	8000fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_GPIO_Init+0xfc>)
 800070a:	f000 fad7 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000712:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_GPIO_Init+0xfc>)
 8000724:	f000 faca 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000728:	23b0      	movs	r3, #176	; 0xb0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f000 fabb 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f000 faae 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	48000800 	.word	0x48000800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6613      	str	r3, [r2, #96]	; 0x60
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d4:	d113      	bne.n	80007fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	201c      	movs	r0, #28
 80007f4:	f000 fa2b 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007f8:	201c      	movs	r0, #28
 80007fa:	f000 fa44 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0a2      	sub	sp, #136	; 0x88
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2260      	movs	r2, #96	; 0x60
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fe1f 	bl	8003470 <memset>
  if(huart->Instance==USART2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <HAL_UART_MspInit+0xac>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d138      	bne.n	80008ae <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fa65 	bl	8001d18 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000854:	f7ff ff8c 	bl	8000770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_UART_MspInit+0xb0>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0xb0>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	6593      	str	r3, [r2, #88]	; 0x58
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0xb0>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_UART_MspInit+0xb0>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_UART_MspInit+0xb0>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_UART_MspInit+0xb0>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089a:	2307      	movs	r3, #7
 800089c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 fa07 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3788      	adds	r7, #136	; 0x88
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f8a4 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM2_IRQHandler+0x10>)
 800091a:	f001 fd90 	bl	800243e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000028 	.word	0x20000028

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 fd55 	bl	8003428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fda7 	bl	80004d0 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	080034f0 	.word	0x080034f0
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	200000fc 	.word	0x200000fc

0800099c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_Init+0x3c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <HAL_Init+0x3c>)
 80009b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 f93e 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f80f 	bl	80009e0 <HAL_InitTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f7ff fed5 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_InitTick+0x6c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d023      	beq.n	8000a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_InitTick+0x70>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_InitTick+0x6c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f949 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10f      	bne.n	8000a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d809      	bhi.n	8000a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f913 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_InitTick+0x74>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	e007      	b.n	8000a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e004      	b.n	8000a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e001      	b.n	8000a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200000f8 	.word	0x200000f8

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000f8 	.word	0x200000f8

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e154      	b.n	8000f76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8146 	beq.w	8000f70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x40>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	6939      	ldr	r1, [r7, #16]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80a0 	beq.w	8000f70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e34:	4a57      	ldr	r2, [pc, #348]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3c:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a53      	ldr	r2, [pc, #332]	; (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e72:	d019      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_GPIO_Init+0x2e0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2e4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <HAL_GPIO_Init+0x2e8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_GPIO_Init+0x2ec>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1dc>
 8000e94:	2304      	movs	r3, #4
 8000e96:	e008      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e98:	2307      	movs	r3, #7
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eba:	4937      	ldr	r1, [pc, #220]	; (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f40:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_GPIO_Init+0x2f0>)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f47f aea3 	bne.w	8000ccc <HAL_GPIO_Init+0x10>
  }
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000c00 	.word	0x48000c00
 8000fa8:	48001000 	.word	0x48001000
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800100a:	d130      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001018:	d038      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2232      	movs	r2, #50	; 0x32
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001040:	e002      	b.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001054:	d102      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f2      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001068:	d110      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e00f      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107a:	d007      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40007000 	.word	0x40007000
 80010a0:	20000000 	.word	0x20000000
 80010a4:	431bde83 	.word	0x431bde83

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f000 bc02 	b.w	80018c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010bc:	4b96      	ldr	r3, [pc, #600]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c6:	4b94      	ldr	r3, [pc, #592]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80e4 	beq.w	80012a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d007      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4c>
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2b0c      	cmp	r3, #12
 80010e8:	f040 808b 	bne.w	8001202 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	f040 8087 	bne.w	8001202 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f4:	4b88      	ldr	r3, [pc, #544]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_OscConfig+0x64>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e3d9      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	4b81      	ldr	r3, [pc, #516]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <HAL_RCC_OscConfig+0x7e>
 800111c:	4b7e      	ldr	r3, [pc, #504]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001124:	e005      	b.n	8001132 <HAL_RCC_OscConfig+0x8a>
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001132:	4293      	cmp	r3, r2
 8001134:	d223      	bcs.n	800117e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fd8c 	bl	8001c58 <RCC_SetFlashLatencyFromMSIRange>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e3ba      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114a:	4b73      	ldr	r3, [pc, #460]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a72      	ldr	r2, [pc, #456]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b70      	ldr	r3, [pc, #448]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	496d      	ldr	r1, [pc, #436]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	4968      	ldr	r1, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
 800117c:	e025      	b.n	80011ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a65      	ldr	r2, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4960      	ldr	r1, [pc, #384]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	495b      	ldr	r1, [pc, #364]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fd4c 	bl	8001c58 <RCC_SetFlashLatencyFromMSIRange>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e37a      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ca:	f000 fc81 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	4950      	ldr	r1, [pc, #320]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80011dc:	5ccb      	ldrb	r3, [r1, r3]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_RCC_OscConfig+0x278>)
 80011e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ea:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <HAL_RCC_OscConfig+0x27c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbf6 	bl	80009e0 <HAL_InitTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d052      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	e35e      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d032      	beq.n	8001270 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001216:	f7ff fc33 	bl	8000a80 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121e:	f7ff fc2f 	bl	8000a80 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e347      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a35      	ldr	r2, [pc, #212]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4930      	ldr	r1, [pc, #192]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	492b      	ldr	r1, [pc, #172]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
 800126e:	e01a      	b.n	80012a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800127c:	f7ff fc00 	bl	8000a80 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001284:	f7ff fbfc 	bl	8000a80 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e314      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1dc>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d073      	beq.n	800139a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_OscConfig+0x21c>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d10e      	bne.n	80012dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d10b      	bne.n	80012dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d063      	beq.n	8001398 <HAL_RCC_OscConfig+0x2f0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d15f      	bne.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e2f1      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d106      	bne.n	80012f4 <HAL_RCC_OscConfig+0x24c>
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e025      	b.n	8001340 <HAL_RCC_OscConfig+0x298>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d114      	bne.n	8001328 <HAL_RCC_OscConfig+0x280>
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a02      	ldr	r2, [pc, #8]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e013      	b.n	8001340 <HAL_RCC_OscConfig+0x298>
 8001318:	40021000 	.word	0x40021000
 800131c:	08003498 	.word	0x08003498
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004
 8001328:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a9f      	ldr	r2, [pc, #636]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b9d      	ldr	r3, [pc, #628]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a9c      	ldr	r2, [pc, #624]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb9a 	bl	8000a80 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fb96 	bl	8000a80 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e2ae      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001362:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x2a8>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb86 	bl	8000a80 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fb82 	bl	8000a80 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e29a      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d0>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d060      	beq.n	8001468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x310>
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d119      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d116      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b8:	4b7c      	ldr	r3, [pc, #496]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_OscConfig+0x328>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e277      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4973      	ldr	r1, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e4:	e040      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d023      	beq.n	8001436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ee:	4b6f      	ldr	r3, [pc, #444]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb41 	bl	8000a80 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fb3d 	bl	8000a80 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e255      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	495f      	ldr	r1, [pc, #380]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e018      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a5c      	ldr	r2, [pc, #368]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fb1d 	bl	8000a80 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fb19 	bl	8000a80 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e231      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d03c      	beq.n	80014ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff faf8 	bl	8000a80 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff faf4 	bl	8000a80 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e20c      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ef      	beq.n	8001494 <HAL_RCC_OscConfig+0x3ec>
 80014b4:	e01b      	b.n	80014ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff fadb 	bl	8000a80 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fad7 	bl	8000a80 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1ef      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ef      	bne.n	80014ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	4a26      	ldr	r2, [pc, #152]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6593      	str	r3, [r2, #88]	; 0x58
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d118      	bne.n	8001566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff fa9e 	bl	8000a80 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fa9a 	bl	8000a80 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1b2      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x508>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d8>
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800157e:	e029      	b.n	80015d4 <HAL_RCC_OscConfig+0x52c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d115      	bne.n	80015b4 <HAL_RCC_OscConfig+0x50c>
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159e:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_RCC_OscConfig+0x504>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x52c>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40007000 	.word	0x40007000
 80015b4:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a99      	ldr	r2, [pc, #612]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c4:	4b96      	ldr	r3, [pc, #600]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ca:	4a95      	ldr	r2, [pc, #596]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d016      	beq.n	800160a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa50 	bl	8000a80 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fa4c 	bl	8000a80 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e162      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fa:	4b89      	ldr	r3, [pc, #548]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ed      	beq.n	80015e4 <HAL_RCC_OscConfig+0x53c>
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fa39 	bl	8000a80 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fa35 	bl	8000a80 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e14b      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001628:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ed      	bne.n	8001612 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b78      	ldr	r3, [pc, #480]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a77      	ldr	r2, [pc, #476]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	2b00      	cmp	r3, #0
 8001652:	d03c      	beq.n	80016ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01c      	beq.n	8001696 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800165c:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800165e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001662:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fa08 	bl	8000a80 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001674:	f7ff fa04 	bl	8000a80 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e11c      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001686:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ef      	beq.n	8001674 <HAL_RCC_OscConfig+0x5cc>
 8001694:	e01b      	b.n	80016ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001696:	4b62      	ldr	r3, [pc, #392]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169c:	4a60      	ldr	r2, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	f7ff f9eb 	bl	8000a80 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ae:	f7ff f9e7 	bl	8000a80 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0ff      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016c0:	4b57      	ldr	r3, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80016c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ef      	bne.n	80016ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80f3 	beq.w	80018be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	2b02      	cmp	r3, #2
 80016de:	f040 80c9 	bne.w	8001874 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016e2:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0203 	and.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d12c      	bne.n	8001750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	3b01      	subs	r3, #1
 8001702:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d123      	bne.n	8001750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d11b      	bne.n	8001750 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d113      	bne.n	8001750 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d109      	bne.n	8001750 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	3b01      	subs	r3, #1
 800174a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d06b      	beq.n	8001828 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d062      	beq.n	800181c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0ac      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2d      	ldr	r2, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800176c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001770:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001772:	f7ff f985 	bl	8000a80 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff f981 	bl	8000a80 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e099      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x77c>)
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017a8:	3a01      	subs	r2, #1
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017b2:	0212      	lsls	r2, r2, #8
 80017b4:	4311      	orrs	r1, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017ba:	0852      	lsrs	r2, r2, #1
 80017bc:	3a01      	subs	r2, #1
 80017be:	0552      	lsls	r2, r2, #21
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017c6:	0852      	lsrs	r2, r2, #1
 80017c8:	3a01      	subs	r2, #1
 80017ca:	0652      	lsls	r2, r2, #25
 80017cc:	4311      	orrs	r1, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017d2:	06d2      	lsls	r2, r2, #27
 80017d4:	430a      	orrs	r2, r1
 80017d6:	4912      	ldr	r1, [pc, #72]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 80017ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f4:	f7ff f944 	bl	8000a80 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f940 	bl	8000a80 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e058      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_RCC_OscConfig+0x778>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800181a:	e050      	b.n	80018be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e04f      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
 8001820:	40021000 	.word	0x40021000
 8001824:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d144      	bne.n	80018be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a20      	ldr	r2, [pc, #128]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800184c:	f7ff f918 	bl	8000a80 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f914 	bl	8000a80 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e02c      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x7ac>
 8001872:	e024      	b.n	80018be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d01f      	beq.n	80018ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 8001880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff f8fb 	bl	8000a80 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff f8f7 	bl	8000a80 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e00f      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4905      	ldr	r1, [pc, #20]	; (80018c8 <HAL_RCC_OscConfig+0x820>)
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x824>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
 80018b8:	e001      	b.n	80018be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	feeefffc 	.word	0xfeeefffc

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0e7      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b75      	ldr	r3, [pc, #468]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d910      	bls.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0207 	bic.w	r2, r3, #7
 80018fa:	4970      	ldr	r1, [pc, #448]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b6e      	ldr	r3, [pc, #440]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0cf      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d010      	beq.n	8001942 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192c:	429a      	cmp	r2, r3
 800192e:	d908      	bls.n	8001942 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4960      	ldr	r1, [pc, #384]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d04c      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d121      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0a6      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196e:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d115      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e09a      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001986:	4b4e      	ldr	r3, [pc, #312]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e08e      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e086      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4943      	ldr	r1, [pc, #268]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b8:	f7ff f862 	bl	8000a80 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff f85e 	bl	8000a80 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e06e      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 020c 	and.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1eb      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d010      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d208      	bcs.n	8001a16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	492b      	ldr	r1, [pc, #172]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d210      	bcs.n	8001a46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 0207 	bic.w	r2, r3, #7
 8001a2c:	4923      	ldr	r1, [pc, #140]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCC_ClockConfig+0x1ec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e036      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4918      	ldr	r1, [pc, #96]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4910      	ldr	r1, [pc, #64]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a84:	f000 f824 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	490b      	ldr	r1, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1fc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe ff99 	bl	80009e0 <HAL_InitTick>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08003498 	.word	0x08003498
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x34>
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d11e      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b04:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b2c:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e004      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d134      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d003      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0xac>
 8001b74:	e005      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b78:	617b      	str	r3, [r7, #20]
      break;
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b7e:	617b      	str	r3, [r7, #20]
      break;
 8001b80:	e002      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	617b      	str	r3, [r7, #20]
      break;
 8001b86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	3301      	adds	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	fb03 f202 	mul.w	r2, r3, r2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	0e5b      	lsrs	r3, r3, #25
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bc8:	69bb      	ldr	r3, [r7, #24]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	080034b0 	.word	0x080034b0
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	007a1200 	.word	0x007a1200

08001be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000

08001c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c04:	f7ff fff0 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4904      	ldr	r1, [pc, #16]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	080034a8 	.word	0x080034a8

08001c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c30:	f7ff ffda 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0adb      	lsrs	r3, r3, #11
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	080034a8 	.word	0x080034a8

08001c58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c70:	f7ff f9b6 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001c74:	6178      	str	r0, [r7, #20]
 8001c76:	e014      	b.n	8001ca2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c90:	f7ff f9a6 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001c94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca8:	d10b      	bne.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b80      	cmp	r3, #128	; 0x80
 8001cae:	d919      	bls.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2ba0      	cmp	r3, #160	; 0xa0
 8001cb4:	d902      	bls.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e013      	b.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	e010      	b.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b80      	cmp	r3, #128	; 0x80
 8001cc6:	d902      	bls.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cc8:	2303      	movs	r3, #3
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e00a      	b.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d102      	bne.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e004      	b.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b70      	cmp	r3, #112	; 0x70
 8001cde:	d101      	bne.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 0207 	bic.w	r2, r3, #7
 8001cec:	4909      	ldr	r1, [pc, #36]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40022000 	.word	0x40022000

08001d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d20:	2300      	movs	r3, #0
 8001d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d24:	2300      	movs	r3, #0
 8001d26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d031      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d3c:	d01a      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d42:	d814      	bhi.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d5a:	e00c      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fa22 	bl	80021ac <RCCEx_PLLSAI1_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d6c:	e003      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	74fb      	strb	r3, [r7, #19]
      break;
 8001d72:	e000      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	494e      	ldr	r1, [pc, #312]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d92:	e001      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d94:	7cfb      	ldrb	r3, [r7, #19]
 8001d96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 809e 	beq.w	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	4a3f      	ldr	r2, [pc, #252]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6593      	str	r3, [r2, #88]	; 0x58
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a39      	ldr	r2, [pc, #228]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de8:	f7fe fe4a 	bl	8000a80 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dee:	e009      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7fe fe46 	bl	8000a80 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d902      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	74fb      	strb	r3, [r7, #19]
        break;
 8001e02:	e005      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d15a      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01e      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d019      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e5e:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe fe06 	bl	8000a80 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00b      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe fe02 	bl	8000a80 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d902      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8001e8e:	e006      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0ec      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eba:	e009      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	74bb      	strb	r3, [r7, #18]
 8001ec0:	e006      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed0:	7c7b      	ldrb	r3, [r7, #17]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b8d      	ldr	r3, [pc, #564]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a8c      	ldr	r2, [pc, #560]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eee:	4b87      	ldr	r3, [pc, #540]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef4:	f023 0203 	bic.w	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4983      	ldr	r1, [pc, #524]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f10:	4b7e      	ldr	r3, [pc, #504]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f023 020c 	bic.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	497b      	ldr	r1, [pc, #492]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f32:	4b76      	ldr	r3, [pc, #472]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	4972      	ldr	r1, [pc, #456]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f54:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	496a      	ldr	r1, [pc, #424]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f76:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	4961      	ldr	r1, [pc, #388]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f98:	4b5c      	ldr	r3, [pc, #368]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4959      	ldr	r1, [pc, #356]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	4950      	ldr	r1, [pc, #320]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	4948      	ldr	r1, [pc, #288]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	493f      	ldr	r1, [pc, #252]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d028      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202e:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203e:	d106      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
 800204c:	e011      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002056:	d10c      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f8a4 	bl	80021ac <RCCEx_PLLSAI1_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d028      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	491f      	ldr	r1, [pc, #124]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800209c:	d106      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a8:	60d3      	str	r3, [r2, #12]
 80020aa:	e011      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2101      	movs	r1, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 f875 	bl	80021ac <RCCEx_PLLSAI1_Config>
 80020c2:	4603      	mov	r3, r0
 80020c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02b      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020fa:	d109      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a02      	ldr	r2, [pc, #8]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002106:	60d3      	str	r3, [r2, #12]
 8002108:	e014      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002118:	d10c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f843 	bl	80021ac <RCCEx_PLLSAI1_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01c      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215e:	d10c      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	2102      	movs	r1, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f820 	bl	80021ac <RCCEx_PLLSAI1_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800219c:	7cbb      	ldrb	r3, [r7, #18]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ba:	4b74      	ldr	r3, [pc, #464]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d018      	beq.n	80021f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021c6:	4b71      	ldr	r3, [pc, #452]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0203 	and.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d10d      	bne.n	80021f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
       ||
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
       ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d047      	beq.n	8002282 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e044      	b.n	8002282 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d018      	beq.n	8002232 <RCCEx_PLLSAI1_Config+0x86>
 8002200:	2b03      	cmp	r3, #3
 8002202:	d825      	bhi.n	8002250 <RCCEx_PLLSAI1_Config+0xa4>
 8002204:	2b01      	cmp	r3, #1
 8002206:	d002      	beq.n	800220e <RCCEx_PLLSAI1_Config+0x62>
 8002208:	2b02      	cmp	r3, #2
 800220a:	d009      	beq.n	8002220 <RCCEx_PLLSAI1_Config+0x74>
 800220c:	e020      	b.n	8002250 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800220e:	4b5f      	ldr	r3, [pc, #380]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11d      	bne.n	8002256 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221e:	e01a      	b.n	8002256 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002220:	4b5a      	ldr	r3, [pc, #360]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d116      	bne.n	800225a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002230:	e013      	b.n	800225a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002232:	4b56      	ldr	r3, [pc, #344]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800224e:	e006      	b.n	800225e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e004      	b.n	8002260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002256:	bf00      	nop
 8002258:	e002      	b.n	8002260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800225e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	430b      	orrs	r3, r1
 800227c:	4943      	ldr	r1, [pc, #268]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d17c      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002288:	4b40      	ldr	r3, [pc, #256]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a3f      	ldr	r2, [pc, #252]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 800228e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fbf4 	bl	8000a80 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800229a:	e009      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800229c:	f7fe fbf0 	bl	8000a80 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d902      	bls.n	80022b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	73fb      	strb	r3, [r7, #15]
        break;
 80022ae:	e005      	b.n	80022bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ef      	bne.n	800229c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d15f      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d110      	bne.n	80022ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022c8:	4b30      	ldr	r3, [pc, #192]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6892      	ldr	r2, [r2, #8]
 80022d8:	0211      	lsls	r1, r2, #8
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68d2      	ldr	r2, [r2, #12]
 80022de:	06d2      	lsls	r2, r2, #27
 80022e0:	430a      	orrs	r2, r1
 80022e2:	492a      	ldr	r1, [pc, #168]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	610b      	str	r3, [r1, #16]
 80022e8:	e027      	b.n	800233a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d112      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6892      	ldr	r2, [r2, #8]
 8002300:	0211      	lsls	r1, r2, #8
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6912      	ldr	r2, [r2, #16]
 8002306:	0852      	lsrs	r2, r2, #1
 8002308:	3a01      	subs	r2, #1
 800230a:	0552      	lsls	r2, r2, #21
 800230c:	430a      	orrs	r2, r1
 800230e:	491f      	ldr	r1, [pc, #124]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	610b      	str	r3, [r1, #16]
 8002314:	e011      	b.n	800233a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800231e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6892      	ldr	r2, [r2, #8]
 8002326:	0211      	lsls	r1, r2, #8
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6952      	ldr	r2, [r2, #20]
 800232c:	0852      	lsrs	r2, r2, #1
 800232e:	3a01      	subs	r2, #1
 8002330:	0652      	lsls	r2, r2, #25
 8002332:	430a      	orrs	r2, r1
 8002334:	4915      	ldr	r1, [pc, #84]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002344:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fb9b 	bl	8000a80 <HAL_GetTick>
 800234a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800234c:	e009      	b.n	8002362 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800234e:	f7fe fb97 	bl	8000a80 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d902      	bls.n	8002362 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	73fb      	strb	r3, [r7, #15]
          break;
 8002360:	e005      	b.n	800236e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ef      	beq.n	800234e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <RCCEx_PLLSAI1_Config+0x1e0>)
 800237e:	4313      	orrs	r3, r2
 8002380:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e049      	b.n	8002436 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fa04 	bl	80007c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 fa50 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d122      	bne.n	800249a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0202 	mvn.w	r2, #2
 800246a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f9d8 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 8002486:	e005      	b.n	8002494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f9ca 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9db 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d122      	bne.n	80024ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d11b      	bne.n	80024ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0204 	mvn.w	r2, #4
 80024be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f9ae 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 80024da:	e005      	b.n	80024e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f9a0 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f9b1 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d122      	bne.n	8002542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11b      	bne.n	8002542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0208 	mvn.w	r2, #8
 8002512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f984 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 800252e:	e005      	b.n	800253c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f976 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f987 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d122      	bne.n	8002596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d11b      	bne.n	8002596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0210 	mvn.w	r2, #16
 8002566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2208      	movs	r2, #8
 800256c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f95a 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 8002582:	e005      	b.n	8002590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f94c 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f95d 	bl	800284a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10e      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0201 	mvn.w	r2, #1
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f926 	bl	800280e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d10e      	bne.n	80025ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b80      	cmp	r3, #128	; 0x80
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fab1 	bl	8002b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 faa4 	bl	8002b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f90b 	bl	800285e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa64 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e0b6      	b.n	8002806 <HAL_TIM_ConfigClockSource+0x18a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d4:	d03e      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0xd8>
 80026d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026da:	f200 8087 	bhi.w	80027ec <HAL_TIM_ConfigClockSource+0x170>
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e2:	f000 8086 	beq.w	80027f2 <HAL_TIM_ConfigClockSource+0x176>
 80026e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ea:	d87f      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 80026ec:	2b70      	cmp	r3, #112	; 0x70
 80026ee:	d01a      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0xaa>
 80026f0:	2b70      	cmp	r3, #112	; 0x70
 80026f2:	d87b      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 80026f4:	2b60      	cmp	r3, #96	; 0x60
 80026f6:	d050      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x11e>
 80026f8:	2b60      	cmp	r3, #96	; 0x60
 80026fa:	d877      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 80026fc:	2b50      	cmp	r3, #80	; 0x50
 80026fe:	d03c      	beq.n	800277a <HAL_TIM_ConfigClockSource+0xfe>
 8002700:	2b50      	cmp	r3, #80	; 0x50
 8002702:	d873      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d058      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0x13e>
 8002708:	2b40      	cmp	r3, #64	; 0x40
 800270a:	d86f      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 800270c:	2b30      	cmp	r3, #48	; 0x30
 800270e:	d064      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x15e>
 8002710:	2b30      	cmp	r3, #48	; 0x30
 8002712:	d86b      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 8002714:	2b20      	cmp	r3, #32
 8002716:	d060      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x15e>
 8002718:	2b20      	cmp	r3, #32
 800271a:	d867      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d05c      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x15e>
 8002720:	2b10      	cmp	r3, #16
 8002722:	d05a      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x15e>
 8002724:	e062      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f000 f97b 	bl	8002a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	609a      	str	r2, [r3, #8]
      break;
 8002752:	e04f      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f000 f964 	bl	8002a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002776:	609a      	str	r2, [r3, #8]
      break;
 8002778:	e03c      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	f000 f8d8 	bl	800293c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2150      	movs	r1, #80	; 0x50
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f931 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 8002798:	e02c      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f000 f8f7 	bl	800299a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2160      	movs	r1, #96	; 0x60
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f921 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027b8:	e01c      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f000 f8b8 	bl	800293c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2140      	movs	r1, #64	; 0x40
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f911 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027d8:	e00c      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f000 f908 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027ea:	e003      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e000      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80027f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <TIM_Base_SetConfig+0xbc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x20>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002892:	d108      	bne.n	80028a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <TIM_Base_SetConfig+0xbc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00b      	beq.n	80028c6 <TIM_Base_SetConfig+0x52>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d007      	beq.n	80028c6 <TIM_Base_SetConfig+0x52>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <TIM_Base_SetConfig+0xc0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_Base_SetConfig+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <TIM_Base_SetConfig+0xc4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d108      	bne.n	80028d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <TIM_Base_SetConfig+0xbc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0xa0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <TIM_Base_SetConfig+0xc0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0xa0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <TIM_Base_SetConfig+0xc4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40014000 	.word	0x40014000
 8002938:	40014400 	.word	0x40014400

0800293c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0201 	bic.w	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 030a 	bic.w	r3, r3, #10
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0210 	bic.w	r2, r3, #16
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	031b      	lsls	r3, r3, #12
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f043 0307 	orr.w	r3, r3, #7
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e04f      	b.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d004      	beq.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40014000 	.word	0x40014000

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e040      	b.n	8002c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fe36 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f82c 	bl	8002c14 <UART_SetConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e022      	b.n	8002c0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa7a 	bl	80030c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fb01 	bl	800320c <UART_CheckIdleState>
 8002c0a:	4603      	mov	r3, r0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c18:	b08a      	sub	sp, #40	; 0x28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b9e      	ldr	r3, [pc, #632]	; (8002ebc <UART_SetConfig+0x2a8>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a93      	ldr	r2, [pc, #588]	; (8002ec0 <UART_SetConfig+0x2ac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a8a      	ldr	r2, [pc, #552]	; (8002ec4 <UART_SetConfig+0x2b0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d126      	bne.n	8002cec <UART_SetConfig+0xd8>
 8002c9e:	4b8a      	ldr	r3, [pc, #552]	; (8002ec8 <UART_SetConfig+0x2b4>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d81b      	bhi.n	8002ce4 <UART_SetConfig+0xd0>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <UART_SetConfig+0xa0>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cd5 	.word	0x08002cd5
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cdd 	.word	0x08002cdd
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cca:	e0ab      	b.n	8002e24 <UART_SetConfig+0x210>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd2:	e0a7      	b.n	8002e24 <UART_SetConfig+0x210>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cda:	e0a3      	b.n	8002e24 <UART_SetConfig+0x210>
 8002cdc:	2308      	movs	r3, #8
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce2:	e09f      	b.n	8002e24 <UART_SetConfig+0x210>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cea:	e09b      	b.n	8002e24 <UART_SetConfig+0x210>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a76      	ldr	r2, [pc, #472]	; (8002ecc <UART_SetConfig+0x2b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d138      	bne.n	8002d68 <UART_SetConfig+0x154>
 8002cf6:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <UART_SetConfig+0x2b4>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d82d      	bhi.n	8002d60 <UART_SetConfig+0x14c>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <UART_SetConfig+0xf8>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d61 	.word	0x08002d61
 8002d14:	08002d61 	.word	0x08002d61
 8002d18:	08002d61 	.word	0x08002d61
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002d61 	.word	0x08002d61
 8002d24:	08002d61 	.word	0x08002d61
 8002d28:	08002d61 	.word	0x08002d61
 8002d2c:	08002d49 	.word	0x08002d49
 8002d30:	08002d61 	.word	0x08002d61
 8002d34:	08002d61 	.word	0x08002d61
 8002d38:	08002d61 	.word	0x08002d61
 8002d3c:	08002d59 	.word	0x08002d59
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d46:	e06d      	b.n	8002e24 <UART_SetConfig+0x210>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d4e:	e069      	b.n	8002e24 <UART_SetConfig+0x210>
 8002d50:	2304      	movs	r3, #4
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d56:	e065      	b.n	8002e24 <UART_SetConfig+0x210>
 8002d58:	2308      	movs	r3, #8
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5e:	e061      	b.n	8002e24 <UART_SetConfig+0x210>
 8002d60:	2310      	movs	r3, #16
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e05d      	b.n	8002e24 <UART_SetConfig+0x210>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <UART_SetConfig+0x2bc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d125      	bne.n	8002dbe <UART_SetConfig+0x1aa>
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <UART_SetConfig+0x2b4>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d016      	beq.n	8002dae <UART_SetConfig+0x19a>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d818      	bhi.n	8002db6 <UART_SetConfig+0x1a2>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d00a      	beq.n	8002d9e <UART_SetConfig+0x18a>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d814      	bhi.n	8002db6 <UART_SetConfig+0x1a2>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <UART_SetConfig+0x182>
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d008      	beq.n	8002da6 <UART_SetConfig+0x192>
 8002d94:	e00f      	b.n	8002db6 <UART_SetConfig+0x1a2>
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9c:	e042      	b.n	8002e24 <UART_SetConfig+0x210>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da4:	e03e      	b.n	8002e24 <UART_SetConfig+0x210>
 8002da6:	2304      	movs	r3, #4
 8002da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dac:	e03a      	b.n	8002e24 <UART_SetConfig+0x210>
 8002dae:	2308      	movs	r3, #8
 8002db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db4:	e036      	b.n	8002e24 <UART_SetConfig+0x210>
 8002db6:	2310      	movs	r3, #16
 8002db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbc:	e032      	b.n	8002e24 <UART_SetConfig+0x210>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3f      	ldr	r2, [pc, #252]	; (8002ec0 <UART_SetConfig+0x2ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d12a      	bne.n	8002e1e <UART_SetConfig+0x20a>
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <UART_SetConfig+0x2b4>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dd6:	d01a      	beq.n	8002e0e <UART_SetConfig+0x1fa>
 8002dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ddc:	d81b      	bhi.n	8002e16 <UART_SetConfig+0x202>
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de2:	d00c      	beq.n	8002dfe <UART_SetConfig+0x1ea>
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d815      	bhi.n	8002e16 <UART_SetConfig+0x202>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <UART_SetConfig+0x1e2>
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d008      	beq.n	8002e06 <UART_SetConfig+0x1f2>
 8002df4:	e00f      	b.n	8002e16 <UART_SetConfig+0x202>
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dfc:	e012      	b.n	8002e24 <UART_SetConfig+0x210>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e04:	e00e      	b.n	8002e24 <UART_SetConfig+0x210>
 8002e06:	2304      	movs	r3, #4
 8002e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0c:	e00a      	b.n	8002e24 <UART_SetConfig+0x210>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e14:	e006      	b.n	8002e24 <UART_SetConfig+0x210>
 8002e16:	2310      	movs	r3, #16
 8002e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1c:	e002      	b.n	8002e24 <UART_SetConfig+0x210>
 8002e1e:	2310      	movs	r3, #16
 8002e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <UART_SetConfig+0x2ac>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f040 808a 	bne.w	8002f44 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d824      	bhi.n	8002e82 <UART_SetConfig+0x26e>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <UART_SetConfig+0x22c>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e65 	.word	0x08002e65
 8002e44:	08002e83 	.word	0x08002e83
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002e83 	.word	0x08002e83
 8002e50:	08002e73 	.word	0x08002e73
 8002e54:	08002e83 	.word	0x08002e83
 8002e58:	08002e83 	.word	0x08002e83
 8002e5c:	08002e83 	.word	0x08002e83
 8002e60:	08002e7b 	.word	0x08002e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e64:	f7fe fecc 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8002e68:	61f8      	str	r0, [r7, #28]
        break;
 8002e6a:	e010      	b.n	8002e8e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <UART_SetConfig+0x2c0>)
 8002e6e:	61fb      	str	r3, [r7, #28]
        break;
 8002e70:	e00d      	b.n	8002e8e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e72:	f7fe fe2d 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002e76:	61f8      	str	r0, [r7, #28]
        break;
 8002e78:	e009      	b.n	8002e8e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7e:	61fb      	str	r3, [r7, #28]
        break;
 8002e80:	e005      	b.n	8002e8e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8109 	beq.w	80030a8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d305      	bcc.n	8002eb2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d912      	bls.n	8002ed8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002eb8:	e0f6      	b.n	80030a8 <UART_SetConfig+0x494>
 8002eba:	bf00      	nop
 8002ebc:	efff69f3 	.word	0xefff69f3
 8002ec0:	40008000 	.word	0x40008000
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40004400 	.word	0x40004400
 8002ed0:	40004800 	.word	0x40004800
 8002ed4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2200      	movs	r2, #0
 8002edc:	461c      	mov	r4, r3
 8002ede:	4615      	mov	r5, r2
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	022b      	lsls	r3, r5, #8
 8002eea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002eee:	0222      	lsls	r2, r4, #8
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	6849      	ldr	r1, [r1, #4]
 8002ef4:	0849      	lsrs	r1, r1, #1
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	4688      	mov	r8, r1
 8002efa:	4681      	mov	r9, r0
 8002efc:	eb12 0a08 	adds.w	sl, r2, r8
 8002f00:	eb43 0b09 	adc.w	fp, r3, r9
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f12:	4650      	mov	r0, sl
 8002f14:	4659      	mov	r1, fp
 8002f16:	f7fd f959 	bl	80001cc <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f28:	d308      	bcc.n	8002f3c <UART_SetConfig+0x328>
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f30:	d204      	bcs.n	8002f3c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	e0b5      	b.n	80030a8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f42:	e0b1      	b.n	80030a8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	d15d      	bne.n	800300a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d827      	bhi.n	8002fa6 <UART_SetConfig+0x392>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <UART_SetConfig+0x348>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f89 	.word	0x08002f89
 8002f64:	08002f91 	.word	0x08002f91
 8002f68:	08002fa7 	.word	0x08002fa7
 8002f6c:	08002f97 	.word	0x08002f97
 8002f70:	08002fa7 	.word	0x08002fa7
 8002f74:	08002fa7 	.word	0x08002fa7
 8002f78:	08002fa7 	.word	0x08002fa7
 8002f7c:	08002f9f 	.word	0x08002f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f80:	f7fe fe3e 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8002f84:	61f8      	str	r0, [r7, #28]
        break;
 8002f86:	e014      	b.n	8002fb2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7fe fe50 	bl	8001c2c <HAL_RCC_GetPCLK2Freq>
 8002f8c:	61f8      	str	r0, [r7, #28]
        break;
 8002f8e:	e010      	b.n	8002fb2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f90:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <UART_SetConfig+0x4b0>)
 8002f92:	61fb      	str	r3, [r7, #28]
        break;
 8002f94:	e00d      	b.n	8002fb2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f96:	f7fe fd9b 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002f9a:	61f8      	str	r0, [r7, #28]
        break;
 8002f9c:	e009      	b.n	8002fb2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fa2:	61fb      	str	r3, [r7, #28]
        break;
 8002fa4:	e005      	b.n	8002fb2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d077      	beq.n	80030a8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005a      	lsls	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d916      	bls.n	8003002 <UART_SetConfig+0x3ee>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d212      	bcs.n	8003002 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f023 030f 	bic.w	r3, r3, #15
 8002fe4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	8afa      	ldrh	r2, [r7, #22]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	e052      	b.n	80030a8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003008:	e04e      	b.n	80030a8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800300a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800300e:	2b08      	cmp	r3, #8
 8003010:	d827      	bhi.n	8003062 <UART_SetConfig+0x44e>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0x404>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	0800303d 	.word	0x0800303d
 800301c:	08003045 	.word	0x08003045
 8003020:	0800304d 	.word	0x0800304d
 8003024:	08003063 	.word	0x08003063
 8003028:	08003053 	.word	0x08003053
 800302c:	08003063 	.word	0x08003063
 8003030:	08003063 	.word	0x08003063
 8003034:	08003063 	.word	0x08003063
 8003038:	0800305b 	.word	0x0800305b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7fe fde0 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8003040:	61f8      	str	r0, [r7, #28]
        break;
 8003042:	e014      	b.n	800306e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003044:	f7fe fdf2 	bl	8001c2c <HAL_RCC_GetPCLK2Freq>
 8003048:	61f8      	str	r0, [r7, #28]
        break;
 800304a:	e010      	b.n	800306e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <UART_SetConfig+0x4b0>)
 800304e:	61fb      	str	r3, [r7, #28]
        break;
 8003050:	e00d      	b.n	800306e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003052:	f7fe fd3d 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8003056:	61f8      	str	r0, [r7, #28]
        break;
 8003058:	e009      	b.n	800306e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	61fb      	str	r3, [r7, #28]
        break;
 8003060:	e005      	b.n	800306e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800306c:	bf00      	nop
    }

    if (pclk != 0U)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	085a      	lsrs	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	441a      	add	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	d909      	bls.n	80030a2 <UART_SetConfig+0x48e>
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d205      	bcs.n	80030a2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	e002      	b.n	80030a8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	00f42400 	.word	0x00f42400

080030c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01a      	beq.n	80031de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d10a      	bne.n	80031de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800321c:	f7fd fc30 	bl	8000a80 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d10e      	bne.n	800324e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f82d 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e023      	b.n	8003296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d10e      	bne.n	800327a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f817 	bl	800329e <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e00d      	b.n	8003296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b09c      	sub	sp, #112	; 0x70
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ae:	e0a5      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	f000 80a1 	beq.w	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7fd fbe1 	bl	8000a80 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80032ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d13e      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e4:	667b      	str	r3, [r7, #100]	; 0x64
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e6      	bne.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	663b      	str	r3, [r7, #96]	; 0x60
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003322:	64ba      	str	r2, [r7, #72]	; 0x48
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e5      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e067      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d04f      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d147      	bne.n	80033fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003374:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800338a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
 8003396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800339a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e6      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	613b      	str	r3, [r7, #16]
   return(result);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033c8:	623a      	str	r2, [r7, #32]
 80033ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	69f9      	ldr	r1, [r7, #28]
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e010      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	f43f af4a 	beq.w	80032b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3770      	adds	r7, #112	; 0x70
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <__libc_init_array>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4d0d      	ldr	r5, [pc, #52]	; (8003460 <__libc_init_array+0x38>)
 800342c:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <__libc_init_array+0x3c>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	2600      	movs	r6, #0
 8003434:	42a6      	cmp	r6, r4
 8003436:	d109      	bne.n	800344c <__libc_init_array+0x24>
 8003438:	4d0b      	ldr	r5, [pc, #44]	; (8003468 <__libc_init_array+0x40>)
 800343a:	4c0c      	ldr	r4, [pc, #48]	; (800346c <__libc_init_array+0x44>)
 800343c:	f000 f820 	bl	8003480 <_init>
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	2600      	movs	r6, #0
 8003446:	42a6      	cmp	r6, r4
 8003448:	d105      	bne.n	8003456 <__libc_init_array+0x2e>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003450:	4798      	blx	r3
 8003452:	3601      	adds	r6, #1
 8003454:	e7ee      	b.n	8003434 <__libc_init_array+0xc>
 8003456:	f855 3b04 	ldr.w	r3, [r5], #4
 800345a:	4798      	blx	r3
 800345c:	3601      	adds	r6, #1
 800345e:	e7f2      	b.n	8003446 <__libc_init_array+0x1e>
 8003460:	080034e8 	.word	0x080034e8
 8003464:	080034e8 	.word	0x080034e8
 8003468:	080034e8 	.word	0x080034e8
 800346c:	080034ec 	.word	0x080034ec

08003470 <memset>:
 8003470:	4402      	add	r2, r0
 8003472:	4603      	mov	r3, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	f803 1b01 	strb.w	r1, [r3], #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
