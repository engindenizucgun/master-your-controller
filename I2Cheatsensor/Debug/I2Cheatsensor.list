
I2Cheatsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b88  08004b88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b90  08004b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004c08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004c08  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb0  00000000  00000000  0002dc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  000303f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220d8  00000000  00000000  00030ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b3  00000000  00000000  00052fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdde9  00000000  00000000  00061773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f55c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  0012f5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004adc 	.word	0x08004adc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004adc 	.word	0x08004adc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fb6b 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f8a1 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 f961 	bl	8000ec4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c02:	f000 f92f 	bl	8000e64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c06:	f000 f8ed 	bl	8000de4 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = REG_TEMP; //buffer = temp register
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP100_ADDR, buf, 1, HAL_MAX_DELAY); // return value of the function //pointer @I2C handle(It represents the specific I2C peripheral or bus that the communication will take place on.), address of sensor, buf, one byte, islemin bitmesi icin yeterli sure
 8000c0e:	2390      	movs	r3, #144	; 0x90
 8000c10:	b299      	uxth	r1, r3
 8000c12:	1d3a      	adds	r2, r7, #4
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4841      	ldr	r0, [pc, #260]	; (8000d24 <main+0x134>)
 8000c1e:	f000 feff 	bl	8001a20 <HAL_I2C_Master_Transmit>
 8000c22:	4603      	mov	r3, r0
 8000c24:	757b      	strb	r3, [r7, #21]
	  if ( ret != HAL_OK ) { //HAL_OK , execution basarili sekilde yapildigi anlamina geliyor
 8000c26:	7d7b      	ldrb	r3, [r7, #21]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d008      	beq.n	8000c3e <main+0x4e>
		  strcpy((char*)buf, "Error Tx\r\n"); //strcpy, copy a string from one location to another (char*)buf, converts the buffer to a char* pointer. This means the buffer is converted to a character array
 8000c2c:	4a3e      	ldr	r2, [pc, #248]	; (8000d28 <main+0x138>)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c32:	c303      	stmia	r3!, {r0, r1}
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	3302      	adds	r3, #2
 8000c38:	0c12      	lsrs	r2, r2, #16
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e061      	b.n	8000d02 <main+0x112>
	  } else {

	  ret = HAL_I2C_Master_Receive(&hi2c1, TMP100_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c3e:	2390      	movs	r3, #144	; 0x90
 8000c40:	b299      	uxth	r1, r3
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	4835      	ldr	r0, [pc, #212]	; (8000d24 <main+0x134>)
 8000c4e:	f000 ffdb 	bl	8001c08 <HAL_I2C_Master_Receive>
 8000c52:	4603      	mov	r3, r0
 8000c54:	757b      	strb	r3, [r7, #21]
	  if ( ret != HAL_OK ) {
 8000c56:	7d7b      	ldrb	r3, [r7, #21]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d008      	beq.n	8000c6e <main+0x7e>
		  strcpy((char*)buf, "Error Tx\r\n"); //
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <main+0x138>)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c62:	c303      	stmia	r3!, {r0, r1}
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	3302      	adds	r3, #2
 8000c68:	0c12      	lsrs	r2, r2, #16
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e049      	b.n	8000d02 <main+0x112>

	  }else{

		  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); //12 bitlik bir integer icin buf[0] 4 birim sola shiftliyoruz, buf[1]i 4 birim saga daha sonra combine ediyoruz
 8000c6e:	793b      	ldrb	r3, [r7, #4]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	797b      	ldrb	r3, [r7, #5]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	82fb      	strh	r3, [r7, #22]

		  if (val > 0x7FF) { //eger value en buyuk hexadecimalden buyukse
 8000c80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c88:	db05      	blt.n	8000c96 <main+0xa6>
			  val |= 0xF000;//degeri eksi yap, most significant 4 bit 1 oluyor
 8000c8a:	8afb      	ldrh	r3, [r7, #22]
 8000c8c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000c90:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000c94:	82fb      	strh	r3, [r7, #22]
		  }

		  temp_c = val * 0.0625;
 8000c96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fd6c 	bl	8000778 <__aeabi_i2d>
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <main+0x13c>)
 8000ca6:	f7ff faeb 	bl	8000280 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f7ff fdcb 	bl	800084c <__aeabi_d2f>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	613b      	str	r3, [r7, #16]
		  temp_c *= 100;
 8000cba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cbe:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000d30 <main+0x140>
 8000cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc6:	edc7 7a04 	vstr	s15, [r7, #16]

		  sprintf((char*)buf, // sprintf format the temp and store it as a string
				  "%u.%02u C\n\r",
				  ((unsigned int)temp_c / 100), //tam sayi kismi
 8000cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd2:	ee17 2a90 	vmov	r2, s15
		  sprintf((char*)buf, // sprintf format the temp and store it as a string
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <main+0x144>)
 8000cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cdc:	095a      	lsrs	r2, r3, #5
				  ((unsigned int)temp_c % 100));//ondalikli kismi
 8000cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce6:	ee17 1a90 	vmov	r1, s15
		  sprintf((char*)buf, // sprintf format the temp and store it as a string
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <main+0x144>)
 8000cec:	fba3 0301 	umull	r0, r3, r3, r1
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	fb00 f303 	mul.w	r3, r0, r3
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	1d38      	adds	r0, r7, #4
 8000cfc:	490e      	ldr	r1, [pc, #56]	; (8000d38 <main+0x148>)
 8000cfe:	f003 fa7f 	bl	8004200 <siprintf>




    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa63 	bl	80001d0 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	1d39      	adds	r1, r7, #4
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <main+0x14c>)
 8000d16:	f002 fda3 	bl	8003860 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000d1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d1e:	f000 fb53 	bl	80013c8 <HAL_Delay>
	  buf[0] = REG_TEMP; //buffer = temp register
 8000d22:	e772      	b.n	8000c0a <main+0x1a>
 8000d24:	2000008c 	.word	0x2000008c
 8000d28:	08004af4 	.word	0x08004af4
 8000d2c:	3fb00000 	.word	0x3fb00000
 8000d30:	42c80000 	.word	0x42c80000
 8000d34:	51eb851f 	.word	0x51eb851f
 8000d38:	08004b00 	.word	0x08004b00
 8000d3c:	200000e0 	.word	0x200000e0

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	; 0x58
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2244      	movs	r2, #68	; 0x44
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fa4e 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d66:	f001 fb63 	bl	8002430 <HAL_PWREx_ControlVoltageScaling>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d70:	f000 f932 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7e:	2310      	movs	r3, #16
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d86:	2302      	movs	r3, #2
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d8e:	230a      	movs	r3, #10
 8000d90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d92:	2307      	movs	r3, #7
 8000d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fb9a 	bl	80024dc <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dae:	f000 f913 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2303      	movs	r3, #3
 8000db8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2104      	movs	r1, #4
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 ff9a 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dd6:	f000 f8ff 	bl	8000fd8 <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3758      	adds	r7, #88	; 0x58
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_I2C1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <MX_I2C1_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e20:	f000 fd6e 	bl	8001900 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 f8d5 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e32:	f001 fa57 	bl	80022e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f8cc 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_I2C1_Init+0x74>)
 8000e44:	f001 fa99 	bl	800237a <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f8c3 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	10909cec 	.word	0x10909cec

08000e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e6a:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <MX_USART2_UART_Init+0x5c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART2_UART_Init+0x58>)
 8000ea8:	f002 fc8c 	bl	80037c4 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f000 f891 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000e0 	.word	0x200000e0
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a3b      	ldr	r2, [pc, #236]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a2f      	ldr	r2, [pc, #188]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_GPIO_Init+0x108>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	21b0      	movs	r1, #176	; 0xb0
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f000 fcc5 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <MX_GPIO_Init+0x10c>)
 8000f4e:	f000 fcbf 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_GPIO_Init+0x110>)
 8000f6a:	f000 fb37 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000f6e:	23b0      	movs	r3, #176	; 0xb0
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fb28 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f8c:	2340      	movs	r3, #64	; 0x40
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f000 fb1b 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_GPIO_Init+0x10c>)
 8000fc0:	f000 fb0c 	bl	80015dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x44>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x44>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0a2      	sub	sp, #136	; 0x88
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2260      	movs	r2, #96	; 0x60
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f8cf 	bl	80041f0 <memset>
  if(hi2c->Instance==I2C1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <HAL_I2C_MspInit+0xac>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d138      	bne.n	80010ce <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4618      	mov	r0, r3
 800106a:	f002 f86f 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001074:	f7ff ffb0 	bl	8000fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_I2C_MspInit+0xb0>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <HAL_I2C_MspInit+0xb0>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_I2C_MspInit+0xb0>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001094:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	2312      	movs	r3, #18
 8001098:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <HAL_I2C_MspInit+0xb4>)
 80010b2:	f000 fa93 	bl	80015dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_I2C_MspInit+0xb0>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_I2C_MspInit+0xb0>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_I2C_MspInit+0xb0>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3788      	adds	r7, #136	; 0x88
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40005400 	.word	0x40005400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0a2      	sub	sp, #136	; 0x88
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2260      	movs	r2, #96	; 0x60
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f873 	bl	80041f0 <memset>
  if(huart->Instance==USART2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_UART_MspInit+0xac>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d138      	bne.n	8001186 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f002 f813 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff ff54 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_UART_MspInit+0xb0>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_UART_MspInit+0xb0>)
 8001136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113a:	6593      	str	r3, [r2, #88]	; 0x58
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0xb0>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_UART_MspInit+0xb0>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_UART_MspInit+0xb0>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_UART_MspInit+0xb0>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001160:	230c      	movs	r3, #12
 8001162:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001172:	2307      	movs	r3, #7
 8001174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f000 fa2b 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3788      	adds	r7, #136	; 0x88
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f8d0 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f002 ffbe 	bl	800419c <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20010000 	.word	0x20010000
 800124c:	00000400 	.word	0x00000400
 8001250:	20000164 	.word	0x20000164
 8001254:	20000180 	.word	0x20000180

08001258 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001280:	f7ff ffea 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LoopForever+0xe>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <LoopForever+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012aa:	f002 ff7d 	bl	80041a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ae:	f7ff fc9f 	bl	8000bf0 <main>

080012b2 <LoopForever>:

LoopForever:
    b LoopForever
 80012b2:	e7fe      	b.n	80012b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012c0:	08004b98 	.word	0x08004b98
  ldr r2, =_sbss
 80012c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012c8:	2000017c 	.word	0x2000017c

080012cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_Init+0x3c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <HAL_Init+0x3c>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f944 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f80f 	bl	8001310 <HAL_InitTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	e001      	b.n	8001302 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012fe:	f7ff fe71 	bl	8000fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001302:	79fb      	ldrb	r3, [r7, #7]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40022000 	.word	0x40022000

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_InitTick+0x6c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d023      	beq.n	800136c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_InitTick+0x70>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_InitTick+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f941 	bl	80015c2 <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10f      	bne.n	8001366 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d809      	bhi.n	8001360 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f919 	bl	800158a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_InitTick+0x74>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e007      	b.n	8001370 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e004      	b.n	8001370 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e001      	b.n	8001370 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008
 8001380:	20000000 	.word	0x20000000
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000168 	.word	0x20000168

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000168 	.word	0x20000168

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000008 	.word	0x20000008

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff47 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff5c 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffb0 	bl	8001530 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e154      	b.n	8001896 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8146 	beq.w	8001890 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a0 	beq.w	8001890 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6613      	str	r3, [r2, #96]	; 0x60
 800175c:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001792:	d019      	beq.n	80017c8 <HAL_GPIO_Init+0x1ec>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a49      	ldr	r2, [pc, #292]	; (80018bc <HAL_GPIO_Init+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_GPIO_Init+0x1e8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <HAL_GPIO_Init+0x2e4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <HAL_GPIO_Init+0x2e8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1e0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a46      	ldr	r2, [pc, #280]	; (80018c8 <HAL_GPIO_Init+0x2ec>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1dc>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e008      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017b8:	2307      	movs	r3, #7
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017bc:	2303      	movs	r3, #3
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c8:	2300      	movs	r3, #0
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017da:	4937      	ldr	r1, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e8:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800180c:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001836:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_GPIO_Init+0x2f0>)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f aea3 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010000 	.word	0x40010000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800
 80018c4:	48000c00 	.word	0x48000c00
 80018c8:	48001000 	.word	0x48001000
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e081      	b.n	8001a16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fb80 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2224      	movs	r2, #36	; 0x24
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e006      	b.n	8001988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d104      	bne.n	800199a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69d9      	ldr	r1, [r3, #28]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	817b      	strh	r3, [r7, #10]
 8001a30:	4613      	mov	r3, r2
 8001a32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	f040 80da 	bne.w	8001bf6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2C_Master_Transmit+0x30>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0d3      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1d8>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a58:	f7ff fcaa 	bl	80013b0 <HAL_GetTick>
 8001a5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2319      	movs	r3, #25
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f9e6 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0be      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2221      	movs	r2, #33	; 0x21
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2210      	movs	r2, #16
 8001a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	893a      	ldrh	r2, [r7, #8]
 8001a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2bff      	cmp	r3, #255	; 0xff
 8001aaa:	d90e      	bls.n	8001aca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	22ff      	movs	r2, #255	; 0xff
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <HAL_I2C_Master_Transmit+0x1e0>)
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fbdc 	bl	8002280 <I2C_TransferConfig>
 8001ac8:	e06c      	b.n	8001ba4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	8979      	ldrh	r1, [r7, #10]
 8001adc:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fbcb 	bl	8002280 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001aea:	e05b      	b.n	8001ba4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	6a39      	ldr	r1, [r7, #32]
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f9e3 	bl	8001ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e07b      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d034      	beq.n	8001ba4 <HAL_I2C_Master_Transmit+0x184>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d130      	bne.n	8001ba4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f975 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e04d      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d90e      	bls.n	8001b84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	22ff      	movs	r2, #255	; 0xff
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	8979      	ldrh	r1, [r7, #10]
 8001b74:	2300      	movs	r3, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fb7f 	bl	8002280 <I2C_TransferConfig>
 8001b82:	e00f      	b.n	8001ba4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	8979      	ldrh	r1, [r7, #10]
 8001b96:	2300      	movs	r3, #0
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fb6e 	bl	8002280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d19e      	bne.n	8001aec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	6a39      	ldr	r1, [r7, #32]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f9c2 	bl	8001f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e01a      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
  }
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	80002000 	.word	0x80002000
 8001c04:	fe00e800 	.word	0xfe00e800

08001c08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	460b      	mov	r3, r1
 8001c16:	817b      	strh	r3, [r7, #10]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	f040 80db 	bne.w	8001de0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_I2C_Master_Receive+0x30>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e0d4      	b.n	8001de2 <HAL_I2C_Master_Receive+0x1da>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c40:	f7ff fbb6 	bl	80013b0 <HAL_GetTick>
 8001c44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2319      	movs	r3, #25
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f8f2 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0bf      	b.n	8001de2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2222      	movs	r2, #34	; 0x22
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	893a      	ldrh	r2, [r7, #8]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2bff      	cmp	r3, #255	; 0xff
 8001c92:	d90e      	bls.n	8001cb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	22ff      	movs	r2, #255	; 0xff
 8001c98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	8979      	ldrh	r1, [r7, #10]
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_I2C_Master_Receive+0x1e4>)
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 fae8 	bl	8002280 <I2C_TransferConfig>
 8001cb0:	e06d      	b.n	8001d8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	8979      	ldrh	r1, [r7, #10]
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_I2C_Master_Receive+0x1e4>)
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fad7 	bl	8002280 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cd2:	e05c      	b.n	8001d8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	6a39      	ldr	r1, [r7, #32]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f96b 	bl	8001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e07c      	b.n	8001de2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d034      	beq.n	8001d8e <HAL_I2C_Master_Receive+0x186>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d130      	bne.n	8001d8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	2200      	movs	r2, #0
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f880 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e04d      	b.n	8001de2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2bff      	cmp	r3, #255	; 0xff
 8001d4e:	d90e      	bls.n	8001d6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	8979      	ldrh	r1, [r7, #10]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fa8a 	bl	8002280 <I2C_TransferConfig>
 8001d6c:	e00f      	b.n	8001d8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	8979      	ldrh	r1, [r7, #10]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fa79 	bl	8002280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d19d      	bne.n	8001cd4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	6a39      	ldr	r1, [r7, #32]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f8cd 	bl	8001f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e01a      	b.n	8001de2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2220      	movs	r2, #32
 8001db2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_I2C_Master_Receive+0x1e8>)
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	80002400 	.word	0x80002400
 8001df0:	fe00e800 	.word	0xfe00e800

08001df4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d103      	bne.n	8001e12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d007      	beq.n	8001e30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	619a      	str	r2, [r3, #24]
  }
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4c:	e022      	b.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d01e      	beq.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e56:	f7ff faab 	bl	80013b0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d302      	bcc.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d113      	bne.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00f      	b.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d0cd      	beq.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec8:	e02c      	b.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8ea 	bl	80020a8 <I2C_IsErrorOccurred>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e02a      	b.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d01e      	beq.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7ff fa63 	bl	80013b0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d113      	bne.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e007      	b.n	8001f34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d1cb      	bne.n	8001eca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f48:	e028      	b.n	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f8aa 	bl	80020a8 <I2C_IsErrorOccurred>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e026      	b.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7ff fa27 	bl	80013b0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d302      	bcc.n	8001f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e007      	b.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d1cf      	bne.n	8001f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc0:	e064      	b.n	800208c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f86e 	bl	80020a8 <I2C_IsErrorOccurred>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e062      	b.n	800209c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d138      	bne.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d105      	bne.n	8001ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e04e      	b.n	800209c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b10      	cmp	r3, #16
 800200a:	d107      	bne.n	800201c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2204      	movs	r2, #4
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
 800201a:	e002      	b.n	8002022 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2220      	movs	r2, #32
 8002028:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002036:	400b      	ands	r3, r1
 8002038:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e022      	b.n	800209c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7ff f9ab 	bl	80013b0 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10f      	bne.n	800208c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d193      	bne.n	8001fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	fe00e800 	.word	0xfe00e800

080020a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d075      	beq.n	80021c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2210      	movs	r2, #16
 80020da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020dc:	e056      	b.n	800218c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d052      	beq.n	800218c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff f963 	bl	80013b0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_IsErrorOccurred+0x54>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d147      	bne.n	800218c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800210e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211e:	d12e      	bne.n	800217e <I2C_IsErrorOccurred+0xd6>
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002126:	d02a      	beq.n	800217e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b20      	cmp	r3, #32
 800212c:	d027      	beq.n	800217e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800213e:	f7ff f937 	bl	80013b0 <HAL_GetTick>
 8002142:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002144:	e01b      	b.n	800217e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002146:	f7ff f933 	bl	80013b0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b19      	cmp	r3, #25
 8002152:	d914      	bls.n	800217e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d1dc      	bne.n	8002146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d003      	beq.n	80021a2 <I2C_IsErrorOccurred+0xfa>
 800219a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d09d      	beq.n	80020de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2220      	movs	r2, #32
 80021b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002226:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800222e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01c      	beq.n	8002270 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff fddc 	bl	8001df4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <I2C_IsErrorOccurred+0x1d4>)
 8002248:	400b      	ands	r3, r1
 800224a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	431a      	orrs	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002274:	4618      	mov	r0, r3
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	4613      	mov	r3, r2
 8002290:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002292:	897b      	ldrh	r3, [r7, #10]
 8002294:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002298:	7a7b      	ldrb	r3, [r7, #9]
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	0d5b      	lsrs	r3, r3, #21
 80022ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <I2C_TransferConfig+0x60>)
 80022c0:	430b      	orrs	r3, r1
 80022c2:	43db      	mvns	r3, r3
 80022c4:	ea02 0103 	and.w	r1, r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	03ff63ff 	.word	0x03ff63ff

080022e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d138      	bne.n	800236c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002304:	2302      	movs	r3, #2
 8002306:	e032      	b.n	800236e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	d139      	bne.n	8002404 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800239a:	2302      	movs	r3, #2
 800239c:	e033      	b.n	8002406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2224      	movs	r2, #36	; 0x24
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_PWREx_GetVoltageRange+0x18>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40007000 	.word	0x40007000

08002430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243e:	d130      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244c:	d038      	beq.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800245e:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2232      	movs	r2, #50	; 0x32
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002474:	e002      	b.n	800247c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3b01      	subs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002488:	d102      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x60>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f2      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	d110      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e00f      	b.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d007      	beq.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b8:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40007000 	.word	0x40007000
 80024d4:	20000000 	.word	0x20000000
 80024d8:	431bde83 	.word	0x431bde83

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 bc02 	b.w	8002cf4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	4b96      	ldr	r3, [pc, #600]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fa:	4b94      	ldr	r3, [pc, #592]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80e4 	beq.w	80026da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x4c>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	f040 808b 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 8087 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x64>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e3d9      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_RCC_OscConfig+0x7e>
 8002550:	4b7e      	ldr	r3, [pc, #504]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	e005      	b.n	8002566 <HAL_RCC_OscConfig+0x8a>
 800255a:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002566:	4293      	cmp	r3, r2
 8002568:	d223      	bcs.n	80025b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fd8c 	bl	800308c <RCC_SetFlashLatencyFromMSIRange>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e3ba      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a72      	ldr	r2, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b70      	ldr	r3, [pc, #448]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	496d      	ldr	r1, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259c:	4b6b      	ldr	r3, [pc, #428]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4968      	ldr	r1, [pc, #416]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e025      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a65      	ldr	r2, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4960      	ldr	r1, [pc, #384]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	495b      	ldr	r1, [pc, #364]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fd4c 	bl	800308c <RCC_SetFlashLatencyFromMSIRange>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e37a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025fe:	f000 fc81 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b51      	ldr	r3, [pc, #324]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4950      	ldr	r1, [pc, #320]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_RCC_OscConfig+0x278>)
 800261c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800261e:	4b4e      	ldr	r3, [pc, #312]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fe74 	bl	8001310 <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d052      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e35e      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d032      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263e:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264a:	f7fe feb1 	bl	80013b0 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002652:	f7fe fead 	bl	80013b0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e347      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a35      	ldr	r2, [pc, #212]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4930      	ldr	r1, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	492b      	ldr	r1, [pc, #172]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	e01a      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fe7e 	bl	80013b0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b8:	f7fe fe7a 	bl	80013b0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e314      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1dc>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d073      	beq.n	80027ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x21c>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d10e      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d063      	beq.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d15f      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2f1      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x24c>
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0b      	ldr	r2, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e025      	b.n	8002774 <HAL_RCC_OscConfig+0x298>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d114      	bne.n	800275c <HAL_RCC_OscConfig+0x280>
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a02      	ldr	r2, [pc, #8]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x298>
 800274c:	40021000 	.word	0x40021000
 8002750:	08004b0c 	.word	0x08004b0c
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004
 800275c:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a9f      	ldr	r2, [pc, #636]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b9d      	ldr	r3, [pc, #628]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9c      	ldr	r2, [pc, #624]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fe18 	bl	80013b0 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fe14 	bl	80013b0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e2ae      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002796:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x2a8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe04 	bl	80013b0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fe00 	bl	80013b0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e29a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d0>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d060      	beq.n	800289c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x310>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d119      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d116      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x328>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e277      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4973      	ldr	r1, [pc, #460]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	e040      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d023      	beq.n	800286a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002822:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6e      	ldr	r2, [pc, #440]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fdbf 	bl	80013b0 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe fdbb 	bl	80013b0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e255      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	495f      	ldr	r1, [pc, #380]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e018      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fd9b 	bl	80013b0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fd97 	bl	80013b0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e231      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03c      	beq.n	8002922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fd76 	bl	80013b0 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fd72 	bl	80013b0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e20c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
 80028e8:	e01b      	b.n	8002922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fd59 	bl	80013b0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe fd55 	bl	80013b0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1ef      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ef      	bne.n	8002902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80a6 	beq.w	8002a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6593      	str	r3, [r2, #88]	; 0x58
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002974:	f7fe fd1c 	bl	80013b0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe fd18 	bl	80013b0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1b2      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x508>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4d8>
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b2:	e029      	b.n	8002a08 <HAL_RCC_OscConfig+0x52c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x50c>
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x52c>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	4b9a      	ldr	r3, [pc, #616]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	4a99      	ldr	r2, [pc, #612]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f8:	4b96      	ldr	r3, [pc, #600]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	4a95      	ldr	r2, [pc, #596]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d016      	beq.n	8002a3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe fcce 	bl	80013b0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe fcca 	bl	80013b0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e162      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	4b89      	ldr	r3, [pc, #548]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ed      	beq.n	8002a18 <HAL_RCC_OscConfig+0x53c>
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fcb7 	bl	80013b0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fcb3 	bl	80013b0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e14b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ed      	bne.n	8002a46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a77      	ldr	r2, [pc, #476]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01c      	beq.n	8002aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a90:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a96:	4a6f      	ldr	r2, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fc86 	bl	80013b0 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa8:	f7fe fc82 	bl	80013b0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e11c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aba:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x5cc>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aca:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ad0:	4a60      	ldr	r2, [pc, #384]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fc69 	bl	80013b0 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae2:	f7fe fc65 	bl	80013b0 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0ff      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80f3 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 80c9 	bne.w	8002ca8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b16:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d12c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	3b01      	subs	r3, #1
 8002b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d123      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d11b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d113      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d06b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d062      	beq.n	8002c50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8a:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0ac      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a2d      	ldr	r2, [pc, #180]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba6:	f7fe fc03 	bl	80013b0 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe fbff 	bl	80013b0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e099      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_RCC_OscConfig+0x77c>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bdc:	3a01      	subs	r2, #1
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	4311      	orrs	r1, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002be6:	0212      	lsls	r2, r2, #8
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bee:	0852      	lsrs	r2, r2, #1
 8002bf0:	3a01      	subs	r2, #1
 8002bf2:	0552      	lsls	r2, r2, #21
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bfa:	0852      	lsrs	r2, r2, #1
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0652      	lsls	r2, r2, #25
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c06:	06d2      	lsls	r2, r2, #27
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	4912      	ldr	r1, [pc, #72]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c28:	f7fe fbc2 	bl	80013b0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fbbe 	bl	80013b0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e058      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RCC_OscConfig+0x778>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c4e:	e050      	b.n	8002cf2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e04f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d144      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c80:	f7fe fb96 	bl	80013b0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fb92 	bl	80013b0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e02c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x7ac>
 8002ca6:	e024      	b.n	8002cf2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d01f      	beq.n	8002cee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fb79 	bl	80013b0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fb75 	bl	80013b0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	4905      	ldr	r1, [pc, #20]	; (8002cfc <HAL_RCC_OscConfig+0x820>)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x824>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
 8002cec:	e001      	b.n	8002cf2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	feeefffc 	.word	0xfeeefffc

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0e7      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b75      	ldr	r3, [pc, #468]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4970      	ldr	r1, [pc, #448]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b6e      	ldr	r3, [pc, #440]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0cf      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4960      	ldr	r1, [pc, #384]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04c      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d121      	bne.n	8002dda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0a6      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da2:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e09a      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dba:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e08e      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e086      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4943      	ldr	r1, [pc, #268]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fe fae0 	bl	80013b0 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe fadc 	bl	80013b0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e06e      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d010      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d208      	bcs.n	8002e4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	492b      	ldr	r1, [pc, #172]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4a:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d210      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 0207 	bic.w	r2, r3, #7
 8002e60:	4923      	ldr	r1, [pc, #140]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e036      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	4918      	ldr	r1, [pc, #96]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4910      	ldr	r1, [pc, #64]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb8:	f000 f824 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1fc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fa17 	bl	8001310 <HAL_InitTick>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	08004b0c 	.word	0x08004b0c
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f12:	4b3e      	ldr	r3, [pc, #248]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d121      	bne.n	8002f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d11e      	bne.n	8002f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f38:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f44:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e005      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f60:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e004      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d134      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0xa6>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d003      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xac>
 8002fa8:	e005      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fac:	617b      	str	r3, [r7, #20]
      break;
 8002fae:	e005      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb2:	617b      	str	r3, [r7, #20]
      break;
 8002fb4:	e002      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	617b      	str	r3, [r7, #20]
      break;
 8002fba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	fb03 f202 	mul.w	r2, r3, r2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	0e5b      	lsrs	r3, r3, #25
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	3301      	adds	r3, #1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	08004b24 	.word	0x08004b24
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCC_GetHCLKFreq+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003038:	f7ff fff0 	bl	800301c <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4904      	ldr	r1, [pc, #16]	; (800305c <HAL_RCC_GetPCLK1Freq+0x28>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	08004b1c 	.word	0x08004b1c

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003064:	f7ff ffda 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0adb      	lsrs	r3, r3, #11
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4904      	ldr	r1, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	08004b1c 	.word	0x08004b1c

0800308c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030a4:	f7ff f9b6 	bl	8002414 <HAL_PWREx_GetVoltageRange>
 80030a8:	6178      	str	r0, [r7, #20]
 80030aa:	e014      	b.n	80030d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6593      	str	r3, [r2, #88]	; 0x58
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030c4:	f7ff f9a6 	bl	8002414 <HAL_PWREx_GetVoltageRange>
 80030c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030dc:	d10b      	bne.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d919      	bls.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2ba0      	cmp	r3, #160	; 0xa0
 80030e8:	d902      	bls.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ea:	2302      	movs	r3, #2
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e013      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e010      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d902      	bls.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030fc:	2303      	movs	r3, #3
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e00a      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d102      	bne.n	800310e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003108:	2302      	movs	r3, #2
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e004      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d101      	bne.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003114:	2301      	movs	r3, #1
 8003116:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 0207 	bic.w	r2, r3, #7
 8003120:	4909      	ldr	r1, [pc, #36]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	40022000 	.word	0x40022000

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003154:	2300      	movs	r3, #0
 8003156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003158:	2300      	movs	r3, #0
 800315a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003164:	2b00      	cmp	r3, #0
 8003166:	d031      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003170:	d01a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003172:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003176:	d814      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800317c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003180:	d10f      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003182:	4b5d      	ldr	r3, [pc, #372]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800318e:	e00c      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fa22 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	74fb      	strb	r3, [r7, #19]
      break;
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80031a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b0:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	494e      	ldr	r1, [pc, #312]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031c6:	e001      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 809e 	beq.w	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031de:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003210:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a39      	ldr	r2, [pc, #228]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321c:	f7fe f8c8 	bl	80013b0 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fe f8c4 	bl	80013b0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	74fb      	strb	r3, [r7, #19]
        break;
 8003236:	e005      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003238:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ef      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d15a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01e      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	429a      	cmp	r2, r3
 8003264:	d019      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003272:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe f884 	bl	80013b0 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	e00b      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe f880 	bl	80013b0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d902      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	74fb      	strb	r3, [r7, #19]
            break;
 80032c2:	e006      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ec      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	4904      	ldr	r1, [pc, #16]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003304:	7c7b      	ldrb	r3, [r7, #17]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330a:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	4a8c      	ldr	r2, [pc, #560]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003322:	4b87      	ldr	r3, [pc, #540]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	f023 0203 	bic.w	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4983      	ldr	r1, [pc, #524]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003344:	4b7e      	ldr	r3, [pc, #504]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f023 020c 	bic.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	497b      	ldr	r1, [pc, #492]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	4972      	ldr	r1, [pc, #456]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003388:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	496a      	ldr	r1, [pc, #424]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	4961      	ldr	r1, [pc, #388]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033cc:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4959      	ldr	r1, [pc, #356]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	4950      	ldr	r1, [pc, #320]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	4948      	ldr	r1, [pc, #288]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	493f      	ldr	r1, [pc, #252]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d028      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003454:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003462:	4937      	ldr	r1, [pc, #220]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003472:	d106      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a31      	ldr	r2, [pc, #196]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
 8003480:	e011      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348a:	d10c      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2101      	movs	r1, #1
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f8a4 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c0:	491f      	ldr	r1, [pc, #124]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2101      	movs	r1, #1
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f875 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352e:	d109      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a02      	ldr	r2, [pc, #8]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
 800353c:	e014      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f843 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01c      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003592:	d10c      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	2102      	movs	r1, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f820 	bl	80035e0 <RCCEx_PLLSAI1_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000

080035e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ee:	4b74      	ldr	r3, [pc, #464]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d018      	beq.n	800362c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035fa:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d10d      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
       ||
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003612:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
       ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d047      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	e044      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d018      	beq.n	8003666 <RCCEx_PLLSAI1_Config+0x86>
 8003634:	2b03      	cmp	r3, #3
 8003636:	d825      	bhi.n	8003684 <RCCEx_PLLSAI1_Config+0xa4>
 8003638:	2b01      	cmp	r3, #1
 800363a:	d002      	beq.n	8003642 <RCCEx_PLLSAI1_Config+0x62>
 800363c:	2b02      	cmp	r3, #2
 800363e:	d009      	beq.n	8003654 <RCCEx_PLLSAI1_Config+0x74>
 8003640:	e020      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11d      	bne.n	800368a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003652:	e01a      	b.n	800368a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003654:	4b5a      	ldr	r3, [pc, #360]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d116      	bne.n	800368e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003664:	e013      	b.n	800368e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003672:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003682:	e006      	b.n	8003692 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e004      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800368a:	bf00      	nop
 800368c:	e002      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800368e:	bf00      	nop
 8003690:	e000      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003692:	bf00      	nop
    }

    if(status == HAL_OK)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	430b      	orrs	r3, r1
 80036b0:	4943      	ldr	r1, [pc, #268]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d17c      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a3f      	ldr	r2, [pc, #252]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd fe72 	bl	80013b0 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ce:	e009      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d0:	f7fd fe6e 	bl	80013b0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d902      	bls.n	80036e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	73fb      	strb	r3, [r7, #15]
        break;
 80036e2:	e005      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ef      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d15f      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d110      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003704:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6892      	ldr	r2, [r2, #8]
 800370c:	0211      	lsls	r1, r2, #8
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68d2      	ldr	r2, [r2, #12]
 8003712:	06d2      	lsls	r2, r2, #27
 8003714:	430a      	orrs	r2, r1
 8003716:	492a      	ldr	r1, [pc, #168]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	610b      	str	r3, [r1, #16]
 800371c:	e027      	b.n	800376e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d112      	bne.n	800374a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800372c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6892      	ldr	r2, [r2, #8]
 8003734:	0211      	lsls	r1, r2, #8
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6912      	ldr	r2, [r2, #16]
 800373a:	0852      	lsrs	r2, r2, #1
 800373c:	3a01      	subs	r2, #1
 800373e:	0552      	lsls	r2, r2, #21
 8003740:	430a      	orrs	r2, r1
 8003742:	491f      	ldr	r1, [pc, #124]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	610b      	str	r3, [r1, #16]
 8003748:	e011      	b.n	800376e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003752:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	0211      	lsls	r1, r2, #8
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6952      	ldr	r2, [r2, #20]
 8003760:	0852      	lsrs	r2, r2, #1
 8003762:	3a01      	subs	r2, #1
 8003764:	0652      	lsls	r2, r2, #25
 8003766:	430a      	orrs	r2, r1
 8003768:	4915      	ldr	r1, [pc, #84]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800376a:	4313      	orrs	r3, r2
 800376c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003778:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fd fe19 	bl	80013b0 <HAL_GetTick>
 800377e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003780:	e009      	b.n	8003796 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003782:	f7fd fe15 	bl	80013b0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	73fb      	strb	r3, [r7, #15]
          break;
 8003794:	e005      	b.n	80037a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ef      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e040      	b.n	8003858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fc7c 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	; 0x24
 80037f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8c0 	bl	8003988 <UART_SetConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fb0e 	bl	8003e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fb95 	bl	8003f80 <UART_CheckIdleState>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003874:	2b20      	cmp	r3, #32
 8003876:	f040 8082 	bne.w	800397e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_Transmit+0x26>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07a      	b.n	8003980 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UART_Transmit+0x38>
 8003894:	2302      	movs	r3, #2
 8003896:	e073      	b.n	8003980 <HAL_UART_Transmit+0x120>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2221      	movs	r2, #33	; 0x21
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ae:	f7fd fd7f 	bl	80013b0 <HAL_GetTick>
 80038b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x80>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038f0:	e02d      	b.n	800394e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fb88 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e039      	b.n	8003980 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391e:	b292      	uxth	r2, r2
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3302      	adds	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e008      	b.n	800393c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	b292      	uxth	r2, r2
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1cb      	bne.n	80038f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	2140      	movs	r1, #64	; 0x40
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fb54 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e005      	b.n	8003980 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800398c:	b08a      	sub	sp, #40	; 0x28
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b9e      	ldr	r3, [pc, #632]	; (8003c30 <UART_SetConfig+0x2a8>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a93      	ldr	r2, [pc, #588]	; (8003c34 <UART_SetConfig+0x2ac>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	4313      	orrs	r3, r2
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a8a      	ldr	r2, [pc, #552]	; (8003c38 <UART_SetConfig+0x2b0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d126      	bne.n	8003a60 <UART_SetConfig+0xd8>
 8003a12:	4b8a      	ldr	r3, [pc, #552]	; (8003c3c <UART_SetConfig+0x2b4>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d81b      	bhi.n	8003a58 <UART_SetConfig+0xd0>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <UART_SetConfig+0xa0>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a49 	.word	0x08003a49
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e0ab      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a40:	2302      	movs	r3, #2
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e0a7      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e0a3      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a50:	2308      	movs	r3, #8
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e09f      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5e:	e09b      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a76      	ldr	r2, [pc, #472]	; (8003c40 <UART_SetConfig+0x2b8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d138      	bne.n	8003adc <UART_SetConfig+0x154>
 8003a6a:	4b74      	ldr	r3, [pc, #464]	; (8003c3c <UART_SetConfig+0x2b4>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d82d      	bhi.n	8003ad4 <UART_SetConfig+0x14c>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0xf8>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003ad5 	.word	0x08003ad5
 8003a88:	08003ad5 	.word	0x08003ad5
 8003a8c:	08003ad5 	.word	0x08003ad5
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003ad5 	.word	0x08003ad5
 8003a98:	08003ad5 	.word	0x08003ad5
 8003a9c:	08003ad5 	.word	0x08003ad5
 8003aa0:	08003abd 	.word	0x08003abd
 8003aa4:	08003ad5 	.word	0x08003ad5
 8003aa8:	08003ad5 	.word	0x08003ad5
 8003aac:	08003ad5 	.word	0x08003ad5
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e06d      	b.n	8003b98 <UART_SetConfig+0x210>
 8003abc:	2302      	movs	r3, #2
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e069      	b.n	8003b98 <UART_SetConfig+0x210>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e065      	b.n	8003b98 <UART_SetConfig+0x210>
 8003acc:	2308      	movs	r3, #8
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e061      	b.n	8003b98 <UART_SetConfig+0x210>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e05d      	b.n	8003b98 <UART_SetConfig+0x210>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <UART_SetConfig+0x2bc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d125      	bne.n	8003b32 <UART_SetConfig+0x1aa>
 8003ae6:	4b55      	ldr	r3, [pc, #340]	; (8003c3c <UART_SetConfig+0x2b4>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d016      	beq.n	8003b22 <UART_SetConfig+0x19a>
 8003af4:	2b30      	cmp	r3, #48	; 0x30
 8003af6:	d818      	bhi.n	8003b2a <UART_SetConfig+0x1a2>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d00a      	beq.n	8003b12 <UART_SetConfig+0x18a>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d814      	bhi.n	8003b2a <UART_SetConfig+0x1a2>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <UART_SetConfig+0x182>
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d008      	beq.n	8003b1a <UART_SetConfig+0x192>
 8003b08:	e00f      	b.n	8003b2a <UART_SetConfig+0x1a2>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b10:	e042      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b12:	2302      	movs	r3, #2
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b18:	e03e      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b20:	e03a      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b22:	2308      	movs	r3, #8
 8003b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b28:	e036      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b2a:	2310      	movs	r3, #16
 8003b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b30:	e032      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a3f      	ldr	r2, [pc, #252]	; (8003c34 <UART_SetConfig+0x2ac>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d12a      	bne.n	8003b92 <UART_SetConfig+0x20a>
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <UART_SetConfig+0x2b4>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b4a:	d01a      	beq.n	8003b82 <UART_SetConfig+0x1fa>
 8003b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b50:	d81b      	bhi.n	8003b8a <UART_SetConfig+0x202>
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b56:	d00c      	beq.n	8003b72 <UART_SetConfig+0x1ea>
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d815      	bhi.n	8003b8a <UART_SetConfig+0x202>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <UART_SetConfig+0x1e2>
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b66:	d008      	beq.n	8003b7a <UART_SetConfig+0x1f2>
 8003b68:	e00f      	b.n	8003b8a <UART_SetConfig+0x202>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b70:	e012      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b72:	2302      	movs	r3, #2
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b78:	e00e      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b80:	e00a      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b82:	2308      	movs	r3, #8
 8003b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b88:	e006      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b90:	e002      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b92:	2310      	movs	r3, #16
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <UART_SetConfig+0x2ac>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f040 808a 	bne.w	8003cb8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d824      	bhi.n	8003bf6 <UART_SetConfig+0x26e>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x22c>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003bf7 	.word	0x08003bf7
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003bf7 	.word	0x08003bf7
 8003bc4:	08003be7 	.word	0x08003be7
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003bf7 	.word	0x08003bf7
 8003bd0:	08003bf7 	.word	0x08003bf7
 8003bd4:	08003bef 	.word	0x08003bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7ff fa2c 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	61f8      	str	r0, [r7, #28]
        break;
 8003bde:	e010      	b.n	8003c02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <UART_SetConfig+0x2c0>)
 8003be2:	61fb      	str	r3, [r7, #28]
        break;
 8003be4:	e00d      	b.n	8003c02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7ff f98d 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003bea:	61f8      	str	r0, [r7, #28]
        break;
 8003bec:	e009      	b.n	8003c02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	61fb      	str	r3, [r7, #28]
        break;
 8003bf4:	e005      	b.n	8003c02 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8109 	beq.w	8003e1c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d305      	bcc.n	8003c26 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d912      	bls.n	8003c4c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c2c:	e0f6      	b.n	8003e1c <UART_SetConfig+0x494>
 8003c2e:	bf00      	nop
 8003c30:	efff69f3 	.word	0xefff69f3
 8003c34:	40008000 	.word	0x40008000
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40004400 	.word	0x40004400
 8003c44:	40004800 	.word	0x40004800
 8003c48:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	461c      	mov	r4, r3
 8003c52:	4615      	mov	r5, r2
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	022b      	lsls	r3, r5, #8
 8003c5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c62:	0222      	lsls	r2, r4, #8
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	6849      	ldr	r1, [r1, #4]
 8003c68:	0849      	lsrs	r1, r1, #1
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	4688      	mov	r8, r1
 8003c6e:	4681      	mov	r9, r0
 8003c70:	eb12 0a08 	adds.w	sl, r2, r8
 8003c74:	eb43 0b09 	adc.w	fp, r3, r9
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c86:	4650      	mov	r0, sl
 8003c88:	4659      	mov	r1, fp
 8003c8a:	f7fc fe2f 	bl	80008ec <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4613      	mov	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9c:	d308      	bcc.n	8003cb0 <UART_SetConfig+0x328>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca4:	d204      	bcs.n	8003cb0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	e0b5      	b.n	8003e1c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cb6:	e0b1      	b.n	8003e1c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d15d      	bne.n	8003d7e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d827      	bhi.n	8003d1a <UART_SetConfig+0x392>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x348>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003cfd 	.word	0x08003cfd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7ff f99e 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	61f8      	str	r0, [r7, #28]
        break;
 8003cfa:	e014      	b.n	8003d26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cfc:	f7ff f9b0 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003d00:	61f8      	str	r0, [r7, #28]
        break;
 8003d02:	e010      	b.n	8003d26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <UART_SetConfig+0x4b0>)
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e00d      	b.n	8003d26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7ff f8fb 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003d0e:	61f8      	str	r0, [r7, #28]
        break;
 8003d10:	e009      	b.n	8003d26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	61fb      	str	r3, [r7, #28]
        break;
 8003d18:	e005      	b.n	8003d26 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d077      	beq.n	8003e1c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005a      	lsls	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	441a      	add	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d916      	bls.n	8003d76 <UART_SetConfig+0x3ee>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d212      	bcs.n	8003d76 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f023 030f 	bic.w	r3, r3, #15
 8003d58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	8afa      	ldrh	r2, [r7, #22]
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	e052      	b.n	8003e1c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d7c:	e04e      	b.n	8003e1c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d827      	bhi.n	8003dd6 <UART_SetConfig+0x44e>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UART_SetConfig+0x404>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003dc1 	.word	0x08003dc1
 8003d98:	08003dd7 	.word	0x08003dd7
 8003d9c:	08003dc7 	.word	0x08003dc7
 8003da0:	08003dd7 	.word	0x08003dd7
 8003da4:	08003dd7 	.word	0x08003dd7
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7ff f940 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8003db4:	61f8      	str	r0, [r7, #28]
        break;
 8003db6:	e014      	b.n	8003de2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7ff f952 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	61f8      	str	r0, [r7, #28]
        break;
 8003dbe:	e010      	b.n	8003de2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <UART_SetConfig+0x4b0>)
 8003dc2:	61fb      	str	r3, [r7, #28]
        break;
 8003dc4:	e00d      	b.n	8003de2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7ff f89d 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8003dca:	61f8      	str	r0, [r7, #28]
        break;
 8003dcc:	e009      	b.n	8003de2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd2:	61fb      	str	r3, [r7, #28]
        break;
 8003dd4:	e005      	b.n	8003de2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003de0:	bf00      	nop
    }

    if (pclk != 0U)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d019      	beq.n	8003e1c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	085a      	lsrs	r2, r3, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	441a      	add	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d909      	bls.n	8003e16 <UART_SetConfig+0x48e>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d205      	bcs.n	8003e16 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e002      	b.n	8003e1c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e36:	bf00      	nop
 8003e38:	00f42400 	.word	0x00f42400

08003e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01a      	beq.n	8003f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3a:	d10a      	bne.n	8003f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f90:	f7fd fa0e 	bl	80013b0 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d10e      	bne.n	8003fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f82d 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e023      	b.n	800400a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d10e      	bne.n	8003fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f817 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e00d      	b.n	800400a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b09c      	sub	sp, #112	; 0x70
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004022:	e0a5      	b.n	8004170 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	f000 80a1 	beq.w	8004170 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402e:	f7fd f9bf 	bl	80013b0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <UART_WaitOnFlagUntilTimeout+0x32>
 800403e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004040:	2b00      	cmp	r3, #0
 8004042:	d13e      	bne.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004064:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e6      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3308      	adds	r3, #8
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	663b      	str	r3, [r7, #96]	; 0x60
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004096:	64ba      	str	r2, [r7, #72]	; 0x48
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800409c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e5      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e067      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d04f      	beq.n	8004170 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040de:	d147      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
 800410a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800410e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e6      	bne.n	80040ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	613b      	str	r3, [r7, #16]
   return(result);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	66bb      	str	r3, [r7, #104]	; 0x68
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800413c:	623a      	str	r2, [r7, #32]
 800413e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	69f9      	ldr	r1, [r7, #28]
 8004142:	6a3a      	ldr	r2, [r7, #32]
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	61bb      	str	r3, [r7, #24]
   return(result);
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e010      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4013      	ands	r3, r2
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	429a      	cmp	r2, r3
 800418c:	f43f af4a 	beq.w	8004024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3770      	adds	r7, #112	; 0x70
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <__errno>:
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <__errno+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2000000c 	.word	0x2000000c

080041a8 <__libc_init_array>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4d0d      	ldr	r5, [pc, #52]	; (80041e0 <__libc_init_array+0x38>)
 80041ac:	4c0d      	ldr	r4, [pc, #52]	; (80041e4 <__libc_init_array+0x3c>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	2600      	movs	r6, #0
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	d109      	bne.n	80041cc <__libc_init_array+0x24>
 80041b8:	4d0b      	ldr	r5, [pc, #44]	; (80041e8 <__libc_init_array+0x40>)
 80041ba:	4c0c      	ldr	r4, [pc, #48]	; (80041ec <__libc_init_array+0x44>)
 80041bc:	f000 fc8e 	bl	8004adc <_init>
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	2600      	movs	r6, #0
 80041c6:	42a6      	cmp	r6, r4
 80041c8:	d105      	bne.n	80041d6 <__libc_init_array+0x2e>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d0:	4798      	blx	r3
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7ee      	b.n	80041b4 <__libc_init_array+0xc>
 80041d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041da:	4798      	blx	r3
 80041dc:	3601      	adds	r6, #1
 80041de:	e7f2      	b.n	80041c6 <__libc_init_array+0x1e>
 80041e0:	08004b90 	.word	0x08004b90
 80041e4:	08004b90 	.word	0x08004b90
 80041e8:	08004b90 	.word	0x08004b90
 80041ec:	08004b94 	.word	0x08004b94

080041f0 <memset>:
 80041f0:	4402      	add	r2, r0
 80041f2:	4603      	mov	r3, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	b500      	push	{lr}
 8004204:	b09c      	sub	sp, #112	; 0x70
 8004206:	ab1d      	add	r3, sp, #116	; 0x74
 8004208:	9002      	str	r0, [sp, #8]
 800420a:	9006      	str	r0, [sp, #24]
 800420c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004210:	4809      	ldr	r0, [pc, #36]	; (8004238 <siprintf+0x38>)
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	9104      	str	r1, [sp, #16]
 8004216:	4909      	ldr	r1, [pc, #36]	; (800423c <siprintf+0x3c>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	a902      	add	r1, sp, #8
 8004224:	f000 f868 	bl	80042f8 <_svfiprintf_r>
 8004228:	9b02      	ldr	r3, [sp, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	b01c      	add	sp, #112	; 0x70
 8004230:	f85d eb04 	ldr.w	lr, [sp], #4
 8004234:	b003      	add	sp, #12
 8004236:	4770      	bx	lr
 8004238:	2000000c 	.word	0x2000000c
 800423c:	ffff0208 	.word	0xffff0208

08004240 <__ssputs_r>:
 8004240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	688e      	ldr	r6, [r1, #8]
 8004246:	429e      	cmp	r6, r3
 8004248:	4682      	mov	sl, r0
 800424a:	460c      	mov	r4, r1
 800424c:	4690      	mov	r8, r2
 800424e:	461f      	mov	r7, r3
 8004250:	d838      	bhi.n	80042c4 <__ssputs_r+0x84>
 8004252:	898a      	ldrh	r2, [r1, #12]
 8004254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004258:	d032      	beq.n	80042c0 <__ssputs_r+0x80>
 800425a:	6825      	ldr	r5, [r4, #0]
 800425c:	6909      	ldr	r1, [r1, #16]
 800425e:	eba5 0901 	sub.w	r9, r5, r1
 8004262:	6965      	ldr	r5, [r4, #20]
 8004264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800426c:	3301      	adds	r3, #1
 800426e:	444b      	add	r3, r9
 8004270:	106d      	asrs	r5, r5, #1
 8004272:	429d      	cmp	r5, r3
 8004274:	bf38      	it	cc
 8004276:	461d      	movcc	r5, r3
 8004278:	0553      	lsls	r3, r2, #21
 800427a:	d531      	bpl.n	80042e0 <__ssputs_r+0xa0>
 800427c:	4629      	mov	r1, r5
 800427e:	f000 fb63 	bl	8004948 <_malloc_r>
 8004282:	4606      	mov	r6, r0
 8004284:	b950      	cbnz	r0, 800429c <__ssputs_r+0x5c>
 8004286:	230c      	movs	r3, #12
 8004288:	f8ca 3000 	str.w	r3, [sl]
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	464a      	mov	r2, r9
 80042a0:	f000 fabe 	bl	8004820 <memcpy>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	6165      	str	r5, [r4, #20]
 80042b4:	444e      	add	r6, r9
 80042b6:	eba5 0509 	sub.w	r5, r5, r9
 80042ba:	6026      	str	r6, [r4, #0]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	463e      	mov	r6, r7
 80042c0:	42be      	cmp	r6, r7
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x86>
 80042c4:	463e      	mov	r6, r7
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	4632      	mov	r2, r6
 80042ca:	4641      	mov	r1, r8
 80042cc:	f000 fab6 	bl	800483c <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	1b9b      	subs	r3, r3, r6
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4433      	add	r3, r6
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2000      	movs	r0, #0
 80042de:	e7db      	b.n	8004298 <__ssputs_r+0x58>
 80042e0:	462a      	mov	r2, r5
 80042e2:	f000 fba5 	bl	8004a30 <_realloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1e1      	bne.n	80042b0 <__ssputs_r+0x70>
 80042ec:	6921      	ldr	r1, [r4, #16]
 80042ee:	4650      	mov	r0, sl
 80042f0:	f000 fabe 	bl	8004870 <_free_r>
 80042f4:	e7c7      	b.n	8004286 <__ssputs_r+0x46>
	...

080042f8 <_svfiprintf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	4698      	mov	r8, r3
 80042fe:	898b      	ldrh	r3, [r1, #12]
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	b09d      	sub	sp, #116	; 0x74
 8004304:	4607      	mov	r7, r0
 8004306:	460d      	mov	r5, r1
 8004308:	4614      	mov	r4, r2
 800430a:	d50e      	bpl.n	800432a <_svfiprintf_r+0x32>
 800430c:	690b      	ldr	r3, [r1, #16]
 800430e:	b963      	cbnz	r3, 800432a <_svfiprintf_r+0x32>
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	f000 fb19 	bl	8004948 <_malloc_r>
 8004316:	6028      	str	r0, [r5, #0]
 8004318:	6128      	str	r0, [r5, #16]
 800431a:	b920      	cbnz	r0, 8004326 <_svfiprintf_r+0x2e>
 800431c:	230c      	movs	r3, #12
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	e0d1      	b.n	80044ca <_svfiprintf_r+0x1d2>
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	616b      	str	r3, [r5, #20]
 800432a:	2300      	movs	r3, #0
 800432c:	9309      	str	r3, [sp, #36]	; 0x24
 800432e:	2320      	movs	r3, #32
 8004330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004334:	f8cd 800c 	str.w	r8, [sp, #12]
 8004338:	2330      	movs	r3, #48	; 0x30
 800433a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044e4 <_svfiprintf_r+0x1ec>
 800433e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004342:	f04f 0901 	mov.w	r9, #1
 8004346:	4623      	mov	r3, r4
 8004348:	469a      	mov	sl, r3
 800434a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800434e:	b10a      	cbz	r2, 8004354 <_svfiprintf_r+0x5c>
 8004350:	2a25      	cmp	r2, #37	; 0x25
 8004352:	d1f9      	bne.n	8004348 <_svfiprintf_r+0x50>
 8004354:	ebba 0b04 	subs.w	fp, sl, r4
 8004358:	d00b      	beq.n	8004372 <_svfiprintf_r+0x7a>
 800435a:	465b      	mov	r3, fp
 800435c:	4622      	mov	r2, r4
 800435e:	4629      	mov	r1, r5
 8004360:	4638      	mov	r0, r7
 8004362:	f7ff ff6d 	bl	8004240 <__ssputs_r>
 8004366:	3001      	adds	r0, #1
 8004368:	f000 80aa 	beq.w	80044c0 <_svfiprintf_r+0x1c8>
 800436c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800436e:	445a      	add	r2, fp
 8004370:	9209      	str	r2, [sp, #36]	; 0x24
 8004372:	f89a 3000 	ldrb.w	r3, [sl]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a2 	beq.w	80044c0 <_svfiprintf_r+0x1c8>
 800437c:	2300      	movs	r3, #0
 800437e:	f04f 32ff 	mov.w	r2, #4294967295
 8004382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004386:	f10a 0a01 	add.w	sl, sl, #1
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	9307      	str	r3, [sp, #28]
 800438e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004392:	931a      	str	r3, [sp, #104]	; 0x68
 8004394:	4654      	mov	r4, sl
 8004396:	2205      	movs	r2, #5
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	4851      	ldr	r0, [pc, #324]	; (80044e4 <_svfiprintf_r+0x1ec>)
 800439e:	f7fb ff1f 	bl	80001e0 <memchr>
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	b9d8      	cbnz	r0, 80043de <_svfiprintf_r+0xe6>
 80043a6:	06d0      	lsls	r0, r2, #27
 80043a8:	bf44      	itt	mi
 80043aa:	2320      	movmi	r3, #32
 80043ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b0:	0711      	lsls	r1, r2, #28
 80043b2:	bf44      	itt	mi
 80043b4:	232b      	movmi	r3, #43	; 0x2b
 80043b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ba:	f89a 3000 	ldrb.w	r3, [sl]
 80043be:	2b2a      	cmp	r3, #42	; 0x2a
 80043c0:	d015      	beq.n	80043ee <_svfiprintf_r+0xf6>
 80043c2:	9a07      	ldr	r2, [sp, #28]
 80043c4:	4654      	mov	r4, sl
 80043c6:	2000      	movs	r0, #0
 80043c8:	f04f 0c0a 	mov.w	ip, #10
 80043cc:	4621      	mov	r1, r4
 80043ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d2:	3b30      	subs	r3, #48	; 0x30
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	d94e      	bls.n	8004476 <_svfiprintf_r+0x17e>
 80043d8:	b1b0      	cbz	r0, 8004408 <_svfiprintf_r+0x110>
 80043da:	9207      	str	r2, [sp, #28]
 80043dc:	e014      	b.n	8004408 <_svfiprintf_r+0x110>
 80043de:	eba0 0308 	sub.w	r3, r0, r8
 80043e2:	fa09 f303 	lsl.w	r3, r9, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	46a2      	mov	sl, r4
 80043ec:	e7d2      	b.n	8004394 <_svfiprintf_r+0x9c>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	1d19      	adds	r1, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9103      	str	r1, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfbb      	ittet	lt
 80043fa:	425b      	neglt	r3, r3
 80043fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004400:	9307      	strge	r3, [sp, #28]
 8004402:	9307      	strlt	r3, [sp, #28]
 8004404:	bfb8      	it	lt
 8004406:	9204      	strlt	r2, [sp, #16]
 8004408:	7823      	ldrb	r3, [r4, #0]
 800440a:	2b2e      	cmp	r3, #46	; 0x2e
 800440c:	d10c      	bne.n	8004428 <_svfiprintf_r+0x130>
 800440e:	7863      	ldrb	r3, [r4, #1]
 8004410:	2b2a      	cmp	r3, #42	; 0x2a
 8004412:	d135      	bne.n	8004480 <_svfiprintf_r+0x188>
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	1d1a      	adds	r2, r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	9203      	str	r2, [sp, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	bfb8      	it	lt
 8004420:	f04f 33ff 	movlt.w	r3, #4294967295
 8004424:	3402      	adds	r4, #2
 8004426:	9305      	str	r3, [sp, #20]
 8004428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044f4 <_svfiprintf_r+0x1fc>
 800442c:	7821      	ldrb	r1, [r4, #0]
 800442e:	2203      	movs	r2, #3
 8004430:	4650      	mov	r0, sl
 8004432:	f7fb fed5 	bl	80001e0 <memchr>
 8004436:	b140      	cbz	r0, 800444a <_svfiprintf_r+0x152>
 8004438:	2340      	movs	r3, #64	; 0x40
 800443a:	eba0 000a 	sub.w	r0, r0, sl
 800443e:	fa03 f000 	lsl.w	r0, r3, r0
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	4303      	orrs	r3, r0
 8004446:	3401      	adds	r4, #1
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444e:	4826      	ldr	r0, [pc, #152]	; (80044e8 <_svfiprintf_r+0x1f0>)
 8004450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004454:	2206      	movs	r2, #6
 8004456:	f7fb fec3 	bl	80001e0 <memchr>
 800445a:	2800      	cmp	r0, #0
 800445c:	d038      	beq.n	80044d0 <_svfiprintf_r+0x1d8>
 800445e:	4b23      	ldr	r3, [pc, #140]	; (80044ec <_svfiprintf_r+0x1f4>)
 8004460:	bb1b      	cbnz	r3, 80044aa <_svfiprintf_r+0x1b2>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	3308      	adds	r3, #8
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	4433      	add	r3, r6
 8004472:	9309      	str	r3, [sp, #36]	; 0x24
 8004474:	e767      	b.n	8004346 <_svfiprintf_r+0x4e>
 8004476:	fb0c 3202 	mla	r2, ip, r2, r3
 800447a:	460c      	mov	r4, r1
 800447c:	2001      	movs	r0, #1
 800447e:	e7a5      	b.n	80043cc <_svfiprintf_r+0xd4>
 8004480:	2300      	movs	r3, #0
 8004482:	3401      	adds	r4, #1
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	4619      	mov	r1, r3
 8004488:	f04f 0c0a 	mov.w	ip, #10
 800448c:	4620      	mov	r0, r4
 800448e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004492:	3a30      	subs	r2, #48	; 0x30
 8004494:	2a09      	cmp	r2, #9
 8004496:	d903      	bls.n	80044a0 <_svfiprintf_r+0x1a8>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0c5      	beq.n	8004428 <_svfiprintf_r+0x130>
 800449c:	9105      	str	r1, [sp, #20]
 800449e:	e7c3      	b.n	8004428 <_svfiprintf_r+0x130>
 80044a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a4:	4604      	mov	r4, r0
 80044a6:	2301      	movs	r3, #1
 80044a8:	e7f0      	b.n	800448c <_svfiprintf_r+0x194>
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <_svfiprintf_r+0x1f8>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	4638      	mov	r0, r7
 80044b6:	f3af 8000 	nop.w
 80044ba:	1c42      	adds	r2, r0, #1
 80044bc:	4606      	mov	r6, r0
 80044be:	d1d6      	bne.n	800446e <_svfiprintf_r+0x176>
 80044c0:	89ab      	ldrh	r3, [r5, #12]
 80044c2:	065b      	lsls	r3, r3, #25
 80044c4:	f53f af2c 	bmi.w	8004320 <_svfiprintf_r+0x28>
 80044c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ca:	b01d      	add	sp, #116	; 0x74
 80044cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	462a      	mov	r2, r5
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <_svfiprintf_r+0x1f8>)
 80044d8:	a904      	add	r1, sp, #16
 80044da:	4638      	mov	r0, r7
 80044dc:	f000 f87a 	bl	80045d4 <_printf_i>
 80044e0:	e7eb      	b.n	80044ba <_svfiprintf_r+0x1c2>
 80044e2:	bf00      	nop
 80044e4:	08004b54 	.word	0x08004b54
 80044e8:	08004b5e 	.word	0x08004b5e
 80044ec:	00000000 	.word	0x00000000
 80044f0:	08004241 	.word	0x08004241
 80044f4:	08004b5a 	.word	0x08004b5a

080044f8 <_printf_common>:
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	4616      	mov	r6, r2
 80044fe:	4699      	mov	r9, r3
 8004500:	688a      	ldr	r2, [r1, #8]
 8004502:	690b      	ldr	r3, [r1, #16]
 8004504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004508:	4293      	cmp	r3, r2
 800450a:	bfb8      	it	lt
 800450c:	4613      	movlt	r3, r2
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004514:	4607      	mov	r7, r0
 8004516:	460c      	mov	r4, r1
 8004518:	b10a      	cbz	r2, 800451e <_printf_common+0x26>
 800451a:	3301      	adds	r3, #1
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	0699      	lsls	r1, r3, #26
 8004522:	bf42      	ittt	mi
 8004524:	6833      	ldrmi	r3, [r6, #0]
 8004526:	3302      	addmi	r3, #2
 8004528:	6033      	strmi	r3, [r6, #0]
 800452a:	6825      	ldr	r5, [r4, #0]
 800452c:	f015 0506 	ands.w	r5, r5, #6
 8004530:	d106      	bne.n	8004540 <_printf_common+0x48>
 8004532:	f104 0a19 	add.w	sl, r4, #25
 8004536:	68e3      	ldr	r3, [r4, #12]
 8004538:	6832      	ldr	r2, [r6, #0]
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	42ab      	cmp	r3, r5
 800453e:	dc26      	bgt.n	800458e <_printf_common+0x96>
 8004540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004544:	1e13      	subs	r3, r2, #0
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	bf18      	it	ne
 800454a:	2301      	movne	r3, #1
 800454c:	0692      	lsls	r2, r2, #26
 800454e:	d42b      	bmi.n	80045a8 <_printf_common+0xb0>
 8004550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004554:	4649      	mov	r1, r9
 8004556:	4638      	mov	r0, r7
 8004558:	47c0      	blx	r8
 800455a:	3001      	adds	r0, #1
 800455c:	d01e      	beq.n	800459c <_printf_common+0xa4>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	68e5      	ldr	r5, [r4, #12]
 8004562:	6832      	ldr	r2, [r6, #0]
 8004564:	f003 0306 	and.w	r3, r3, #6
 8004568:	2b04      	cmp	r3, #4
 800456a:	bf08      	it	eq
 800456c:	1aad      	subeq	r5, r5, r2
 800456e:	68a3      	ldr	r3, [r4, #8]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	bf0c      	ite	eq
 8004574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004578:	2500      	movne	r5, #0
 800457a:	4293      	cmp	r3, r2
 800457c:	bfc4      	itt	gt
 800457e:	1a9b      	subgt	r3, r3, r2
 8004580:	18ed      	addgt	r5, r5, r3
 8004582:	2600      	movs	r6, #0
 8004584:	341a      	adds	r4, #26
 8004586:	42b5      	cmp	r5, r6
 8004588:	d11a      	bne.n	80045c0 <_printf_common+0xc8>
 800458a:	2000      	movs	r0, #0
 800458c:	e008      	b.n	80045a0 <_printf_common+0xa8>
 800458e:	2301      	movs	r3, #1
 8004590:	4652      	mov	r2, sl
 8004592:	4649      	mov	r1, r9
 8004594:	4638      	mov	r0, r7
 8004596:	47c0      	blx	r8
 8004598:	3001      	adds	r0, #1
 800459a:	d103      	bne.n	80045a4 <_printf_common+0xac>
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a4:	3501      	adds	r5, #1
 80045a6:	e7c6      	b.n	8004536 <_printf_common+0x3e>
 80045a8:	18e1      	adds	r1, r4, r3
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	2030      	movs	r0, #48	; 0x30
 80045ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045b2:	4422      	add	r2, r4
 80045b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045bc:	3302      	adds	r3, #2
 80045be:	e7c7      	b.n	8004550 <_printf_common+0x58>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4622      	mov	r2, r4
 80045c4:	4649      	mov	r1, r9
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c0      	blx	r8
 80045ca:	3001      	adds	r0, #1
 80045cc:	d0e6      	beq.n	800459c <_printf_common+0xa4>
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7d9      	b.n	8004586 <_printf_common+0x8e>
	...

080045d4 <_printf_i>:
 80045d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045d8:	7e0f      	ldrb	r7, [r1, #24]
 80045da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045dc:	2f78      	cmp	r7, #120	; 0x78
 80045de:	4691      	mov	r9, r2
 80045e0:	4680      	mov	r8, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	469a      	mov	sl, r3
 80045e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ea:	d807      	bhi.n	80045fc <_printf_i+0x28>
 80045ec:	2f62      	cmp	r7, #98	; 0x62
 80045ee:	d80a      	bhi.n	8004606 <_printf_i+0x32>
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	f000 80d8 	beq.w	80047a6 <_printf_i+0x1d2>
 80045f6:	2f58      	cmp	r7, #88	; 0x58
 80045f8:	f000 80a3 	beq.w	8004742 <_printf_i+0x16e>
 80045fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004604:	e03a      	b.n	800467c <_printf_i+0xa8>
 8004606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800460a:	2b15      	cmp	r3, #21
 800460c:	d8f6      	bhi.n	80045fc <_printf_i+0x28>
 800460e:	a101      	add	r1, pc, #4	; (adr r1, 8004614 <_printf_i+0x40>)
 8004610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004614:	0800466d 	.word	0x0800466d
 8004618:	08004681 	.word	0x08004681
 800461c:	080045fd 	.word	0x080045fd
 8004620:	080045fd 	.word	0x080045fd
 8004624:	080045fd 	.word	0x080045fd
 8004628:	080045fd 	.word	0x080045fd
 800462c:	08004681 	.word	0x08004681
 8004630:	080045fd 	.word	0x080045fd
 8004634:	080045fd 	.word	0x080045fd
 8004638:	080045fd 	.word	0x080045fd
 800463c:	080045fd 	.word	0x080045fd
 8004640:	0800478d 	.word	0x0800478d
 8004644:	080046b1 	.word	0x080046b1
 8004648:	0800476f 	.word	0x0800476f
 800464c:	080045fd 	.word	0x080045fd
 8004650:	080045fd 	.word	0x080045fd
 8004654:	080047af 	.word	0x080047af
 8004658:	080045fd 	.word	0x080045fd
 800465c:	080046b1 	.word	0x080046b1
 8004660:	080045fd 	.word	0x080045fd
 8004664:	080045fd 	.word	0x080045fd
 8004668:	08004777 	.word	0x08004777
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	1d1a      	adds	r2, r3, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	602a      	str	r2, [r5, #0]
 8004674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800467c:	2301      	movs	r3, #1
 800467e:	e0a3      	b.n	80047c8 <_printf_i+0x1f4>
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	6829      	ldr	r1, [r5, #0]
 8004684:	0606      	lsls	r6, r0, #24
 8004686:	f101 0304 	add.w	r3, r1, #4
 800468a:	d50a      	bpl.n	80046a2 <_printf_i+0xce>
 800468c:	680e      	ldr	r6, [r1, #0]
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	2e00      	cmp	r6, #0
 8004692:	da03      	bge.n	800469c <_printf_i+0xc8>
 8004694:	232d      	movs	r3, #45	; 0x2d
 8004696:	4276      	negs	r6, r6
 8004698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469c:	485e      	ldr	r0, [pc, #376]	; (8004818 <_printf_i+0x244>)
 800469e:	230a      	movs	r3, #10
 80046a0:	e019      	b.n	80046d6 <_printf_i+0x102>
 80046a2:	680e      	ldr	r6, [r1, #0]
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046aa:	bf18      	it	ne
 80046ac:	b236      	sxthne	r6, r6
 80046ae:	e7ef      	b.n	8004690 <_printf_i+0xbc>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	6820      	ldr	r0, [r4, #0]
 80046b4:	1d19      	adds	r1, r3, #4
 80046b6:	6029      	str	r1, [r5, #0]
 80046b8:	0601      	lsls	r1, r0, #24
 80046ba:	d501      	bpl.n	80046c0 <_printf_i+0xec>
 80046bc:	681e      	ldr	r6, [r3, #0]
 80046be:	e002      	b.n	80046c6 <_printf_i+0xf2>
 80046c0:	0646      	lsls	r6, r0, #25
 80046c2:	d5fb      	bpl.n	80046bc <_printf_i+0xe8>
 80046c4:	881e      	ldrh	r6, [r3, #0]
 80046c6:	4854      	ldr	r0, [pc, #336]	; (8004818 <_printf_i+0x244>)
 80046c8:	2f6f      	cmp	r7, #111	; 0x6f
 80046ca:	bf0c      	ite	eq
 80046cc:	2308      	moveq	r3, #8
 80046ce:	230a      	movne	r3, #10
 80046d0:	2100      	movs	r1, #0
 80046d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046d6:	6865      	ldr	r5, [r4, #4]
 80046d8:	60a5      	str	r5, [r4, #8]
 80046da:	2d00      	cmp	r5, #0
 80046dc:	bfa2      	ittt	ge
 80046de:	6821      	ldrge	r1, [r4, #0]
 80046e0:	f021 0104 	bicge.w	r1, r1, #4
 80046e4:	6021      	strge	r1, [r4, #0]
 80046e6:	b90e      	cbnz	r6, 80046ec <_printf_i+0x118>
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	d04d      	beq.n	8004788 <_printf_i+0x1b4>
 80046ec:	4615      	mov	r5, r2
 80046ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80046f2:	fb03 6711 	mls	r7, r3, r1, r6
 80046f6:	5dc7      	ldrb	r7, [r0, r7]
 80046f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046fc:	4637      	mov	r7, r6
 80046fe:	42bb      	cmp	r3, r7
 8004700:	460e      	mov	r6, r1
 8004702:	d9f4      	bls.n	80046ee <_printf_i+0x11a>
 8004704:	2b08      	cmp	r3, #8
 8004706:	d10b      	bne.n	8004720 <_printf_i+0x14c>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	07de      	lsls	r6, r3, #31
 800470c:	d508      	bpl.n	8004720 <_printf_i+0x14c>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	6861      	ldr	r1, [r4, #4]
 8004712:	4299      	cmp	r1, r3
 8004714:	bfde      	ittt	le
 8004716:	2330      	movle	r3, #48	; 0x30
 8004718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800471c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004720:	1b52      	subs	r2, r2, r5
 8004722:	6122      	str	r2, [r4, #16]
 8004724:	f8cd a000 	str.w	sl, [sp]
 8004728:	464b      	mov	r3, r9
 800472a:	aa03      	add	r2, sp, #12
 800472c:	4621      	mov	r1, r4
 800472e:	4640      	mov	r0, r8
 8004730:	f7ff fee2 	bl	80044f8 <_printf_common>
 8004734:	3001      	adds	r0, #1
 8004736:	d14c      	bne.n	80047d2 <_printf_i+0x1fe>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	b004      	add	sp, #16
 800473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004742:	4835      	ldr	r0, [pc, #212]	; (8004818 <_printf_i+0x244>)
 8004744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004748:	6829      	ldr	r1, [r5, #0]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004750:	6029      	str	r1, [r5, #0]
 8004752:	061d      	lsls	r5, r3, #24
 8004754:	d514      	bpl.n	8004780 <_printf_i+0x1ac>
 8004756:	07df      	lsls	r7, r3, #31
 8004758:	bf44      	itt	mi
 800475a:	f043 0320 	orrmi.w	r3, r3, #32
 800475e:	6023      	strmi	r3, [r4, #0]
 8004760:	b91e      	cbnz	r6, 800476a <_printf_i+0x196>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f023 0320 	bic.w	r3, r3, #32
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	2310      	movs	r3, #16
 800476c:	e7b0      	b.n	80046d0 <_printf_i+0xfc>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	f043 0320 	orr.w	r3, r3, #32
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	2378      	movs	r3, #120	; 0x78
 8004778:	4828      	ldr	r0, [pc, #160]	; (800481c <_printf_i+0x248>)
 800477a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800477e:	e7e3      	b.n	8004748 <_printf_i+0x174>
 8004780:	0659      	lsls	r1, r3, #25
 8004782:	bf48      	it	mi
 8004784:	b2b6      	uxthmi	r6, r6
 8004786:	e7e6      	b.n	8004756 <_printf_i+0x182>
 8004788:	4615      	mov	r5, r2
 800478a:	e7bb      	b.n	8004704 <_printf_i+0x130>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	6826      	ldr	r6, [r4, #0]
 8004790:	6961      	ldr	r1, [r4, #20]
 8004792:	1d18      	adds	r0, r3, #4
 8004794:	6028      	str	r0, [r5, #0]
 8004796:	0635      	lsls	r5, r6, #24
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0x1cc>
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_printf_i+0x1d2>
 80047a0:	0670      	lsls	r0, r6, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0x1c8>
 80047a4:	8019      	strh	r1, [r3, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	4615      	mov	r5, r2
 80047ac:	e7ba      	b.n	8004724 <_printf_i+0x150>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	681d      	ldr	r5, [r3, #0]
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7fb fd10 	bl	80001e0 <memchr>
 80047c0:	b108      	cbz	r0, 80047c6 <_printf_i+0x1f2>
 80047c2:	1b40      	subs	r0, r0, r5
 80047c4:	6060      	str	r0, [r4, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	2300      	movs	r3, #0
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d0:	e7a8      	b.n	8004724 <_printf_i+0x150>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	462a      	mov	r2, r5
 80047d6:	4649      	mov	r1, r9
 80047d8:	4640      	mov	r0, r8
 80047da:	47d0      	blx	sl
 80047dc:	3001      	adds	r0, #1
 80047de:	d0ab      	beq.n	8004738 <_printf_i+0x164>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	079b      	lsls	r3, r3, #30
 80047e4:	d413      	bmi.n	800480e <_printf_i+0x23a>
 80047e6:	68e0      	ldr	r0, [r4, #12]
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	4298      	cmp	r0, r3
 80047ec:	bfb8      	it	lt
 80047ee:	4618      	movlt	r0, r3
 80047f0:	e7a4      	b.n	800473c <_printf_i+0x168>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	47d0      	blx	sl
 80047fc:	3001      	adds	r0, #1
 80047fe:	d09b      	beq.n	8004738 <_printf_i+0x164>
 8004800:	3501      	adds	r5, #1
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	9903      	ldr	r1, [sp, #12]
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	42ab      	cmp	r3, r5
 800480a:	dcf2      	bgt.n	80047f2 <_printf_i+0x21e>
 800480c:	e7eb      	b.n	80047e6 <_printf_i+0x212>
 800480e:	2500      	movs	r5, #0
 8004810:	f104 0619 	add.w	r6, r4, #25
 8004814:	e7f5      	b.n	8004802 <_printf_i+0x22e>
 8004816:	bf00      	nop
 8004818:	08004b65 	.word	0x08004b65
 800481c:	08004b76 	.word	0x08004b76

08004820 <memcpy>:
 8004820:	440a      	add	r2, r1
 8004822:	4291      	cmp	r1, r2
 8004824:	f100 33ff 	add.w	r3, r0, #4294967295
 8004828:	d100      	bne.n	800482c <memcpy+0xc>
 800482a:	4770      	bx	lr
 800482c:	b510      	push	{r4, lr}
 800482e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004836:	4291      	cmp	r1, r2
 8004838:	d1f9      	bne.n	800482e <memcpy+0xe>
 800483a:	bd10      	pop	{r4, pc}

0800483c <memmove>:
 800483c:	4288      	cmp	r0, r1
 800483e:	b510      	push	{r4, lr}
 8004840:	eb01 0402 	add.w	r4, r1, r2
 8004844:	d902      	bls.n	800484c <memmove+0x10>
 8004846:	4284      	cmp	r4, r0
 8004848:	4623      	mov	r3, r4
 800484a:	d807      	bhi.n	800485c <memmove+0x20>
 800484c:	1e43      	subs	r3, r0, #1
 800484e:	42a1      	cmp	r1, r4
 8004850:	d008      	beq.n	8004864 <memmove+0x28>
 8004852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800485a:	e7f8      	b.n	800484e <memmove+0x12>
 800485c:	4402      	add	r2, r0
 800485e:	4601      	mov	r1, r0
 8004860:	428a      	cmp	r2, r1
 8004862:	d100      	bne.n	8004866 <memmove+0x2a>
 8004864:	bd10      	pop	{r4, pc}
 8004866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800486a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800486e:	e7f7      	b.n	8004860 <memmove+0x24>

08004870 <_free_r>:
 8004870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004872:	2900      	cmp	r1, #0
 8004874:	d044      	beq.n	8004900 <_free_r+0x90>
 8004876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487a:	9001      	str	r0, [sp, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f1a1 0404 	sub.w	r4, r1, #4
 8004882:	bfb8      	it	lt
 8004884:	18e4      	addlt	r4, r4, r3
 8004886:	f000 f913 	bl	8004ab0 <__malloc_lock>
 800488a:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <_free_r+0x94>)
 800488c:	9801      	ldr	r0, [sp, #4]
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	b933      	cbnz	r3, 80048a0 <_free_r+0x30>
 8004892:	6063      	str	r3, [r4, #4]
 8004894:	6014      	str	r4, [r2, #0]
 8004896:	b003      	add	sp, #12
 8004898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800489c:	f000 b90e 	b.w	8004abc <__malloc_unlock>
 80048a0:	42a3      	cmp	r3, r4
 80048a2:	d908      	bls.n	80048b6 <_free_r+0x46>
 80048a4:	6825      	ldr	r5, [r4, #0]
 80048a6:	1961      	adds	r1, r4, r5
 80048a8:	428b      	cmp	r3, r1
 80048aa:	bf01      	itttt	eq
 80048ac:	6819      	ldreq	r1, [r3, #0]
 80048ae:	685b      	ldreq	r3, [r3, #4]
 80048b0:	1949      	addeq	r1, r1, r5
 80048b2:	6021      	streq	r1, [r4, #0]
 80048b4:	e7ed      	b.n	8004892 <_free_r+0x22>
 80048b6:	461a      	mov	r2, r3
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	b10b      	cbz	r3, 80048c0 <_free_r+0x50>
 80048bc:	42a3      	cmp	r3, r4
 80048be:	d9fa      	bls.n	80048b6 <_free_r+0x46>
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	1855      	adds	r5, r2, r1
 80048c4:	42a5      	cmp	r5, r4
 80048c6:	d10b      	bne.n	80048e0 <_free_r+0x70>
 80048c8:	6824      	ldr	r4, [r4, #0]
 80048ca:	4421      	add	r1, r4
 80048cc:	1854      	adds	r4, r2, r1
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	6011      	str	r1, [r2, #0]
 80048d2:	d1e0      	bne.n	8004896 <_free_r+0x26>
 80048d4:	681c      	ldr	r4, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	6053      	str	r3, [r2, #4]
 80048da:	4421      	add	r1, r4
 80048dc:	6011      	str	r1, [r2, #0]
 80048de:	e7da      	b.n	8004896 <_free_r+0x26>
 80048e0:	d902      	bls.n	80048e8 <_free_r+0x78>
 80048e2:	230c      	movs	r3, #12
 80048e4:	6003      	str	r3, [r0, #0]
 80048e6:	e7d6      	b.n	8004896 <_free_r+0x26>
 80048e8:	6825      	ldr	r5, [r4, #0]
 80048ea:	1961      	adds	r1, r4, r5
 80048ec:	428b      	cmp	r3, r1
 80048ee:	bf04      	itt	eq
 80048f0:	6819      	ldreq	r1, [r3, #0]
 80048f2:	685b      	ldreq	r3, [r3, #4]
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	bf04      	itt	eq
 80048f8:	1949      	addeq	r1, r1, r5
 80048fa:	6021      	streq	r1, [r4, #0]
 80048fc:	6054      	str	r4, [r2, #4]
 80048fe:	e7ca      	b.n	8004896 <_free_r+0x26>
 8004900:	b003      	add	sp, #12
 8004902:	bd30      	pop	{r4, r5, pc}
 8004904:	2000016c 	.word	0x2000016c

08004908 <sbrk_aligned>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4e0e      	ldr	r6, [pc, #56]	; (8004944 <sbrk_aligned+0x3c>)
 800490c:	460c      	mov	r4, r1
 800490e:	6831      	ldr	r1, [r6, #0]
 8004910:	4605      	mov	r5, r0
 8004912:	b911      	cbnz	r1, 800491a <sbrk_aligned+0x12>
 8004914:	f000 f8bc 	bl	8004a90 <_sbrk_r>
 8004918:	6030      	str	r0, [r6, #0]
 800491a:	4621      	mov	r1, r4
 800491c:	4628      	mov	r0, r5
 800491e:	f000 f8b7 	bl	8004a90 <_sbrk_r>
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	d00a      	beq.n	800493c <sbrk_aligned+0x34>
 8004926:	1cc4      	adds	r4, r0, #3
 8004928:	f024 0403 	bic.w	r4, r4, #3
 800492c:	42a0      	cmp	r0, r4
 800492e:	d007      	beq.n	8004940 <sbrk_aligned+0x38>
 8004930:	1a21      	subs	r1, r4, r0
 8004932:	4628      	mov	r0, r5
 8004934:	f000 f8ac 	bl	8004a90 <_sbrk_r>
 8004938:	3001      	adds	r0, #1
 800493a:	d101      	bne.n	8004940 <sbrk_aligned+0x38>
 800493c:	f04f 34ff 	mov.w	r4, #4294967295
 8004940:	4620      	mov	r0, r4
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	20000170 	.word	0x20000170

08004948 <_malloc_r>:
 8004948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494c:	1ccd      	adds	r5, r1, #3
 800494e:	f025 0503 	bic.w	r5, r5, #3
 8004952:	3508      	adds	r5, #8
 8004954:	2d0c      	cmp	r5, #12
 8004956:	bf38      	it	cc
 8004958:	250c      	movcc	r5, #12
 800495a:	2d00      	cmp	r5, #0
 800495c:	4607      	mov	r7, r0
 800495e:	db01      	blt.n	8004964 <_malloc_r+0x1c>
 8004960:	42a9      	cmp	r1, r5
 8004962:	d905      	bls.n	8004970 <_malloc_r+0x28>
 8004964:	230c      	movs	r3, #12
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	2600      	movs	r6, #0
 800496a:	4630      	mov	r0, r6
 800496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004970:	4e2e      	ldr	r6, [pc, #184]	; (8004a2c <_malloc_r+0xe4>)
 8004972:	f000 f89d 	bl	8004ab0 <__malloc_lock>
 8004976:	6833      	ldr	r3, [r6, #0]
 8004978:	461c      	mov	r4, r3
 800497a:	bb34      	cbnz	r4, 80049ca <_malloc_r+0x82>
 800497c:	4629      	mov	r1, r5
 800497e:	4638      	mov	r0, r7
 8004980:	f7ff ffc2 	bl	8004908 <sbrk_aligned>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	4604      	mov	r4, r0
 8004988:	d14d      	bne.n	8004a26 <_malloc_r+0xde>
 800498a:	6834      	ldr	r4, [r6, #0]
 800498c:	4626      	mov	r6, r4
 800498e:	2e00      	cmp	r6, #0
 8004990:	d140      	bne.n	8004a14 <_malloc_r+0xcc>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	4631      	mov	r1, r6
 8004996:	4638      	mov	r0, r7
 8004998:	eb04 0803 	add.w	r8, r4, r3
 800499c:	f000 f878 	bl	8004a90 <_sbrk_r>
 80049a0:	4580      	cmp	r8, r0
 80049a2:	d13a      	bne.n	8004a1a <_malloc_r+0xd2>
 80049a4:	6821      	ldr	r1, [r4, #0]
 80049a6:	3503      	adds	r5, #3
 80049a8:	1a6d      	subs	r5, r5, r1
 80049aa:	f025 0503 	bic.w	r5, r5, #3
 80049ae:	3508      	adds	r5, #8
 80049b0:	2d0c      	cmp	r5, #12
 80049b2:	bf38      	it	cc
 80049b4:	250c      	movcc	r5, #12
 80049b6:	4629      	mov	r1, r5
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff ffa5 	bl	8004908 <sbrk_aligned>
 80049be:	3001      	adds	r0, #1
 80049c0:	d02b      	beq.n	8004a1a <_malloc_r+0xd2>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	442b      	add	r3, r5
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	e00e      	b.n	80049e8 <_malloc_r+0xa0>
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	1b52      	subs	r2, r2, r5
 80049ce:	d41e      	bmi.n	8004a0e <_malloc_r+0xc6>
 80049d0:	2a0b      	cmp	r2, #11
 80049d2:	d916      	bls.n	8004a02 <_malloc_r+0xba>
 80049d4:	1961      	adds	r1, r4, r5
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	6025      	str	r5, [r4, #0]
 80049da:	bf18      	it	ne
 80049dc:	6059      	strne	r1, [r3, #4]
 80049de:	6863      	ldr	r3, [r4, #4]
 80049e0:	bf08      	it	eq
 80049e2:	6031      	streq	r1, [r6, #0]
 80049e4:	5162      	str	r2, [r4, r5]
 80049e6:	604b      	str	r3, [r1, #4]
 80049e8:	4638      	mov	r0, r7
 80049ea:	f104 060b 	add.w	r6, r4, #11
 80049ee:	f000 f865 	bl	8004abc <__malloc_unlock>
 80049f2:	f026 0607 	bic.w	r6, r6, #7
 80049f6:	1d23      	adds	r3, r4, #4
 80049f8:	1af2      	subs	r2, r6, r3
 80049fa:	d0b6      	beq.n	800496a <_malloc_r+0x22>
 80049fc:	1b9b      	subs	r3, r3, r6
 80049fe:	50a3      	str	r3, [r4, r2]
 8004a00:	e7b3      	b.n	800496a <_malloc_r+0x22>
 8004a02:	6862      	ldr	r2, [r4, #4]
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	bf0c      	ite	eq
 8004a08:	6032      	streq	r2, [r6, #0]
 8004a0a:	605a      	strne	r2, [r3, #4]
 8004a0c:	e7ec      	b.n	80049e8 <_malloc_r+0xa0>
 8004a0e:	4623      	mov	r3, r4
 8004a10:	6864      	ldr	r4, [r4, #4]
 8004a12:	e7b2      	b.n	800497a <_malloc_r+0x32>
 8004a14:	4634      	mov	r4, r6
 8004a16:	6876      	ldr	r6, [r6, #4]
 8004a18:	e7b9      	b.n	800498e <_malloc_r+0x46>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4638      	mov	r0, r7
 8004a20:	f000 f84c 	bl	8004abc <__malloc_unlock>
 8004a24:	e7a1      	b.n	800496a <_malloc_r+0x22>
 8004a26:	6025      	str	r5, [r4, #0]
 8004a28:	e7de      	b.n	80049e8 <_malloc_r+0xa0>
 8004a2a:	bf00      	nop
 8004a2c:	2000016c 	.word	0x2000016c

08004a30 <_realloc_r>:
 8004a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a34:	4680      	mov	r8, r0
 8004a36:	4614      	mov	r4, r2
 8004a38:	460e      	mov	r6, r1
 8004a3a:	b921      	cbnz	r1, 8004a46 <_realloc_r+0x16>
 8004a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a40:	4611      	mov	r1, r2
 8004a42:	f7ff bf81 	b.w	8004948 <_malloc_r>
 8004a46:	b92a      	cbnz	r2, 8004a54 <_realloc_r+0x24>
 8004a48:	f7ff ff12 	bl	8004870 <_free_r>
 8004a4c:	4625      	mov	r5, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a54:	f000 f838 	bl	8004ac8 <_malloc_usable_size_r>
 8004a58:	4284      	cmp	r4, r0
 8004a5a:	4607      	mov	r7, r0
 8004a5c:	d802      	bhi.n	8004a64 <_realloc_r+0x34>
 8004a5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a62:	d812      	bhi.n	8004a8a <_realloc_r+0x5a>
 8004a64:	4621      	mov	r1, r4
 8004a66:	4640      	mov	r0, r8
 8004a68:	f7ff ff6e 	bl	8004948 <_malloc_r>
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d0ed      	beq.n	8004a4e <_realloc_r+0x1e>
 8004a72:	42bc      	cmp	r4, r7
 8004a74:	4622      	mov	r2, r4
 8004a76:	4631      	mov	r1, r6
 8004a78:	bf28      	it	cs
 8004a7a:	463a      	movcs	r2, r7
 8004a7c:	f7ff fed0 	bl	8004820 <memcpy>
 8004a80:	4631      	mov	r1, r6
 8004a82:	4640      	mov	r0, r8
 8004a84:	f7ff fef4 	bl	8004870 <_free_r>
 8004a88:	e7e1      	b.n	8004a4e <_realloc_r+0x1e>
 8004a8a:	4635      	mov	r5, r6
 8004a8c:	e7df      	b.n	8004a4e <_realloc_r+0x1e>
	...

08004a90 <_sbrk_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d06      	ldr	r5, [pc, #24]	; (8004aac <_sbrk_r+0x1c>)
 8004a94:	2300      	movs	r3, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	602b      	str	r3, [r5, #0]
 8004a9c:	f7fc fba6 	bl	80011ec <_sbrk>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_sbrk_r+0x1a>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_sbrk_r+0x1a>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	20000174 	.word	0x20000174

08004ab0 <__malloc_lock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__malloc_lock+0x8>)
 8004ab2:	f000 b811 	b.w	8004ad8 <__retarget_lock_acquire_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	20000178 	.word	0x20000178

08004abc <__malloc_unlock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__malloc_unlock+0x8>)
 8004abe:	f000 b80c 	b.w	8004ada <__retarget_lock_release_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000178 	.word	0x20000178

08004ac8 <_malloc_usable_size_r>:
 8004ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004acc:	1f18      	subs	r0, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfbc      	itt	lt
 8004ad2:	580b      	ldrlt	r3, [r1, r0]
 8004ad4:	18c0      	addlt	r0, r0, r3
 8004ad6:	4770      	bx	lr

08004ad8 <__retarget_lock_acquire_recursive>:
 8004ad8:	4770      	bx	lr

08004ada <__retarget_lock_release_recursive>:
 8004ada:	4770      	bx	lr

08004adc <_init>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_fini>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr
