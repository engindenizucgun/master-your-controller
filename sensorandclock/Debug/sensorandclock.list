
sensorandclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b98  08005b98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000074  08005c14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005c14  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001372c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223c  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00035a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00036b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231c6  00000000  00000000  00037c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014402  00000000  00000000  0005adde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8785  00000000  00000000  0006f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  001479b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a1c 	.word	0x08005a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005a1c 	.word	0x08005a1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <printer>:
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);


void printer(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af02      	add	r7, sp, #8
	sprintf((char*)uartBuf, "\r            Work Mode:             %02lu:%02lu:%02lu", hours, minutes, seconds);
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <printer+0x40>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <printer+0x44>)
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <printer+0x48>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	460b      	mov	r3, r1
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <printer+0x4c>)
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <printer+0x50>)
 8000c0a:	f004 fa99 	bl	8005140 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <printer+0x50>)
 8000c10:	f7ff fade 	bl	80001d0 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	4908      	ldr	r1, [pc, #32]	; (8000c40 <printer+0x50>)
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <printer+0x54>)
 8000c20:	f003 fdbe 	bl	80047a0 <HAL_UART_Transmit>

	adjustButtonPressed = false;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <printer+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001c0 	.word	0x200001c0
 8000c34:	200001bc 	.word	0x200001bc
 8000c38:	200001b8 	.word	0x200001b8
 8000c3c:	08005a34 	.word	0x08005a34
 8000c40:	200001c4 	.word	0x200001c4
 8000c44:	200000dc 	.word	0x200000dc
 8000c48:	20000200 	.word	0x20000200

08000c4c <AdjustmentPrinter>:

void AdjustmentPrinter(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	sprintf((char*)uartBuf, "\r            Adjustment Mode:       %02lu:%02lu:00", hours, minutes);
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <AdjustmentPrinter+0x30>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <AdjustmentPrinter+0x34>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	490a      	ldr	r1, [pc, #40]	; (8000c84 <AdjustmentPrinter+0x38>)
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <AdjustmentPrinter+0x3c>)
 8000c5c:	f004 fa70 	bl	8005140 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <AdjustmentPrinter+0x3c>)
 8000c62:	f7ff fab5 	bl	80001d0 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	4906      	ldr	r1, [pc, #24]	; (8000c88 <AdjustmentPrinter+0x3c>)
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <AdjustmentPrinter+0x40>)
 8000c72:	f003 fd95 	bl	80047a0 <HAL_UART_Transmit>


}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200001c0 	.word	0x200001c0
 8000c80:	200001bc 	.word	0x200001bc
 8000c84:	08005a6c 	.word	0x08005a6c
 8000c88:	200001c4 	.word	0x200001c4
 8000c8c:	200000dc 	.word	0x200000dc

08000c90 <NOTAdjustedPrinter>:

void NOTAdjustedPrinter(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	sprintf((char*)uartBuf, "\r            Adjustment Mode:       %02lu:%02lu:00", hours, minutes);
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <NOTAdjustedPrinter+0x34>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <NOTAdjustedPrinter+0x38>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	490b      	ldr	r1, [pc, #44]	; (8000ccc <NOTAdjustedPrinter+0x3c>)
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <NOTAdjustedPrinter+0x40>)
 8000ca0:	f004 fa4e 	bl	8005140 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen((char*)uartBuf), HAL_MAX_DELAY);
 8000ca4:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <NOTAdjustedPrinter+0x40>)
 8000ca6:	f7ff fa93 	bl	80001d0 <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <NOTAdjustedPrinter+0x40>)
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <NOTAdjustedPrinter+0x44>)
 8000cb6:	f003 fd73 	bl	80047a0 <HAL_UART_Transmit>

	adjustButtonPressed = false;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <NOTAdjustedPrinter+0x48>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001c0 	.word	0x200001c0
 8000cc8:	200001bc 	.word	0x200001bc
 8000ccc:	08005a6c 	.word	0x08005a6c
 8000cd0:	200001c4 	.word	0x200001c4
 8000cd4:	200000dc 	.word	0x200000dc
 8000cd8:	20000200 	.word	0x20000200

08000cdc <AdjustHour>:

//------------------------------------------------------ADJUST HOUR & MINUTE---------------------------------------------------------------------------//

void AdjustHour(uint32_t *hours, uint16_t GPIO_Pin) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]


	if (GPIO_Pin == GPIO_PIN_7) {
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	2b80      	cmp	r3, #128	; 0x80
 8000cec:	d111      	bne.n	8000d12 <AdjustHour+0x36>
		(*hours)++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
		if (*hours >= 24) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b17      	cmp	r3, #23
 8000cfe:	d902      	bls.n	8000d06 <AdjustHour+0x2a>
			*hours = 0;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
		}
		AdjustmentPrinter();
 8000d06:	f7ff ffa1 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <AdjustHour+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	}
}
 8000d10:	e014      	b.n	8000d3c <AdjustHour+0x60>
	} else if (GPIO_Pin == GPIO_PIN_8) {
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d18:	d110      	bne.n	8000d3c <AdjustHour+0x60>
		(*hours)--;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
		if (*hours == 0) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <AdjustHour+0x56>
			*hours = 23;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2217      	movs	r2, #23
 8000d30:	601a      	str	r2, [r3, #0]
		AdjustmentPrinter();
 8000d32:	f7ff ff8b 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000d36:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <AdjustHour+0x68>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000200 	.word	0x20000200

08000d48 <AdjustMinute>:

void AdjustMinute(uint32_t *minutes, uint16_t GPIO_Pin) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]

	if (GPIO_Pin == GPIO_PIN_7) {
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	2b80      	cmp	r3, #128	; 0x80
 8000d58:	d111      	bne.n	8000d7e <AdjustMinute+0x36>
		(*minutes)++;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	601a      	str	r2, [r3, #0]
		if (*minutes >= 60) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b3b      	cmp	r3, #59	; 0x3b
 8000d6a:	d902      	bls.n	8000d72 <AdjustMinute+0x2a>
			*minutes = 0;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
		}
		AdjustmentPrinter();
 8000d72:	f7ff ff6b 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <AdjustMinute+0x6c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	}
}
 8000d7c:	e015      	b.n	8000daa <AdjustMinute+0x62>
	} else if (GPIO_Pin == GPIO_PIN_8) {
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d111      	bne.n	8000daa <AdjustMinute+0x62>
		if (*minutes == 0) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <AdjustMinute+0x4e>
			*minutes = 59;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	223b      	movs	r2, #59	; 0x3b
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e004      	b.n	8000da0 <AdjustMinute+0x58>
			(*minutes)--;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	601a      	str	r2, [r3, #0]
		AdjustmentPrinter();
 8000da0:	f7ff ff54 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <AdjustMinute+0x6c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000200 	.word	0x20000200

08000db8 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTimestamp = HAL_GetTick();
 8000dc2:	f000 fe5d 	bl	8001a80 <HAL_GetTick>
 8000dc6:	60f8      	str	r0, [r7, #12]
	// Add the variables to keep track of modes and set button press count
	static bool isInHourAdjustmentMode = false;
	static bool isInMinuteAdjustmentMode = false;
	static int setButtonPressCount = 0;

	if (GPIO_Pin == set_Pin)
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dce:	d164      	bne.n	8000e9a <HAL_GPIO_EXTI_Callback+0xe2>
	{



		if (currentTimestamp - lastButtonPressTime < DEBOUNCE_DELAY_MS)
 8000dd0:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2bc7      	cmp	r3, #199	; 0xc7
 8000dda:	f240 80d6 	bls.w	8000f8a <HAL_GPIO_EXTI_Callback+0x1d2>
			// Ignore this button press (debounce)
			return;
		}

		// Update the last button press timestamp
		lastButtonPressTime = currentTimestamp;
 8000dde:	4a70      	ldr	r2, [pc, #448]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6013      	str	r3, [r2, #0]

		setButtonPressCount++;
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a6e      	ldr	r2, [pc, #440]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dec:	6013      	str	r3, [r2, #0]


		// If the "set" button is pressed once, switch to hour adjustment mode
		if (isInDefaultMode && setButtonPressCount == 1 )
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d014      	beq.n	8000e20 <HAL_GPIO_EXTI_Callback+0x68>
 8000df6:	4b6b      	ldr	r3, [pc, #428]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d110      	bne.n	8000e20 <HAL_GPIO_EXTI_Callback+0x68>
		{



			isInDefaultMode = false;
 8000dfe:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
			isInHourAdjustmentMode = true;
 8000e04:	4b69      	ldr	r3, [pc, #420]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
			setButtonPressCount = 0;
 8000e0a:	4b66      	ldr	r3, [pc, #408]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\r          Hour Adjustment Mode", 33, HAL_MAX_DELAY);
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	2221      	movs	r2, #33	; 0x21
 8000e16:	4966      	ldr	r1, [pc, #408]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e18:	4866      	ldr	r0, [pc, #408]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e1a:	f003 fcc1 	bl	80047a0 <HAL_UART_Transmit>
 8000e1e:	e0bb      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		// If the "set" button is pressed once, switch to minute adjustment mode
		else if (isInHourAdjustmentMode && setButtonPressCount == 1)
 8000e20:	4b62      	ldr	r3, [pc, #392]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d017      	beq.n	8000e58 <HAL_GPIO_EXTI_Callback+0xa0>
 8000e28:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d113      	bne.n	8000e58 <HAL_GPIO_EXTI_Callback+0xa0>
		{


			isInDefaultMode = false;
 8000e30:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
			isInHourAdjustmentMode = false;
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
			isInMinuteAdjustmentMode = true;
 8000e3c:	4b5e      	ldr	r3, [pc, #376]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x200>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
			setButtonPressCount = 0;
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\r          Minute Adjustment Mode", 33, HAL_MAX_DELAY);
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	2221      	movs	r2, #33	; 0x21
 8000e4e:	495b      	ldr	r1, [pc, #364]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x204>)
 8000e50:	4858      	ldr	r0, [pc, #352]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e52:	f003 fca5 	bl	80047a0 <HAL_UART_Transmit>
 8000e56:	e09f      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		// If the "set" button is pressed once, switch back to default mode
		else if (isInMinuteAdjustmentMode && setButtonPressCount == 1)
 8000e58:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x200>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 809b 	beq.w	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
 8000e62:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	f040 8096 	bne.w	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		{
			seconds = 0;
 8000e6c:	4b54      	ldr	r3, [pc, #336]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x208>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]

			isInMinuteAdjustmentMode = false;
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x200>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
			isInDefaultMode = true;
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
			setButtonPressCount = 0;
 8000e7e:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\r          Working Mode", 23, HAL_MAX_DELAY);
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	2217      	movs	r2, #23
 8000e8a:	494e      	ldr	r1, [pc, #312]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000e8c:	4849      	ldr	r0, [pc, #292]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e8e:	f003 fc87 	bl	80047a0 <HAL_UART_Transmit>
			adjustButtonPressed = false;
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x210>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e07e      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		}


	}
	else if ((GPIO_Pin == increase_Pin || GPIO_Pin == decrease_Pin) && isInHourAdjustmentMode)
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea0:	d002      	beq.n	8000ea8 <HAL_GPIO_EXTI_Callback+0xf0>
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	2b80      	cmp	r3, #128	; 0x80
 8000ea6:	d134      	bne.n	8000f12 <HAL_GPIO_EXTI_Callback+0x15a>
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d030      	beq.n	8000f12 <HAL_GPIO_EXTI_Callback+0x15a>
	{
		if (currentTimestamp - lastAdjustButtonPressTime < DEBOUNCE_DELAY_MS_ADJUST)
 8000eb0:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x214>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b95      	cmp	r3, #149	; 0x95
 8000eba:	d968      	bls.n	8000f8e <HAL_GPIO_EXTI_Callback+0x1d6>

			// Ignore this button press (debounce)
			return;
		}

		lastAdjustButtonPressTime = currentTimestamp;
 8000ebc:	4a43      	ldr	r2, [pc, #268]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x214>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6013      	str	r3, [r2, #0]
		// Handle the increase and decrease buttons for hour adjustment
		if (GPIO_Pin == increase_Pin)
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec8:	d110      	bne.n	8000eec <HAL_GPIO_EXTI_Callback+0x134>
		{
			lastButtonPressTime = HAL_GetTick();
 8000eca:	f000 fdd9 	bl	8001a80 <HAL_GetTick>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000ed2:	6013      	str	r3, [r2, #0]
			isInDefaultMode = false;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			adjustButtonPressed = true;
 8000eda:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x210>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
			// Adjust the hour
			AdjustHour(&hours, increase_Pin);
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	483a      	ldr	r0, [pc, #232]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x218>)
 8000ee6:	f7ff fef9 	bl	8000cdc <AdjustHour>
		if (GPIO_Pin == increase_Pin)
 8000eea:	e052      	b.n	8000f92 <HAL_GPIO_EXTI_Callback+0x1da>
		}
		else if (GPIO_Pin == decrease_Pin)
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	2b80      	cmp	r3, #128	; 0x80
 8000ef0:	d14f      	bne.n	8000f92 <HAL_GPIO_EXTI_Callback+0x1da>
		{
			lastButtonPressTime = HAL_GetTick();
 8000ef2:	f000 fdc5 	bl	8001a80 <HAL_GetTick>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000efa:	6013      	str	r3, [r2, #0]
			isInDefaultMode = false;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
			adjustButtonPressed = true;
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
			// Adjust the hour
			AdjustHour(&hours, decrease_Pin);
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	4831      	ldr	r0, [pc, #196]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x218>)
 8000f0c:	f7ff fee6 	bl	8000cdc <AdjustHour>
		if (GPIO_Pin == increase_Pin)
 8000f10:	e03f      	b.n	8000f92 <HAL_GPIO_EXTI_Callback+0x1da>
		}


	}
	else if ((GPIO_Pin == increase_Pin || GPIO_Pin == decrease_Pin) && isInMinuteAdjustmentMode)
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f18:	d002      	beq.n	8000f20 <HAL_GPIO_EXTI_Callback+0x168>
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b80      	cmp	r3, #128	; 0x80
 8000f1e:	d13b      	bne.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x200>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d037      	beq.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (currentTimestamp - lastAdjustButtonPressTime < DEBOUNCE_DELAY_MS_ADJUST)
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x214>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b95      	cmp	r3, #149	; 0x95
 8000f32:	d930      	bls.n	8000f96 <HAL_GPIO_EXTI_Callback+0x1de>

			// Ignore this button press (debounce)
			return;
		}

		lastAdjustButtonPressTime = currentTimestamp;
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x214>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6013      	str	r3, [r2, #0]
		// Handle the increase and decrease buttons for minute adjustment
		if (GPIO_Pin == increase_Pin)
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f40:	d110      	bne.n	8000f64 <HAL_GPIO_EXTI_Callback+0x1ac>
		{
			lastButtonPressTime = HAL_GetTick();
 8000f42:	f000 fd9d 	bl	8001a80 <HAL_GetTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f4a:	6013      	str	r3, [r2, #0]

			adjustButtonPressed = true;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
			isInDefaultMode = false;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			// Adjust the minute
			AdjustMinute(&minutes, increase_Pin);
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000f5e:	f7ff fef3 	bl	8000d48 <AdjustMinute>
 8000f62:	e019      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else if (GPIO_Pin == decrease_Pin)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	2b80      	cmp	r3, #128	; 0x80
 8000f68:	d116      	bne.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		{
			lastButtonPressTime = HAL_GetTick();
 8000f6a:	f000 fd89 	bl	8001a80 <HAL_GetTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f72:	6013      	str	r3, [r2, #0]

			adjustButtonPressed = true;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
			isInDefaultMode = false;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
			// Adjust the minute
			AdjustMinute(&minutes, decrease_Pin);
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000f84:	f7ff fee0 	bl	8000d48 <AdjustMinute>
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
			return;
 8000f8a:	bf00      	nop
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
			return;
 8000f8e:	bf00      	nop
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
		if (GPIO_Pin == increase_Pin)
 8000f92:	bf00      	nop
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x1e0>
			return;
 8000f96:	bf00      	nop
		}
	}
}
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001f8 	.word	0x200001f8
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000208 	.word	0x20000208
 8000fb0:	08005aa0 	.word	0x08005aa0
 8000fb4:	200000dc 	.word	0x200000dc
 8000fb8:	20000209 	.word	0x20000209
 8000fbc:	08005ac0 	.word	0x08005ac0
 8000fc0:	200001b8 	.word	0x200001b8
 8000fc4:	08005ae4 	.word	0x08005ae4
 8000fc8:	20000200 	.word	0x20000200
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	200001c0 	.word	0x200001c0
 8000fd4:	200001bc 	.word	0x200001bc

08000fd8 <main>:

int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af02      	add	r7, sp, #8
	uint8_t buf[11];
	int16_t val;
	float temp_c;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fde:	f000 fcdf 	bl	80019a0 <HAL_Init>
	SystemClock_Config();
 8000fe2:	f000 f94f 	bl	8001284 <SystemClock_Config>
	MX_GPIO_Init();
 8000fe6:	f000 fa51 	bl	800148c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000fea:	f000 fa1f 	bl	800142c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000fee:	f000 f9cf 	bl	8001390 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000ff2:	f000 f98d 	bl	8001310 <MX_I2C1_Init>
	{



		/* USER CODE END WHILE */
		buf[0] = REG_TEMP; //buffer = temp register
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	713b      	strb	r3, [r7, #4]
		ret = HAL_I2C_Master_Transmit(&hi2c1, TMP100_ADDR, buf, 1, HAL_MAX_DELAY); // return value of the function //pointer @I2C handle(It represents the specific I2C peripheral or bus that the communication will take place on.), address of sensor, buf, one byte, islemin bitmesi icin yeterli sure
 8000ffa:	2390      	movs	r3, #144	; 0x90
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	1d3a      	adds	r2, r7, #4
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	4890      	ldr	r0, [pc, #576]	; (800124c <main+0x274>)
 800100a:	f001 f8b5 	bl	8002178 <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	777b      	strb	r3, [r7, #29]
		if ( ret != HAL_OK ) { //HAL_OK , execution basarili sekilde yapildigi anlamina geliyor
 8001012:	7f7b      	ldrb	r3, [r7, #29]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <main+0x4c>
			strcpy((char*)buf, "Error Tx\r"); //strcpy, copy a string from one location to another (char*)buf, converts the buffer to a char* pointer. This means the buffer is converted to a character array
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4a8d      	ldr	r2, [pc, #564]	; (8001250 <main+0x278>)
 800101c:	ca07      	ldmia	r2, {r0, r1, r2}
 800101e:	c303      	stmia	r3!, {r0, r1}
 8001020:	801a      	strh	r2, [r3, #0]
 8001022:	e05e      	b.n	80010e2 <main+0x10a>
		} else {

			ret = HAL_I2C_Master_Receive(&hi2c1, TMP100_ADDR, buf, 2, HAL_MAX_DELAY);
 8001024:	2390      	movs	r3, #144	; 0x90
 8001026:	b299      	uxth	r1, r3
 8001028:	1d3a      	adds	r2, r7, #4
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2302      	movs	r3, #2
 8001032:	4886      	ldr	r0, [pc, #536]	; (800124c <main+0x274>)
 8001034:	f001 f994 	bl	8002360 <HAL_I2C_Master_Receive>
 8001038:	4603      	mov	r3, r0
 800103a:	777b      	strb	r3, [r7, #29]
			if ( ret != HAL_OK ) {
 800103c:	7f7b      	ldrb	r3, [r7, #29]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <main+0x76>
				strcpy((char*)buf, "Error Tx\r"); //
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4a82      	ldr	r2, [pc, #520]	; (8001250 <main+0x278>)
 8001046:	ca07      	ldmia	r2, {r0, r1, r2}
 8001048:	c303      	stmia	r3!, {r0, r1}
 800104a:	801a      	strh	r2, [r3, #0]
 800104c:	e049      	b.n	80010e2 <main+0x10a>

			}else{

				val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); //12 bitlik bir integer icin buf[0] 4 birim sola shiftliyoruz, buf[1]i 4 birim saga daha sonra combine ediyoruz
 800104e:	793b      	ldrb	r3, [r7, #4]
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	b21a      	sxth	r2, r3
 8001054:	797b      	ldrb	r3, [r7, #5]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	b2db      	uxtb	r3, r3
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	83fb      	strh	r3, [r7, #30]

				if (val > 0x7FF) { //eger value en buyuk hexadecimalden buyukse
 8001060:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001068:	db05      	blt.n	8001076 <main+0x9e>
					val |= 0xF000;//degeri eksi yap, most significant 4 bit 1 oluyor
 800106a:	8bfb      	ldrh	r3, [r7, #30]
 800106c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001070:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001074:	83fb      	strh	r3, [r7, #30]
				}

				temp_c = val * 0.0625;
 8001076:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fb7c 	bl	8000778 <__aeabi_i2d>
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	4b73      	ldr	r3, [pc, #460]	; (8001254 <main+0x27c>)
 8001086:	f7ff f8fb 	bl	8000280 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fbdb 	bl	800084c <__aeabi_d2f>
 8001096:	4603      	mov	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]
				temp_c *= 100;
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001258 <main+0x280>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	edc7 7a06 	vstr	s15, [r7, #24]

				sprintf((char*)buf, // sprintf format the temp and store it as a string
						"\r%u.%02u C",
						((unsigned int)temp_c / 100), //tam sayi kismi
 80010aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b2:	ee17 2a90 	vmov	r2, s15
				sprintf((char*)buf, // sprintf format the temp and store it as a string
 80010b6:	4b69      	ldr	r3, [pc, #420]	; (800125c <main+0x284>)
 80010b8:	fba3 2302 	umull	r2, r3, r3, r2
 80010bc:	095a      	lsrs	r2, r3, #5
						((unsigned int)temp_c % 100));//ondalikli kismi
 80010be:	edd7 7a06 	vldr	s15, [r7, #24]
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 1a90 	vmov	r1, s15
				sprintf((char*)buf, // sprintf format the temp and store it as a string
 80010ca:	4b64      	ldr	r3, [pc, #400]	; (800125c <main+0x284>)
 80010cc:	fba3 0301 	umull	r0, r3, r3, r1
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	2064      	movs	r0, #100	; 0x64
 80010d4:	fb00 f303 	mul.w	r3, r0, r3
 80010d8:	1acb      	subs	r3, r1, r3
 80010da:	1d38      	adds	r0, r7, #4
 80010dc:	4960      	ldr	r1, [pc, #384]	; (8001260 <main+0x288>)
 80010de:	f004 f82f 	bl	8005140 <siprintf>

			}

		}
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f873 	bl	80001d0 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	1d39      	adds	r1, r7, #4
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	485b      	ldr	r0, [pc, #364]	; (8001264 <main+0x28c>)
 80010f6:	f003 fb53 	bl	80047a0 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fe:	f000 fccb 	bl	8001a98 <HAL_Delay>





		if (!adjustButtonPressed && !isInDefaultMode && HAL_GetTick() - lastButtonPressTime >= 10000)
 8001102:	4b59      	ldr	r3, [pc, #356]	; (8001268 <main+0x290>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d015      	beq.n	800113c <main+0x164>
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <main+0x294>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	f083 0301 	eor.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00e      	beq.n	800113c <main+0x164>
 800111e:	f000 fcaf 	bl	8001a80 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	4b52      	ldr	r3, [pc, #328]	; (8001270 <main+0x298>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f242 720f 	movw	r2, #9999	; 0x270f
 800112e:	4293      	cmp	r3, r2
 8001130:	d904      	bls.n	800113c <main+0x164>
		{

			isInDefaultMode = true; // Exit the adjustment mode
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <main+0x294>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
			// Perform any other actions needed after exiting adjustment mode
			NOTAdjustedPrinter();
 8001138:	f7ff fdaa 	bl	8000c90 <NOTAdjustedPrinter>
		}


		if (isInDefaultMode) {
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <main+0x294>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d041      	beq.n	80011c8 <main+0x1f0>


			// Update clock every second
			int currentValue = HAL_GetTick();
 8001144:	f000 fc9c 	bl	8001a80 <HAL_GetTick>
 8001148:	4603      	mov	r3, r0
 800114a:	613b      	str	r3, [r7, #16]
			if (currentValue - milliseconds >= 1000) {
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <main+0x29c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001158:	f4ff af4d 	bcc.w	8000ff6 <main+0x1e>
				milliseconds = currentValue;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4a45      	ldr	r2, [pc, #276]	; (8001274 <main+0x29c>)
 8001160:	6013      	str	r3, [r2, #0]
				seconds++;
 8001162:	4b45      	ldr	r3, [pc, #276]	; (8001278 <main+0x2a0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a43      	ldr	r2, [pc, #268]	; (8001278 <main+0x2a0>)
 800116a:	6013      	str	r3, [r2, #0]

				if (seconds >= 60) {
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <main+0x2a0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b3b      	cmp	r3, #59	; 0x3b
 8001172:	d91a      	bls.n	80011aa <main+0x1d2>
					seconds = 0;
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <main+0x2a0>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
					minutes++;
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <main+0x2a4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a3e      	ldr	r2, [pc, #248]	; (800127c <main+0x2a4>)
 8001182:	6013      	str	r3, [r2, #0]

					if (minutes >= 60) {
 8001184:	4b3d      	ldr	r3, [pc, #244]	; (800127c <main+0x2a4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b3b      	cmp	r3, #59	; 0x3b
 800118a:	d90e      	bls.n	80011aa <main+0x1d2>
						minutes = 0;
 800118c:	4b3b      	ldr	r3, [pc, #236]	; (800127c <main+0x2a4>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
						hours++;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <main+0x2a8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a39      	ldr	r2, [pc, #228]	; (8001280 <main+0x2a8>)
 800119a:	6013      	str	r3, [r2, #0]

						if (hours >= 24) {
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <main+0x2a8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b17      	cmp	r3, #23
 80011a2:	d902      	bls.n	80011aa <main+0x1d2>
							hours = 0;
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <main+0x2a8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
						}
					}
				}

				// Print the clock time every second
				printer();
 80011aa:	f7ff fd21 	bl	8000bf0 <printer>
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f80d 	bl	80001d0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	1d39      	adds	r1, r7, #4
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	4828      	ldr	r0, [pc, #160]	; (8001264 <main+0x28c>)
 80011c2:	f003 faed 	bl	80047a0 <HAL_UART_Transmit>
 80011c6:	e716      	b.n	8000ff6 <main+0x1e>
		}

		else {


			int currentValue = HAL_GetTick();
 80011c8:	f000 fc5a 	bl	8001a80 <HAL_GetTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]
			if (currentValue - milliseconds >= 1000) {
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <main+0x29c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011dc:	f4ff af0b 	bcc.w	8000ff6 <main+0x1e>
				milliseconds = currentValue;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <main+0x29c>)
 80011e4:	6013      	str	r3, [r2, #0]
				seconds++;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <main+0x2a0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <main+0x2a0>)
 80011ee:	6013      	str	r3, [r2, #0]

				if (seconds >= 60) {
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <main+0x2a0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b3b      	cmp	r3, #59	; 0x3b
 80011f6:	d91a      	bls.n	800122e <main+0x256>
					seconds = 0;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <main+0x2a0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
					minutes++;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <main+0x2a4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <main+0x2a4>)
 8001206:	6013      	str	r3, [r2, #0]

					if (minutes >= 60) {
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <main+0x2a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b3b      	cmp	r3, #59	; 0x3b
 800120e:	d90e      	bls.n	800122e <main+0x256>
						minutes = 0;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <main+0x2a4>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
						hours++;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <main+0x2a8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <main+0x2a8>)
 800121e:	6013      	str	r3, [r2, #0]

						if (hours >= 24) {
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <main+0x2a8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b17      	cmp	r3, #23
 8001226:	d902      	bls.n	800122e <main+0x256>
							hours = 0;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <main+0x2a8>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
						}
					}
				}
				AdjustmentPrinter();
 800122e:	f7ff fd0d 	bl	8000c4c <AdjustmentPrinter>
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7fe ffcb 	bl	80001d0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	1d39      	adds	r1, r7, #4
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <main+0x28c>)
 8001246:	f003 faab 	bl	80047a0 <HAL_UART_Transmit>
		buf[0] = REG_TEMP; //buffer = temp register
 800124a:	e6d4      	b.n	8000ff6 <main+0x1e>
 800124c:	20000160 	.word	0x20000160
 8001250:	08005afc 	.word	0x08005afc
 8001254:	3fb00000 	.word	0x3fb00000
 8001258:	42c80000 	.word	0x42c80000
 800125c:	51eb851f 	.word	0x51eb851f
 8001260:	08005b08 	.word	0x08005b08
 8001264:	200000dc 	.word	0x200000dc
 8001268:	20000200 	.word	0x20000200
 800126c:	20000000 	.word	0x20000000
 8001270:	200001f8 	.word	0x200001f8
 8001274:	200001b4 	.word	0x200001b4
 8001278:	200001b8 	.word	0x200001b8
 800127c:	200001bc 	.word	0x200001bc
 8001280:	200001c0 	.word	0x200001c0

08001284 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2244      	movs	r2, #68	; 0x44
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f003 ff4c 	bl	8005130 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012aa:	f001 fc6d 	bl	8002b88 <HAL_PWREx_ControlVoltageScaling>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80012b4:	f000 f992 	bl	80015dc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b8:	2302      	movs	r3, #2
 80012ba:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c2:	2310      	movs	r3, #16
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fcb0 	bl	8002c34 <HAL_RCC_OscConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80012da:	f000 f97f 	bl	80015dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012de:	230f      	movs	r3, #15
 80012e0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f8b0 	bl	800345c <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8001302:	f000 f96b 	bl	80015dc <Error_Handler>
	}
}
 8001306:	bf00      	nop
 8001308:	3758      	adds	r7, #88	; 0x58
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_I2C1_Init+0x74>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <MX_I2C1_Init+0x78>)
 8001318:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_I2C1_Init+0x74>)
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <MX_I2C1_Init+0x7c>)
 800131e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_I2C1_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_I2C1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134a:	480e      	ldr	r0, [pc, #56]	; (8001384 <MX_I2C1_Init+0x74>)
 800134c:	f000 fe84 	bl	8002058 <HAL_I2C_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001356:	f000 f941 	bl	80015dc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135a:	2100      	movs	r1, #0
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <MX_I2C1_Init+0x74>)
 800135e:	f001 fb6d 	bl	8002a3c <HAL_I2CEx_ConfigAnalogFilter>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001368:	f000 f938 	bl	80015dc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_I2C1_Init+0x74>)
 8001370:	f001 fbaf 	bl	8002ad2 <HAL_I2CEx_ConfigDigitalFilter>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800137a:	f000 f92f 	bl	80015dc <Error_Handler>
	}

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000160 	.word	0x20000160
 8001388:	40005400 	.word	0x40005400
 800138c:	00303d5b 	.word	0x00303d5b

08001390 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42015;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b8:	f24a 421f 	movw	r2, #42015	; 0xa41f
 80013bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM2_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000-1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM2_Init+0x98>)
 80013c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_TIM2_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM2_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_TIM2_Init+0x98>)
 80013da:	f002 fd9f 	bl	8003f1c <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 80013e4:	f000 f8fa 	bl	80015dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM2_Init+0x98>)
 80013f6:	f002 ff07 	bl	8004208 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001400:	f000 f8ec 	bl	80015dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM2_Init+0x98>)
 8001412:	f003 f8f3 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 800141c:	f000 f8de 	bl	80015dc <Error_Handler>
	}


}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000090 	.word	0x20000090

0800142c <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_USART2_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001470:	f003 f948 	bl	8004704 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800147a:	f000 f8af 	bl	80015dc <Error_Handler>
	}


}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000dc 	.word	0x200000dc
 8001488:	40004400 	.word	0x40004400

0800148c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a44      	ldr	r2, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a3e      	ldr	r2, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a38      	ldr	r2, [pc, #224]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_GPIO_Init+0x144>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]


	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	21b0      	movs	r1, #176	; 0xb0
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f000 fd75 	bl	8001ff8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001514:	482f      	ldr	r0, [pc, #188]	; (80015d4 <MX_GPIO_Init+0x148>)
 8001516:	f000 fd6f 	bl	8001ff8 <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = B1_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001520:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001524:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001526:	2301      	movs	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4829      	ldr	r0, [pc, #164]	; (80015d8 <MX_GPIO_Init+0x14c>)
 8001532:	f000 fbe7 	bl	8001d04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8001536:	23b0      	movs	r3, #176	; 0xb0
 8001538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	f000 fbd8 	bl	8001d04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156a:	f000 fbcb 	bl	8001d04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LD4_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_GPIO_Init+0x148>)
 8001588:	f000 fbbc 	bl	8001d04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = set_Pin|decrease_Pin|increase_Pin;
 800158c:	f44f 4383 	mov.w	r3, #16768	; 0x4180
 8001590:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001596:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_GPIO_Init+0x148>)
 80015a4:	f000 fbae 	bl	8001d04 <HAL_GPIO_Init>


	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2017      	movs	r0, #23
 80015ae:	f000 fb72 	bl	8001c96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015b2:	2017      	movs	r0, #23
 80015b4:	f000 fb8b 	bl	8001cce <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f000 fb6a 	bl	8001c96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f000 fb83 	bl	8001cce <HAL_NVIC_EnableIRQ>


}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	48000800 	.word	0x48000800

080015dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_MspInit+0x44>)
 80015f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_MspInit+0x44>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6613      	str	r3, [r2, #96]	; 0x60
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_MspInit+0x44>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_MspInit+0x44>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_MspInit+0x44>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6593      	str	r3, [r2, #88]	; 0x58
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_MspInit+0x44>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0a2      	sub	sp, #136	; 0x88
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2260      	movs	r2, #96	; 0x60
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fd6d 	bl	8005130 <memset>
  if(hi2c->Instance==I2C1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a30      	ldr	r2, [pc, #192]	; (800171c <HAL_I2C_MspInit+0xec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d158      	bne.n	8001712 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f919 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001678:	f7ff ffb0 	bl	80015dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c0:	2304      	movs	r3, #4
 80016c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f000 fb18 	bl	8001d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e8:	2304      	movs	r3, #4
 80016ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016f2:	4619      	mov	r1, r3
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <HAL_I2C_MspInit+0xf4>)
 80016f6:	f000 fb05 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_I2C_MspInit+0xf0>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3788      	adds	r7, #136	; 0x88
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40005400 	.word	0x40005400
 8001720:	40021000 	.word	0x40021000
 8001724:	48000400 	.word	0x48000400

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d113      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fa9d 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175c:	201c      	movs	r0, #28
 800175e:	f000 fab6 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0a2      	sub	sp, #136	; 0x88
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2260      	movs	r2, #96	; 0x60
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fccd 	bl	8005130 <memset>
  if(huart->Instance==USART2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_UART_MspInit+0xac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d138      	bne.n	8001812 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 f879 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b8:	f7ff ff10 	bl	80015dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_UART_MspInit+0xb0>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_UART_MspInit+0xb0>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6593      	str	r3, [r2, #88]	; 0x58
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_UART_MspInit+0xb0>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_UART_MspInit+0xb0>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_UART_MspInit+0xb0>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_UART_MspInit+0xb0>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ec:	230c      	movs	r3, #12
 80017ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f000 fa79 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3788      	adds	r7, #136	; 0x88
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40004400 	.word	0x40004400
 8001820:	40021000 	.word	0x40021000

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <NMI_Handler+0x4>

0800182a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler+0x4>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler+0x4>

08001842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 f8f2 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(decrease_Pin);
 800187c:	2080      	movs	r0, #128	; 0x80
 800187e:	f000 fbd3 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(increase_Pin);
 8001882:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001886:	f000 fbcf 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM2_IRQHandler+0x10>)
 8001896:	f002 fb98 	bl	8003fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000090 	.word	0x20000090

080018a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018ac:	f000 fbbc 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(set_Pin);
 80018b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018b4:	f000 fbb8 	bl	8002028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f003 fbf6 	bl	80050dc <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20010000 	.word	0x20010000
 800191c:	00000400 	.word	0x00000400
 8001920:	2000020c 	.word	0x2000020c
 8001924:	20000228 	.word	0x20000228

08001928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001950:	f7ff ffea 	bl	8001928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <LoopForever+0x6>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <LoopForever+0xe>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	; (8001998 <LoopForever+0x16>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f003 fbb5 	bl	80050e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197e:	f7ff fb2b 	bl	8000fd8 <main>

08001982 <LoopForever>:

LoopForever:
    b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001984:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001990:	08005ba0 	.word	0x08005ba0
  ldr r2, =_sbss
 8001994:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001998:	20000224 	.word	0x20000224

0800199c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_Init+0x3c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_Init+0x3c>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	2003      	movs	r0, #3
 80019b8:	f000 f962 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f80f 	bl	80019e0 <HAL_InitTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	e001      	b.n	80019d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ce:	f7ff fe0b 	bl	80015e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_InitTick+0x70>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_InitTick+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f96d 	bl	8001cea <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d809      	bhi.n	8001a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f937 	bl	8001c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_InitTick+0x74>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e004      	b.n	8001a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e001      	b.n	8001a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c
 8001a50:	20000004 	.word	0x20000004
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000210 	.word	0x20000210

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000210 	.word	0x20000210

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e154      	b.n	8001fbe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8146 	beq.w	8001fb8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <HAL_GPIO_Init+0x40>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d130      	bne.n	8001da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0201 	and.w	r2, r3, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d017      	beq.n	8001de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d123      	bne.n	8001e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a0 	beq.w	8001fb8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <HAL_GPIO_Init+0x2d8>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_GPIO_Init+0x2d8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6613      	str	r3, [r2, #96]	; 0x60
 8001e84:	4b55      	ldr	r3, [pc, #340]	; (8001fdc <HAL_GPIO_Init+0x2d8>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e90:	4a53      	ldr	r2, [pc, #332]	; (8001fe0 <HAL_GPIO_Init+0x2dc>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eba:	d019      	beq.n	8001ef0 <HAL_GPIO_Init+0x1ec>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a49      	ldr	r2, [pc, #292]	; (8001fe4 <HAL_GPIO_Init+0x2e0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_GPIO_Init+0x1e8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_GPIO_Init+0x2e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1e4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a47      	ldr	r2, [pc, #284]	; (8001fec <HAL_GPIO_Init+0x2e8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a46      	ldr	r2, [pc, #280]	; (8001ff0 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1dc>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e008      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	e006      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x1ee>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f02:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <HAL_GPIO_Init+0x2dc>)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f34:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f88:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f8e:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f aea3 	bne.w	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	48000c00 	.word	0x48000c00
 8001ff0:	48001000 	.word	0x48001000
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002014:	e002      	b.n	800201c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe feb6 	bl	8000db8 <HAL_GPIO_EXTI_Callback>
  }
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40010400 	.word	0x40010400

08002058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e081      	b.n	800216e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fad6 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e006      	b.n	80020e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d104      	bne.n	80020f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69d9      	ldr	r1, [r3, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	460b      	mov	r3, r1
 8002186:	817b      	strh	r3, [r7, #10]
 8002188:	4613      	mov	r3, r2
 800218a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	f040 80da 	bne.w	800234e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_I2C_Master_Transmit+0x30>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e0d3      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021b0:	f7ff fc66 	bl	8001a80 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2319      	movs	r3, #25
 80021bc:	2201      	movs	r2, #1
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f9e6 	bl	8002594 <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0be      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2221      	movs	r2, #33	; 0x21
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2210      	movs	r2, #16
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	893a      	ldrh	r2, [r7, #8]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2bff      	cmp	r3, #255	; 0xff
 8002202:	d90e      	bls.n	8002222 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_I2C_Master_Transmit+0x1e0>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fbdc 	bl	80029d8 <I2C_TransferConfig>
 8002220:	e06c      	b.n	80022fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_I2C_Master_Transmit+0x1e0>)
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fbcb 	bl	80029d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002242:	e05b      	b.n	80022fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6a39      	ldr	r1, [r7, #32]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f9e3 	bl	8002614 <I2C_WaitOnTXISFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e07b      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d034      	beq.n	80022fc <HAL_I2C_Master_Transmit+0x184>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d130      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f975 	bl	8002594 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e04d      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2bff      	cmp	r3, #255	; 0xff
 80022bc:	d90e      	bls.n	80022dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	8979      	ldrh	r1, [r7, #10]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fb7f 	bl	80029d8 <I2C_TransferConfig>
 80022da:	e00f      	b.n	80022fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	8979      	ldrh	r1, [r7, #10]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fb6e 	bl	80029d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d19e      	bne.n	8002244 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f9c2 	bl	8002694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e01a      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2220      	movs	r2, #32
 8002320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_I2C_Master_Transmit+0x1e4>)
 800232e:	400b      	ands	r3, r1
 8002330:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	80002000 	.word	0x80002000
 800235c:	fe00e800 	.word	0xfe00e800

08002360 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	461a      	mov	r2, r3
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
 8002370:	4613      	mov	r3, r2
 8002372:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	f040 80db 	bne.w	8002538 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2C_Master_Receive+0x30>
 800238c:	2302      	movs	r3, #2
 800238e:	e0d4      	b.n	800253a <HAL_I2C_Master_Receive+0x1da>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002398:	f7ff fb72 	bl	8001a80 <HAL_GetTick>
 800239c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2319      	movs	r3, #25
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f8f2 	bl	8002594 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0bf      	b.n	800253a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2222      	movs	r2, #34	; 0x22
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2210      	movs	r2, #16
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	893a      	ldrh	r2, [r7, #8]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2bff      	cmp	r3, #255	; 0xff
 80023ea:	d90e      	bls.n	800240a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	22ff      	movs	r2, #255	; 0xff
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	8979      	ldrh	r1, [r7, #10]
 80023fa:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HAL_I2C_Master_Receive+0x1e4>)
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fae8 	bl	80029d8 <I2C_TransferConfig>
 8002408:	e06d      	b.n	80024e6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	b2da      	uxtb	r2, r3
 800241a:	8979      	ldrh	r1, [r7, #10]
 800241c:	4b49      	ldr	r3, [pc, #292]	; (8002544 <HAL_I2C_Master_Receive+0x1e4>)
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fad7 	bl	80029d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800242a:	e05c      	b.n	80024e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6a39      	ldr	r1, [r7, #32]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f96b 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e07c      	b.n	800253a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d034      	beq.n	80024e6 <HAL_I2C_Master_Receive+0x186>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d130      	bne.n	80024e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	2200      	movs	r2, #0
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f880 	bl	8002594 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e04d      	b.n	800253a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bff      	cmp	r3, #255	; 0xff
 80024a6:	d90e      	bls.n	80024c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	8979      	ldrh	r1, [r7, #10]
 80024b6:	2300      	movs	r3, #0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa8a 	bl	80029d8 <I2C_TransferConfig>
 80024c4:	e00f      	b.n	80024e6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fa79 	bl	80029d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d19d      	bne.n	800242c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	6a39      	ldr	r1, [r7, #32]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f8cd 	bl	8002694 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e01a      	b.n	800253a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2220      	movs	r2, #32
 800250a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_I2C_Master_Receive+0x1e8>)
 8002518:	400b      	ands	r3, r1
 800251a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e000      	b.n	800253a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	80002400 	.word	0x80002400
 8002548:	fe00e800 	.word	0xfe00e800

0800254c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d103      	bne.n	800256a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d007      	beq.n	8002588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	619a      	str	r2, [r3, #24]
  }
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a4:	e022      	b.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d01e      	beq.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7ff fa67 	bl	8001a80 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d113      	bne.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e00f      	b.n	800260c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4013      	ands	r3, r2
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	429a      	cmp	r2, r3
 8002608:	d0cd      	beq.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002620:	e02c      	b.n	800267c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f8ea 	bl	8002800 <I2C_IsErrorOccurred>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e02a      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d01e      	beq.n	800267c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7ff fa1f 	bl	8001a80 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d113      	bne.n	800267c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e007      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d1cb      	bne.n	8002622 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a0:	e028      	b.n	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f8aa 	bl	8002800 <I2C_IsErrorOccurred>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e026      	b.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7ff f9e3 	bl	8001a80 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d113      	bne.n	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d1cf      	bne.n	80026a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002718:	e064      	b.n	80027e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f86e 	bl	8002800 <I2C_IsErrorOccurred>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e062      	b.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b20      	cmp	r3, #32
 800273a:	d138      	bne.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d105      	bne.n	8002756 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e04e      	b.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b10      	cmp	r3, #16
 8002762:	d107      	bne.n	8002774 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2210      	movs	r2, #16
 800276a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2204      	movs	r2, #4
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
 8002772:	e002      	b.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2220      	movs	r2, #32
 8002780:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800278e:	400b      	ands	r3, r1
 8002790:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e022      	b.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7ff f967 	bl	8001a80 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10f      	bne.n	80027e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e007      	b.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d193      	bne.n	800271a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fe00e800 	.word	0xfe00e800

08002800 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d075      	beq.n	8002918 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002834:	e056      	b.n	80028e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d052      	beq.n	80028e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800283e:	f7ff f91f 	bl	8001a80 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	d302      	bcc.n	8002854 <I2C_IsErrorOccurred+0x54>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d147      	bne.n	80028e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002866:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002876:	d12e      	bne.n	80028d6 <I2C_IsErrorOccurred+0xd6>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287e:	d02a      	beq.n	80028d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b20      	cmp	r3, #32
 8002884:	d027      	beq.n	80028d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002894:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002896:	f7ff f8f3 	bl	8001a80 <HAL_GetTick>
 800289a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800289c:	e01b      	b.n	80028d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800289e:	f7ff f8ef 	bl	8001a80 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b19      	cmp	r3, #25
 80028aa:	d914      	bls.n	80028d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d1dc      	bne.n	800289e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d003      	beq.n	80028fa <I2C_IsErrorOccurred+0xfa>
 80028f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d09d      	beq.n	8002836 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2220      	movs	r2, #32
 8002908:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	f043 0308 	orr.w	r3, r3, #8
 8002952:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01c      	beq.n	80029c8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fddc 	bl	800254c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <I2C_IsErrorOccurred+0x1d4>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	4613      	mov	r3, r2
 80029e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	0d5b      	lsrs	r3, r3, #21
 8002a12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <I2C_TransferConfig+0x60>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	ea02 0103 	and.w	r1, r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	03ff63ff 	.word	0x03ff63ff

08002a3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d138      	bne.n	8002ac4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e032      	b.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d139      	bne.n	8002b5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e033      	b.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000

08002b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b96:	d130      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba4:	d038      	beq.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2232      	movs	r2, #50	; 0x32
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9b      	lsrs	r3, r3, #18
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bcc:	e002      	b.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d102      	bne.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f2      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d110      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e00f      	b.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d007      	beq.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c10:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	431bde83 	.word	0x431bde83

08002c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f000 bc02 	b.w	800344c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c48:	4b96      	ldr	r3, [pc, #600]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c52:	4b94      	ldr	r3, [pc, #592]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80e4 	beq.w	8002e32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4c>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	f040 808b 	bne.w	8002d8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	f040 8087 	bne.w	8002d8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c80:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_OscConfig+0x64>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e3d9      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	4b81      	ldr	r3, [pc, #516]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d004      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x7e>
 8002ca8:	4b7e      	ldr	r3, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb0:	e005      	b.n	8002cbe <HAL_RCC_OscConfig+0x8a>
 8002cb2:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d223      	bcs.n	8002d0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fd8c 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e3ba      	b.n	800344c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a72      	ldr	r2, [pc, #456]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	496d      	ldr	r1, [pc, #436]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf4:	4b6b      	ldr	r3, [pc, #428]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	4968      	ldr	r1, [pc, #416]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	e025      	b.n	8002d56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0a:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a65      	ldr	r2, [pc, #404]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4960      	ldr	r1, [pc, #384]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	495b      	ldr	r1, [pc, #364]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fd4c 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e37a      	b.n	800344c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d56:	f000 fc81 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	4950      	ldr	r1, [pc, #320]	; (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_RCC_OscConfig+0x278>)
 8002d74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d76:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fe30 	bl	80019e0 <HAL_InitTick>
 8002d80:	4603      	mov	r3, r0
 8002d82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d052      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	e35e      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d032      	beq.n	8002dfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d96:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a42      	ldr	r2, [pc, #264]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002da2:	f7fe fe6d 	bl	8001a80 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002daa:	f7fe fe69 	bl	8001a80 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e347      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc8:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dce:	f043 0308 	orr.w	r3, r3, #8
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4930      	ldr	r1, [pc, #192]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	492b      	ldr	r1, [pc, #172]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
 8002dfa:	e01a      	b.n	8002e32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fe3a 	bl	8001a80 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e10:	f7fe fe36 	bl	8001a80 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e314      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x1dc>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d073      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_OscConfig+0x21c>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d10e      	bne.n	8002e68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d063      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2f0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d15f      	bne.n	8002f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e2f1      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x24c>
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e025      	b.n	8002ecc <HAL_RCC_OscConfig+0x298>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e88:	d114      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x280>
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a02      	ldr	r2, [pc, #8]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e013      	b.n	8002ecc <HAL_RCC_OscConfig+0x298>
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08005b14 	.word	0x08005b14
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	4ba0      	ldr	r3, [pc, #640]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a9f      	ldr	r2, [pc, #636]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b9d      	ldr	r3, [pc, #628]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a9c      	ldr	r2, [pc, #624]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fdd4 	bl	8001a80 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fdd0 	bl	8001a80 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e2ae      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eee:	4b92      	ldr	r3, [pc, #584]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x2a8>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fdc0 	bl	8001a80 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fdbc 	bl	8001a80 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e29a      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f16:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2d0>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d060      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x310>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d116      	bne.n	8002f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f44:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x328>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e277      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	4973      	ldr	r1, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f70:	e040      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d023      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6e      	ldr	r2, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fd7b 	bl	8001a80 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fd77 	bl	8001a80 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e255      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa0:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b62      	ldr	r3, [pc, #392]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	495f      	ldr	r1, [pc, #380]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e018      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe fd57 	bl	8001a80 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fe fd53 	bl	8001a80 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e231      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d03c      	beq.n	800307a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01c      	beq.n	8003042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe fd32 	bl	8001a80 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fe fd2e 	bl	8001a80 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e20c      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCC_OscConfig+0x3ec>
 8003040:	e01b      	b.n	800307a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003048:	4a3b      	ldr	r2, [pc, #236]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe fd15 	bl	8001a80 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe fd11 	bl	8001a80 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1ef      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ef      	bne.n	800305a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80a6 	beq.w	80031d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6593      	str	r3, [r2, #88]	; 0x58
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_RCC_OscConfig+0x508>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d118      	bne.n	80030f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_OscConfig+0x508>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_RCC_OscConfig+0x508>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030cc:	f7fe fcd8 	bl	8001a80 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fe fcd4 	bl	8001a80 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1b2      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_RCC_OscConfig+0x508>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x4d8>
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310a:	e029      	b.n	8003160 <HAL_RCC_OscConfig+0x52c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d115      	bne.n	8003140 <HAL_RCC_OscConfig+0x50c>
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	4a03      	ldr	r2, [pc, #12]	; (8003138 <HAL_RCC_OscConfig+0x504>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003134:	e014      	b.n	8003160 <HAL_RCC_OscConfig+0x52c>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
 8003140:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	4a99      	ldr	r2, [pc, #612]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003150:	4b96      	ldr	r3, [pc, #600]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	4a95      	ldr	r2, [pc, #596]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003158:	f023 0304 	bic.w	r3, r3, #4
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d016      	beq.n	8003196 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe fc8a 	bl	8001a80 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe fc86 	bl	8001a80 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e162      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003186:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ed      	beq.n	8003170 <HAL_RCC_OscConfig+0x53c>
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fe fc73 	bl	8001a80 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe fc6f 	bl	8001a80 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e14b      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b4:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ed      	bne.n	800319e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4b78      	ldr	r3, [pc, #480]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	4a77      	ldr	r2, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d03c      	beq.n	800325a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01c      	beq.n	8003222 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80031ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ee:	4a6f      	ldr	r2, [pc, #444]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe fc42 	bl	8001a80 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003200:	f7fe fc3e 	bl	8001a80 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e11c      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003212:	4b66      	ldr	r3, [pc, #408]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ef      	beq.n	8003200 <HAL_RCC_OscConfig+0x5cc>
 8003220:	e01b      	b.n	800325a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003222:	4b62      	ldr	r3, [pc, #392]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003228:	4a60      	ldr	r2, [pc, #384]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe fc25 	bl	8001a80 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800323a:	f7fe fc21 	bl	8001a80 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0ff      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800324c:	4b57      	ldr	r3, [pc, #348]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800324e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ef      	bne.n	800323a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80f3 	beq.w	800344a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b02      	cmp	r3, #2
 800326a:	f040 80c9 	bne.w	8003400 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0203 	and.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	429a      	cmp	r2, r3
 8003280:	d12c      	bne.n	80032dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	3b01      	subs	r3, #1
 800328e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d123      	bne.n	80032dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d11b      	bne.n	80032dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d113      	bne.n	80032dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	3b01      	subs	r3, #1
 80032c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d109      	bne.n	80032dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	3b01      	subs	r3, #1
 80032d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d06b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d062      	beq.n	80033a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0ac      	b.n	800344c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 80032f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fe:	f7fe fbbf 	bl	8001a80 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fbbb 	bl	8001a80 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e099      	b.n	800344c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCC_OscConfig+0x77c>)
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003334:	3a01      	subs	r2, #1
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800333e:	0212      	lsls	r2, r2, #8
 8003340:	4311      	orrs	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003346:	0852      	lsrs	r2, r2, #1
 8003348:	3a01      	subs	r2, #1
 800334a:	0552      	lsls	r2, r2, #21
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003352:	0852      	lsrs	r2, r2, #1
 8003354:	3a01      	subs	r2, #1
 8003356:	0652      	lsls	r2, r2, #25
 8003358:	4311      	orrs	r1, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800335e:	06d2      	lsls	r2, r2, #27
 8003360:	430a      	orrs	r2, r1
 8003362:	4912      	ldr	r1, [pc, #72]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003380:	f7fe fb7e 	bl	8001a80 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fb7a 	bl	8001a80 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e058      	b.n	800344c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <HAL_RCC_OscConfig+0x778>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a6:	e050      	b.n	800344a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e04f      	b.n	800344c <HAL_RCC_OscConfig+0x818>
 80033ac:	40021000 	.word	0x40021000
 80033b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d144      	bne.n	800344a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a23      	ldr	r2, [pc, #140]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033d8:	f7fe fb52 	bl	8001a80 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fb4e 	bl	8001a80 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e02c      	b.n	800344c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x7ac>
 80033fe:	e024      	b.n	800344a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d01f      	beq.n	8003446 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 800340c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fb35 	bl	8001a80 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341a:	f7fe fb31 	bl	8001a80 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e00f      	b.n	800344c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	4905      	ldr	r1, [pc, #20]	; (8003454 <HAL_RCC_OscConfig+0x820>)
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_OscConfig+0x824>)
 8003440:	4013      	ands	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
 8003444:	e001      	b.n	800344a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	feeefffc 	.word	0xfeeefffc

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0e7      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b75      	ldr	r3, [pc, #468]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b72      	ldr	r3, [pc, #456]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4970      	ldr	r1, [pc, #448]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b6e      	ldr	r3, [pc, #440]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cf      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d010      	beq.n	80034ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d908      	bls.n	80034ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4960      	ldr	r1, [pc, #384]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04c      	beq.n	8003574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	4b5a      	ldr	r3, [pc, #360]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d121      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0a6      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fa:	4b54      	ldr	r3, [pc, #336]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e09a      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e08e      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e086      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4943      	ldr	r1, [pc, #268]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fe fa9c 	bl	8001a80 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe fa98 	bl	8001a80 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e06e      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b3a      	ldr	r3, [pc, #232]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358c:	429a      	cmp	r2, r3
 800358e:	d208      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	492b      	ldr	r1, [pc, #172]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d210      	bcs.n	80035d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0207 	bic.w	r2, r3, #7
 80035b8:	4923      	ldr	r1, [pc, #140]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e036      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4918      	ldr	r1, [pc, #96]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4910      	ldr	r1, [pc, #64]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003610:	f000 f824 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	490b      	ldr	r1, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1f4>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1f8>)
 800362e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1fc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe f9d3 	bl	80019e0 <HAL_InitTick>
 800363a:	4603      	mov	r3, r0
 800363c:	72fb      	strb	r3, [r7, #11]

  return status;
 800363e:	7afb      	ldrb	r3, [r7, #11]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40022000 	.word	0x40022000
 800364c:	40021000 	.word	0x40021000
 8003650:	08005b14 	.word	0x08005b14
 8003654:	20000004 	.word	0x20000004
 8003658:	20000008 	.word	0x20000008

0800365c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003674:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x34>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d121      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d11e      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003690:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800369c:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b8:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d102      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_GetSysClockFreq+0x110>)
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e004      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_RCC_GetSysClockFreq+0x114>)
 80036e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d134      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0xa6>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d003      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0xac>
 8003700:	e005      	b.n	800370e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_RCC_GetSysClockFreq+0x110>)
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	e005      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_GetSysClockFreq+0x114>)
 800370a:	617b      	str	r3, [r7, #20]
      break;
 800370c:	e002      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	617b      	str	r3, [r7, #20]
      break;
 8003712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	3301      	adds	r3, #1
 8003720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	fb03 f202 	mul.w	r2, r3, r2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	0e5b      	lsrs	r3, r3, #25
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	3301      	adds	r3, #1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003754:	69bb      	ldr	r3, [r7, #24]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	08005b2c 	.word	0x08005b2c
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	08005b24 	.word	0x08005b24

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037bc:	f7ff ffda 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0adb      	lsrs	r3, r3, #11
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	08005b24 	.word	0x08005b24

080037e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037fc:	f7ff f9b6 	bl	8002b6c <HAL_PWREx_GetVoltageRange>
 8003800:	6178      	str	r0, [r7, #20]
 8003802:	e014      	b.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800381c:	f7ff f9a6 	bl	8002b6c <HAL_PWREx_GetVoltageRange>
 8003820:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	4a1d      	ldr	r2, [pc, #116]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003834:	d10b      	bne.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d919      	bls.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2ba0      	cmp	r3, #160	; 0xa0
 8003840:	d902      	bls.n	8003848 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003842:	2302      	movs	r3, #2
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e013      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003848:	2301      	movs	r3, #1
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e010      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d902      	bls.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003854:	2303      	movs	r3, #3
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e00a      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d102      	bne.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003860:	2302      	movs	r3, #2
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e004      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d101      	bne.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800386c:	2301      	movs	r3, #1
 800386e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 0207 	bic.w	r2, r3, #7
 8003878:	4909      	ldr	r1, [pc, #36]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038ac:	2300      	movs	r3, #0
 80038ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b0:	2300      	movs	r3, #0
 80038b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d031      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c8:	d01a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038ce:	d814      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d8:	d10f      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4a5c      	ldr	r2, [pc, #368]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e6:	e00c      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa22 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	74fb      	strb	r3, [r7, #19]
      break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003908:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	494e      	ldr	r1, [pc, #312]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 809e 	beq.w	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a3f      	ldr	r2, [pc, #252]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003964:	2301      	movs	r3, #1
 8003966:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a39      	ldr	r2, [pc, #228]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003974:	f7fe f884 	bl	8001a80 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe f880 	bl	8001a80 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	74fb      	strb	r3, [r7, #19]
        break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01e      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d019      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d016      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe f840 	bl	8001a80 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	e00b      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f83c 	bl	8001a80 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d902      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	74fb      	strb	r3, [r7, #19]
            break;
 8003a1a:	e006      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ec      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	4904      	ldr	r1, [pc, #16]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a46:	e009      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	74bb      	strb	r3, [r7, #18]
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5c:	7c7b      	ldrb	r3, [r7, #17]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4a8c      	ldr	r2, [pc, #560]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a7a:	4b87      	ldr	r3, [pc, #540]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f023 0203 	bic.w	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4983      	ldr	r1, [pc, #524]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a9c:	4b7e      	ldr	r3, [pc, #504]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 020c 	bic.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	497b      	ldr	r1, [pc, #492]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003abe:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	4972      	ldr	r1, [pc, #456]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ae0:	4b6d      	ldr	r3, [pc, #436]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	496a      	ldr	r1, [pc, #424]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	4961      	ldr	r1, [pc, #388]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b24:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4959      	ldr	r1, [pc, #356]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b46:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	4950      	ldr	r1, [pc, #320]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	4948      	ldr	r1, [pc, #288]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	493f      	ldr	r1, [pc, #252]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d028      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bac:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	4937      	ldr	r1, [pc, #220]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bca:	d106      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bcc:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd6:	60d3      	str	r3, [r2, #12]
 8003bd8:	e011      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f8a4 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d028      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c0a:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	491f      	ldr	r1, [pc, #124]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c28:	d106      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c34:	60d3      	str	r3, [r2, #12]
 8003c36:	e011      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f875 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d02b      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c86:	d109      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a02      	ldr	r2, [pc, #8]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c92:	60d3      	str	r3, [r2, #12]
 8003c94:	e014      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f843 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01c      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	4916      	ldr	r1, [pc, #88]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f820 	bl	8003d38 <RCCEx_PLLSAI1_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	4904      	ldr	r1, [pc, #16]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000

08003d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d46:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d52:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10d      	bne.n	8003d7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
       ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
       ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d047      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e044      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d018      	beq.n	8003dbe <RCCEx_PLLSAI1_Config+0x86>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d825      	bhi.n	8003ddc <RCCEx_PLLSAI1_Config+0xa4>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d002      	beq.n	8003d9a <RCCEx_PLLSAI1_Config+0x62>
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d009      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0x74>
 8003d98:	e020      	b.n	8003ddc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003daa:	e01a      	b.n	8003de2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dac:	4b5a      	ldr	r3, [pc, #360]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e013      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dbe:	4b56      	ldr	r3, [pc, #344]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dca:	4b53      	ldr	r3, [pc, #332]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dda:	e006      	b.n	8003dea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e004      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003df2:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	430b      	orrs	r3, r1
 8003e08:	4943      	ldr	r1, [pc, #268]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d17c      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e14:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fd fe2e 	bl	8001a80 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e28:	f7fd fe2a 	bl	8001a80 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ef      	bne.n	8003e28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d15f      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d110      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	0211      	lsls	r1, r2, #8
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	06d2      	lsls	r2, r2, #27
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	492a      	ldr	r1, [pc, #168]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	610b      	str	r3, [r1, #16]
 8003e74:	e027      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d112      	bne.n	8003ea2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	0211      	lsls	r1, r2, #8
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6912      	ldr	r2, [r2, #16]
 8003e92:	0852      	lsrs	r2, r2, #1
 8003e94:	3a01      	subs	r2, #1
 8003e96:	0552      	lsls	r2, r2, #21
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	491f      	ldr	r1, [pc, #124]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	610b      	str	r3, [r1, #16]
 8003ea0:	e011      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eaa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6892      	ldr	r2, [r2, #8]
 8003eb2:	0211      	lsls	r1, r2, #8
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6952      	ldr	r2, [r2, #20]
 8003eb8:	0852      	lsrs	r2, r2, #1
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	0652      	lsls	r2, r2, #25
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	4915      	ldr	r1, [pc, #84]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fdd5 	bl	8001a80 <HAL_GetTick>
 8003ed6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ed8:	e009      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eda:	f7fd fdd1 	bl	8001a80 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d902      	bls.n	8003eee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	73fb      	strb	r3, [r7, #15]
          break;
 8003eec:	e005      	b.n	8003efa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000

08003f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd fbf0 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 fa50 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d122      	bne.n	8004026 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d11b      	bne.n	8004026 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0202 	mvn.w	r2, #2
 8003ff6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f9d8 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8004012:	e005      	b.n	8004020 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f9ca 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f9db 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d122      	bne.n	800407a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d11b      	bne.n	800407a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0204 	mvn.w	r2, #4
 800404a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9ae 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8004066:	e005      	b.n	8004074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9a0 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9b1 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d122      	bne.n	80040ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11b      	bne.n	80040ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0208 	mvn.w	r2, #8
 800409e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2204      	movs	r2, #4
 80040a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f984 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 80040ba:	e005      	b.n	80040c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f976 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f987 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d122      	bne.n	8004122 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d11b      	bne.n	8004122 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0210 	mvn.w	r2, #16
 80040f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2208      	movs	r2, #8
 80040f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f95a 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 800410e:	e005      	b.n	800411c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f94c 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f95d 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10e      	bne.n	800414e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0201 	mvn.w	r2, #1
 8004146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f926 	bl	800439a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d10e      	bne.n	800417a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d107      	bne.n	800417a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fab1 	bl	80046dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 faa4 	bl	80046f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f90b 	bl	80043ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0220 	mvn.w	r2, #32
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa64 	bl	80046c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e0b6      	b.n	8004392 <HAL_TIM_ConfigClockSource+0x18a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d03e      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xd8>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	f200 8087 	bhi.w	8004378 <HAL_TIM_ConfigClockSource+0x170>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	f000 8086 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x176>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d87f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d01a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xaa>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d87b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d050      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x11e>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d877      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d03c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xfe>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d873      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d058      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x13e>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d86f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d064      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d867      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d05a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 80042b0:	e062      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 f97b 	bl	80045bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	609a      	str	r2, [r3, #8]
      break;
 80042de:	e04f      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 f964 	bl	80045bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 f8d8 	bl	80044c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f931 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 8004324:	e02c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 f8f7 	bl	8004526 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f921 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 8004344:	e01c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 f8b8 	bl	80044c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f911 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 8004364:	e00c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 f908 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 8004376:	e003      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e000      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800437e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <TIM_Base_SetConfig+0xbc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x20>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a21      	ldr	r2, [pc, #132]	; (80044bc <TIM_Base_SetConfig+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00b      	beq.n	8004452 <TIM_Base_SetConfig+0x52>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d007      	beq.n	8004452 <TIM_Base_SetConfig+0x52>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <TIM_Base_SetConfig+0xc0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_Base_SetConfig+0x52>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <TIM_Base_SetConfig+0xc4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <TIM_Base_SetConfig+0xbc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_Base_SetConfig+0xa0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <TIM_Base_SetConfig+0xc0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0xa0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <TIM_Base_SetConfig+0xc4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d103      	bne.n	80044a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	615a      	str	r2, [r3, #20]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400

080044c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 030a 	bic.w	r3, r3, #10
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004526:	b480      	push	{r7}
 8004528:	b087      	sub	sp, #28
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0210 	bic.w	r2, r3, #16
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f043 0307 	orr.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	021a      	lsls	r2, r3, #8
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	431a      	orrs	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	609a      	str	r2, [r3, #8]
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e04f      	b.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a21      	ldr	r2, [pc, #132]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d108      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004644:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d004      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10c      	bne.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40014000 	.word	0x40014000

080046c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e040      	b.n	8004798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd f822 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	; 0x24
 8004730:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8c0 	bl	80048c8 <UART_SetConfig>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e022      	b.n	8004798 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fb0e 	bl	8004d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800476e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800477e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb95 	bl	8004ec0 <UART_CheckIdleState>
 8004796:	4603      	mov	r3, r0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	f040 8082 	bne.w	80048be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_UART_Transmit+0x26>
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07a      	b.n	80048c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_UART_Transmit+0x38>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e073      	b.n	80048c0 <HAL_UART_Transmit+0x120>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2221      	movs	r2, #33	; 0x21
 80047ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ee:	f7fd f947 	bl	8001a80 <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d108      	bne.n	8004820 <HAL_UART_Transmit+0x80>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	e003      	b.n	8004828 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004830:	e02d      	b.n	800488e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fb88 	bl	8004f52 <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e039      	b.n	80048c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800485e:	b292      	uxth	r2, r2
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	3302      	adds	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	e008      	b.n	800487c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	b292      	uxth	r2, r2
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1cb      	bne.n	8004832 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fb54 	bl	8004f52 <UART_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e005      	b.n	80048c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b08a      	sub	sp, #40	; 0x28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b9e      	ldr	r3, [pc, #632]	; (8004b70 <UART_SetConfig+0x2a8>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004900:	430b      	orrs	r3, r1
 8004902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x2ac>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	4313      	orrs	r3, r2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a8a      	ldr	r2, [pc, #552]	; (8004b78 <UART_SetConfig+0x2b0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d126      	bne.n	80049a0 <UART_SetConfig+0xd8>
 8004952:	4b8a      	ldr	r3, [pc, #552]	; (8004b7c <UART_SetConfig+0x2b4>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b03      	cmp	r3, #3
 800495e:	d81b      	bhi.n	8004998 <UART_SetConfig+0xd0>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0xa0>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004979 	.word	0x08004979
 800496c:	08004989 	.word	0x08004989
 8004970:	08004981 	.word	0x08004981
 8004974:	08004991 	.word	0x08004991
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e0ab      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004980:	2302      	movs	r3, #2
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e0a7      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e0a3      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004996:	e09f      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e09b      	b.n	8004ad8 <UART_SetConfig+0x210>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a76      	ldr	r2, [pc, #472]	; (8004b80 <UART_SetConfig+0x2b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d138      	bne.n	8004a1c <UART_SetConfig+0x154>
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <UART_SetConfig+0x2b4>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d82d      	bhi.n	8004a14 <UART_SetConfig+0x14c>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0xf8>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004a15 	.word	0x08004a15
 80049c8:	08004a15 	.word	0x08004a15
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004a15 	.word	0x08004a15
 80049d8:	08004a15 	.word	0x08004a15
 80049dc:	08004a15 	.word	0x08004a15
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	08004a15 	.word	0x08004a15
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e06d      	b.n	8004ad8 <UART_SetConfig+0x210>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e069      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e065      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e061      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e05d      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <UART_SetConfig+0x2bc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d125      	bne.n	8004a72 <UART_SetConfig+0x1aa>
 8004a26:	4b55      	ldr	r3, [pc, #340]	; (8004b7c <UART_SetConfig+0x2b4>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a30:	2b30      	cmp	r3, #48	; 0x30
 8004a32:	d016      	beq.n	8004a62 <UART_SetConfig+0x19a>
 8004a34:	2b30      	cmp	r3, #48	; 0x30
 8004a36:	d818      	bhi.n	8004a6a <UART_SetConfig+0x1a2>
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d00a      	beq.n	8004a52 <UART_SetConfig+0x18a>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d814      	bhi.n	8004a6a <UART_SetConfig+0x1a2>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <UART_SetConfig+0x182>
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d008      	beq.n	8004a5a <UART_SetConfig+0x192>
 8004a48:	e00f      	b.n	8004a6a <UART_SetConfig+0x1a2>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a50:	e042      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a52:	2302      	movs	r3, #2
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a58:	e03e      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a60:	e03a      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a62:	2308      	movs	r3, #8
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a68:	e036      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a70:	e032      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <UART_SetConfig+0x2ac>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d12a      	bne.n	8004ad2 <UART_SetConfig+0x20a>
 8004a7c:	4b3f      	ldr	r3, [pc, #252]	; (8004b7c <UART_SetConfig+0x2b4>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a8a:	d01a      	beq.n	8004ac2 <UART_SetConfig+0x1fa>
 8004a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a90:	d81b      	bhi.n	8004aca <UART_SetConfig+0x202>
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d00c      	beq.n	8004ab2 <UART_SetConfig+0x1ea>
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9c:	d815      	bhi.n	8004aca <UART_SetConfig+0x202>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <UART_SetConfig+0x1e2>
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d008      	beq.n	8004aba <UART_SetConfig+0x1f2>
 8004aa8:	e00f      	b.n	8004aca <UART_SetConfig+0x202>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab0:	e012      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab8:	e00e      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004aba:	2304      	movs	r3, #4
 8004abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac0:	e00a      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac8:	e006      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004aca:	2310      	movs	r3, #16
 8004acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad0:	e002      	b.n	8004ad8 <UART_SetConfig+0x210>
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <UART_SetConfig+0x2ac>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	f040 808a 	bne.w	8004bf8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d824      	bhi.n	8004b36 <UART_SetConfig+0x26e>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0x22c>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b37 	.word	0x08004b37
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b37 	.word	0x08004b37
 8004b04:	08004b27 	.word	0x08004b27
 8004b08:	08004b37 	.word	0x08004b37
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b37 	.word	0x08004b37
 8004b14:	08004b2f 	.word	0x08004b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7fe fe38 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004b1c:	61f8      	str	r0, [r7, #28]
        break;
 8004b1e:	e010      	b.n	8004b42 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <UART_SetConfig+0x2c0>)
 8004b22:	61fb      	str	r3, [r7, #28]
        break;
 8004b24:	e00d      	b.n	8004b42 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b26:	f7fe fd99 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8004b2a:	61f8      	str	r0, [r7, #28]
        break;
 8004b2c:	e009      	b.n	8004b42 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b32:	61fb      	str	r3, [r7, #28]
        break;
 8004b34:	e005      	b.n	8004b42 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8109 	beq.w	8004d5c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d305      	bcc.n	8004b66 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d912      	bls.n	8004b8c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b6c:	e0f6      	b.n	8004d5c <UART_SetConfig+0x494>
 8004b6e:	bf00      	nop
 8004b70:	efff69f3 	.word	0xefff69f3
 8004b74:	40008000 	.word	0x40008000
 8004b78:	40013800 	.word	0x40013800
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40004400 	.word	0x40004400
 8004b84:	40004800 	.word	0x40004800
 8004b88:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	461c      	mov	r4, r3
 8004b92:	4615      	mov	r5, r2
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	022b      	lsls	r3, r5, #8
 8004b9e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ba2:	0222      	lsls	r2, r4, #8
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	6849      	ldr	r1, [r1, #4]
 8004ba8:	0849      	lsrs	r1, r1, #1
 8004baa:	2000      	movs	r0, #0
 8004bac:	4688      	mov	r8, r1
 8004bae:	4681      	mov	r9, r0
 8004bb0:	eb12 0a08 	adds.w	sl, r2, r8
 8004bb4:	eb43 0b09 	adc.w	fp, r3, r9
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	4659      	mov	r1, fp
 8004bca:	f7fb fe8f 	bl	80008ec <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bdc:	d308      	bcc.n	8004bf0 <UART_SetConfig+0x328>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be4:	d204      	bcs.n	8004bf0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	e0b5      	b.n	8004d5c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bf6:	e0b1      	b.n	8004d5c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c00:	d15d      	bne.n	8004cbe <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d827      	bhi.n	8004c5a <UART_SetConfig+0x392>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <UART_SetConfig+0x348>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004c5b 	.word	0x08004c5b
 8004c20:	08004c4b 	.word	0x08004c4b
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c5b 	.word	0x08004c5b
 8004c2c:	08004c5b 	.word	0x08004c5b
 8004c30:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c34:	f7fe fdaa 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004c38:	61f8      	str	r0, [r7, #28]
        break;
 8004c3a:	e014      	b.n	8004c66 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7fe fdbc 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 8004c40:	61f8      	str	r0, [r7, #28]
        break;
 8004c42:	e010      	b.n	8004c66 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b4c      	ldr	r3, [pc, #304]	; (8004d78 <UART_SetConfig+0x4b0>)
 8004c46:	61fb      	str	r3, [r7, #28]
        break;
 8004c48:	e00d      	b.n	8004c66 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fe fd07 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8004c4e:	61f8      	str	r0, [r7, #28]
        break;
 8004c50:	e009      	b.n	8004c66 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c56:	61fb      	str	r3, [r7, #28]
        break;
 8004c58:	e005      	b.n	8004c66 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d077      	beq.n	8004d5c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005a      	lsls	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b0f      	cmp	r3, #15
 8004c86:	d916      	bls.n	8004cb6 <UART_SetConfig+0x3ee>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8e:	d212      	bcs.n	8004cb6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f023 030f 	bic.w	r3, r3, #15
 8004c98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	8afa      	ldrh	r2, [r7, #22]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	e052      	b.n	8004d5c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cbc:	e04e      	b.n	8004d5c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d827      	bhi.n	8004d16 <UART_SetConfig+0x44e>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x404>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe fd4c 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004cf4:	61f8      	str	r0, [r7, #28]
        break;
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe fd5e 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	61f8      	str	r0, [r7, #28]
        break;
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <UART_SetConfig+0x4b0>)
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe fca9 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8004d0a:	61f8      	str	r0, [r7, #28]
        break;
 8004d0c:	e009      	b.n	8004d22 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	61fb      	str	r3, [r7, #28]
        break;
 8004d14:	e005      	b.n	8004d22 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d20:	bf00      	nop
    }

    if (pclk != 0U)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d019      	beq.n	8004d5c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	085a      	lsrs	r2, r3, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d909      	bls.n	8004d56 <UART_SetConfig+0x48e>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d205      	bcs.n	8004d56 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e002      	b.n	8004d5c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	00f42400 	.word	0x00f42400

08004d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7a:	d10a      	bne.n	8004e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed0:	f7fc fdd6 	bl	8001a80 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d10e      	bne.n	8004f02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f82d 	bl	8004f52 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e023      	b.n	8004f4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d10e      	bne.n	8004f2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f817 	bl	8004f52 <UART_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e00d      	b.n	8004f4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b09c      	sub	sp, #112	; 0x70
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f62:	e0a5      	b.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	f000 80a1 	beq.w	80050b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6e:	f7fc fd87 	bl	8001a80 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d13e      	bne.n	8005002 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f98:	667b      	str	r3, [r7, #100]	; 0x64
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e067      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d04f      	beq.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501e:	d147      	bne.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005028:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800503e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800504e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3308      	adds	r3, #8
 8005062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	613b      	str	r3, [r7, #16]
   return(result);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	66bb      	str	r3, [r7, #104]	; 0x68
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800507c:	623a      	str	r2, [r7, #32]
 800507e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	61bb      	str	r3, [r7, #24]
   return(result);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e010      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4013      	ands	r3, r2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	f43f af4a 	beq.w	8004f64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3770      	adds	r7, #112	; 0x70
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <__errno>:
 80050dc:	4b01      	ldr	r3, [pc, #4]	; (80050e4 <__errno+0x8>)
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000010 	.word	0x20000010

080050e8 <__libc_init_array>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4d0d      	ldr	r5, [pc, #52]	; (8005120 <__libc_init_array+0x38>)
 80050ec:	4c0d      	ldr	r4, [pc, #52]	; (8005124 <__libc_init_array+0x3c>)
 80050ee:	1b64      	subs	r4, r4, r5
 80050f0:	10a4      	asrs	r4, r4, #2
 80050f2:	2600      	movs	r6, #0
 80050f4:	42a6      	cmp	r6, r4
 80050f6:	d109      	bne.n	800510c <__libc_init_array+0x24>
 80050f8:	4d0b      	ldr	r5, [pc, #44]	; (8005128 <__libc_init_array+0x40>)
 80050fa:	4c0c      	ldr	r4, [pc, #48]	; (800512c <__libc_init_array+0x44>)
 80050fc:	f000 fc8e 	bl	8005a1c <_init>
 8005100:	1b64      	subs	r4, r4, r5
 8005102:	10a4      	asrs	r4, r4, #2
 8005104:	2600      	movs	r6, #0
 8005106:	42a6      	cmp	r6, r4
 8005108:	d105      	bne.n	8005116 <__libc_init_array+0x2e>
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005110:	4798      	blx	r3
 8005112:	3601      	adds	r6, #1
 8005114:	e7ee      	b.n	80050f4 <__libc_init_array+0xc>
 8005116:	f855 3b04 	ldr.w	r3, [r5], #4
 800511a:	4798      	blx	r3
 800511c:	3601      	adds	r6, #1
 800511e:	e7f2      	b.n	8005106 <__libc_init_array+0x1e>
 8005120:	08005b98 	.word	0x08005b98
 8005124:	08005b98 	.word	0x08005b98
 8005128:	08005b98 	.word	0x08005b98
 800512c:	08005b9c 	.word	0x08005b9c

08005130 <memset>:
 8005130:	4402      	add	r2, r0
 8005132:	4603      	mov	r3, r0
 8005134:	4293      	cmp	r3, r2
 8005136:	d100      	bne.n	800513a <memset+0xa>
 8005138:	4770      	bx	lr
 800513a:	f803 1b01 	strb.w	r1, [r3], #1
 800513e:	e7f9      	b.n	8005134 <memset+0x4>

08005140 <siprintf>:
 8005140:	b40e      	push	{r1, r2, r3}
 8005142:	b500      	push	{lr}
 8005144:	b09c      	sub	sp, #112	; 0x70
 8005146:	ab1d      	add	r3, sp, #116	; 0x74
 8005148:	9002      	str	r0, [sp, #8]
 800514a:	9006      	str	r0, [sp, #24]
 800514c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005150:	4809      	ldr	r0, [pc, #36]	; (8005178 <siprintf+0x38>)
 8005152:	9107      	str	r1, [sp, #28]
 8005154:	9104      	str	r1, [sp, #16]
 8005156:	4909      	ldr	r1, [pc, #36]	; (800517c <siprintf+0x3c>)
 8005158:	f853 2b04 	ldr.w	r2, [r3], #4
 800515c:	9105      	str	r1, [sp, #20]
 800515e:	6800      	ldr	r0, [r0, #0]
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	a902      	add	r1, sp, #8
 8005164:	f000 f868 	bl	8005238 <_svfiprintf_r>
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	b01c      	add	sp, #112	; 0x70
 8005170:	f85d eb04 	ldr.w	lr, [sp], #4
 8005174:	b003      	add	sp, #12
 8005176:	4770      	bx	lr
 8005178:	20000010 	.word	0x20000010
 800517c:	ffff0208 	.word	0xffff0208

08005180 <__ssputs_r>:
 8005180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	688e      	ldr	r6, [r1, #8]
 8005186:	429e      	cmp	r6, r3
 8005188:	4682      	mov	sl, r0
 800518a:	460c      	mov	r4, r1
 800518c:	4690      	mov	r8, r2
 800518e:	461f      	mov	r7, r3
 8005190:	d838      	bhi.n	8005204 <__ssputs_r+0x84>
 8005192:	898a      	ldrh	r2, [r1, #12]
 8005194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005198:	d032      	beq.n	8005200 <__ssputs_r+0x80>
 800519a:	6825      	ldr	r5, [r4, #0]
 800519c:	6909      	ldr	r1, [r1, #16]
 800519e:	eba5 0901 	sub.w	r9, r5, r1
 80051a2:	6965      	ldr	r5, [r4, #20]
 80051a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051ac:	3301      	adds	r3, #1
 80051ae:	444b      	add	r3, r9
 80051b0:	106d      	asrs	r5, r5, #1
 80051b2:	429d      	cmp	r5, r3
 80051b4:	bf38      	it	cc
 80051b6:	461d      	movcc	r5, r3
 80051b8:	0553      	lsls	r3, r2, #21
 80051ba:	d531      	bpl.n	8005220 <__ssputs_r+0xa0>
 80051bc:	4629      	mov	r1, r5
 80051be:	f000 fb63 	bl	8005888 <_malloc_r>
 80051c2:	4606      	mov	r6, r0
 80051c4:	b950      	cbnz	r0, 80051dc <__ssputs_r+0x5c>
 80051c6:	230c      	movs	r3, #12
 80051c8:	f8ca 3000 	str.w	r3, [sl]
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051dc:	6921      	ldr	r1, [r4, #16]
 80051de:	464a      	mov	r2, r9
 80051e0:	f000 fabe 	bl	8005760 <memcpy>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	6126      	str	r6, [r4, #16]
 80051f2:	6165      	str	r5, [r4, #20]
 80051f4:	444e      	add	r6, r9
 80051f6:	eba5 0509 	sub.w	r5, r5, r9
 80051fa:	6026      	str	r6, [r4, #0]
 80051fc:	60a5      	str	r5, [r4, #8]
 80051fe:	463e      	mov	r6, r7
 8005200:	42be      	cmp	r6, r7
 8005202:	d900      	bls.n	8005206 <__ssputs_r+0x86>
 8005204:	463e      	mov	r6, r7
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	4632      	mov	r2, r6
 800520a:	4641      	mov	r1, r8
 800520c:	f000 fab6 	bl	800577c <memmove>
 8005210:	68a3      	ldr	r3, [r4, #8]
 8005212:	1b9b      	subs	r3, r3, r6
 8005214:	60a3      	str	r3, [r4, #8]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	4433      	add	r3, r6
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	2000      	movs	r0, #0
 800521e:	e7db      	b.n	80051d8 <__ssputs_r+0x58>
 8005220:	462a      	mov	r2, r5
 8005222:	f000 fba5 	bl	8005970 <_realloc_r>
 8005226:	4606      	mov	r6, r0
 8005228:	2800      	cmp	r0, #0
 800522a:	d1e1      	bne.n	80051f0 <__ssputs_r+0x70>
 800522c:	6921      	ldr	r1, [r4, #16]
 800522e:	4650      	mov	r0, sl
 8005230:	f000 fabe 	bl	80057b0 <_free_r>
 8005234:	e7c7      	b.n	80051c6 <__ssputs_r+0x46>
	...

08005238 <_svfiprintf_r>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4698      	mov	r8, r3
 800523e:	898b      	ldrh	r3, [r1, #12]
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	b09d      	sub	sp, #116	; 0x74
 8005244:	4607      	mov	r7, r0
 8005246:	460d      	mov	r5, r1
 8005248:	4614      	mov	r4, r2
 800524a:	d50e      	bpl.n	800526a <_svfiprintf_r+0x32>
 800524c:	690b      	ldr	r3, [r1, #16]
 800524e:	b963      	cbnz	r3, 800526a <_svfiprintf_r+0x32>
 8005250:	2140      	movs	r1, #64	; 0x40
 8005252:	f000 fb19 	bl	8005888 <_malloc_r>
 8005256:	6028      	str	r0, [r5, #0]
 8005258:	6128      	str	r0, [r5, #16]
 800525a:	b920      	cbnz	r0, 8005266 <_svfiprintf_r+0x2e>
 800525c:	230c      	movs	r3, #12
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	e0d1      	b.n	800540a <_svfiprintf_r+0x1d2>
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	616b      	str	r3, [r5, #20]
 800526a:	2300      	movs	r3, #0
 800526c:	9309      	str	r3, [sp, #36]	; 0x24
 800526e:	2320      	movs	r3, #32
 8005270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005274:	f8cd 800c 	str.w	r8, [sp, #12]
 8005278:	2330      	movs	r3, #48	; 0x30
 800527a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005424 <_svfiprintf_r+0x1ec>
 800527e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005282:	f04f 0901 	mov.w	r9, #1
 8005286:	4623      	mov	r3, r4
 8005288:	469a      	mov	sl, r3
 800528a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800528e:	b10a      	cbz	r2, 8005294 <_svfiprintf_r+0x5c>
 8005290:	2a25      	cmp	r2, #37	; 0x25
 8005292:	d1f9      	bne.n	8005288 <_svfiprintf_r+0x50>
 8005294:	ebba 0b04 	subs.w	fp, sl, r4
 8005298:	d00b      	beq.n	80052b2 <_svfiprintf_r+0x7a>
 800529a:	465b      	mov	r3, fp
 800529c:	4622      	mov	r2, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	4638      	mov	r0, r7
 80052a2:	f7ff ff6d 	bl	8005180 <__ssputs_r>
 80052a6:	3001      	adds	r0, #1
 80052a8:	f000 80aa 	beq.w	8005400 <_svfiprintf_r+0x1c8>
 80052ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ae:	445a      	add	r2, fp
 80052b0:	9209      	str	r2, [sp, #36]	; 0x24
 80052b2:	f89a 3000 	ldrb.w	r3, [sl]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80a2 	beq.w	8005400 <_svfiprintf_r+0x1c8>
 80052bc:	2300      	movs	r3, #0
 80052be:	f04f 32ff 	mov.w	r2, #4294967295
 80052c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c6:	f10a 0a01 	add.w	sl, sl, #1
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	9307      	str	r3, [sp, #28]
 80052ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052d2:	931a      	str	r3, [sp, #104]	; 0x68
 80052d4:	4654      	mov	r4, sl
 80052d6:	2205      	movs	r2, #5
 80052d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052dc:	4851      	ldr	r0, [pc, #324]	; (8005424 <_svfiprintf_r+0x1ec>)
 80052de:	f7fa ff7f 	bl	80001e0 <memchr>
 80052e2:	9a04      	ldr	r2, [sp, #16]
 80052e4:	b9d8      	cbnz	r0, 800531e <_svfiprintf_r+0xe6>
 80052e6:	06d0      	lsls	r0, r2, #27
 80052e8:	bf44      	itt	mi
 80052ea:	2320      	movmi	r3, #32
 80052ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f0:	0711      	lsls	r1, r2, #28
 80052f2:	bf44      	itt	mi
 80052f4:	232b      	movmi	r3, #43	; 0x2b
 80052f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fa:	f89a 3000 	ldrb.w	r3, [sl]
 80052fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005300:	d015      	beq.n	800532e <_svfiprintf_r+0xf6>
 8005302:	9a07      	ldr	r2, [sp, #28]
 8005304:	4654      	mov	r4, sl
 8005306:	2000      	movs	r0, #0
 8005308:	f04f 0c0a 	mov.w	ip, #10
 800530c:	4621      	mov	r1, r4
 800530e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005312:	3b30      	subs	r3, #48	; 0x30
 8005314:	2b09      	cmp	r3, #9
 8005316:	d94e      	bls.n	80053b6 <_svfiprintf_r+0x17e>
 8005318:	b1b0      	cbz	r0, 8005348 <_svfiprintf_r+0x110>
 800531a:	9207      	str	r2, [sp, #28]
 800531c:	e014      	b.n	8005348 <_svfiprintf_r+0x110>
 800531e:	eba0 0308 	sub.w	r3, r0, r8
 8005322:	fa09 f303 	lsl.w	r3, r9, r3
 8005326:	4313      	orrs	r3, r2
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	46a2      	mov	sl, r4
 800532c:	e7d2      	b.n	80052d4 <_svfiprintf_r+0x9c>
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	9103      	str	r1, [sp, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfbb      	ittet	lt
 800533a:	425b      	neglt	r3, r3
 800533c:	f042 0202 	orrlt.w	r2, r2, #2
 8005340:	9307      	strge	r3, [sp, #28]
 8005342:	9307      	strlt	r3, [sp, #28]
 8005344:	bfb8      	it	lt
 8005346:	9204      	strlt	r2, [sp, #16]
 8005348:	7823      	ldrb	r3, [r4, #0]
 800534a:	2b2e      	cmp	r3, #46	; 0x2e
 800534c:	d10c      	bne.n	8005368 <_svfiprintf_r+0x130>
 800534e:	7863      	ldrb	r3, [r4, #1]
 8005350:	2b2a      	cmp	r3, #42	; 0x2a
 8005352:	d135      	bne.n	80053c0 <_svfiprintf_r+0x188>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	9203      	str	r2, [sp, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfb8      	it	lt
 8005360:	f04f 33ff 	movlt.w	r3, #4294967295
 8005364:	3402      	adds	r4, #2
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005434 <_svfiprintf_r+0x1fc>
 800536c:	7821      	ldrb	r1, [r4, #0]
 800536e:	2203      	movs	r2, #3
 8005370:	4650      	mov	r0, sl
 8005372:	f7fa ff35 	bl	80001e0 <memchr>
 8005376:	b140      	cbz	r0, 800538a <_svfiprintf_r+0x152>
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	eba0 000a 	sub.w	r0, r0, sl
 800537e:	fa03 f000 	lsl.w	r0, r3, r0
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	4303      	orrs	r3, r0
 8005386:	3401      	adds	r4, #1
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538e:	4826      	ldr	r0, [pc, #152]	; (8005428 <_svfiprintf_r+0x1f0>)
 8005390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005394:	2206      	movs	r2, #6
 8005396:	f7fa ff23 	bl	80001e0 <memchr>
 800539a:	2800      	cmp	r0, #0
 800539c:	d038      	beq.n	8005410 <_svfiprintf_r+0x1d8>
 800539e:	4b23      	ldr	r3, [pc, #140]	; (800542c <_svfiprintf_r+0x1f4>)
 80053a0:	bb1b      	cbnz	r3, 80053ea <_svfiprintf_r+0x1b2>
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	3307      	adds	r3, #7
 80053a6:	f023 0307 	bic.w	r3, r3, #7
 80053aa:	3308      	adds	r3, #8
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	4433      	add	r3, r6
 80053b2:	9309      	str	r3, [sp, #36]	; 0x24
 80053b4:	e767      	b.n	8005286 <_svfiprintf_r+0x4e>
 80053b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ba:	460c      	mov	r4, r1
 80053bc:	2001      	movs	r0, #1
 80053be:	e7a5      	b.n	800530c <_svfiprintf_r+0xd4>
 80053c0:	2300      	movs	r3, #0
 80053c2:	3401      	adds	r4, #1
 80053c4:	9305      	str	r3, [sp, #20]
 80053c6:	4619      	mov	r1, r3
 80053c8:	f04f 0c0a 	mov.w	ip, #10
 80053cc:	4620      	mov	r0, r4
 80053ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d2:	3a30      	subs	r2, #48	; 0x30
 80053d4:	2a09      	cmp	r2, #9
 80053d6:	d903      	bls.n	80053e0 <_svfiprintf_r+0x1a8>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0c5      	beq.n	8005368 <_svfiprintf_r+0x130>
 80053dc:	9105      	str	r1, [sp, #20]
 80053de:	e7c3      	b.n	8005368 <_svfiprintf_r+0x130>
 80053e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e4:	4604      	mov	r4, r0
 80053e6:	2301      	movs	r3, #1
 80053e8:	e7f0      	b.n	80053cc <_svfiprintf_r+0x194>
 80053ea:	ab03      	add	r3, sp, #12
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	462a      	mov	r2, r5
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <_svfiprintf_r+0x1f8>)
 80053f2:	a904      	add	r1, sp, #16
 80053f4:	4638      	mov	r0, r7
 80053f6:	f3af 8000 	nop.w
 80053fa:	1c42      	adds	r2, r0, #1
 80053fc:	4606      	mov	r6, r0
 80053fe:	d1d6      	bne.n	80053ae <_svfiprintf_r+0x176>
 8005400:	89ab      	ldrh	r3, [r5, #12]
 8005402:	065b      	lsls	r3, r3, #25
 8005404:	f53f af2c 	bmi.w	8005260 <_svfiprintf_r+0x28>
 8005408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540a:	b01d      	add	sp, #116	; 0x74
 800540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005410:	ab03      	add	r3, sp, #12
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	462a      	mov	r2, r5
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <_svfiprintf_r+0x1f8>)
 8005418:	a904      	add	r1, sp, #16
 800541a:	4638      	mov	r0, r7
 800541c:	f000 f87a 	bl	8005514 <_printf_i>
 8005420:	e7eb      	b.n	80053fa <_svfiprintf_r+0x1c2>
 8005422:	bf00      	nop
 8005424:	08005b5c 	.word	0x08005b5c
 8005428:	08005b66 	.word	0x08005b66
 800542c:	00000000 	.word	0x00000000
 8005430:	08005181 	.word	0x08005181
 8005434:	08005b62 	.word	0x08005b62

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4616      	mov	r6, r2
 800543e:	4699      	mov	r9, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005448:	4293      	cmp	r3, r2
 800544a:	bfb8      	it	lt
 800544c:	4613      	movlt	r3, r2
 800544e:	6033      	str	r3, [r6, #0]
 8005450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005454:	4607      	mov	r7, r0
 8005456:	460c      	mov	r4, r1
 8005458:	b10a      	cbz	r2, 800545e <_printf_common+0x26>
 800545a:	3301      	adds	r3, #1
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0699      	lsls	r1, r3, #26
 8005462:	bf42      	ittt	mi
 8005464:	6833      	ldrmi	r3, [r6, #0]
 8005466:	3302      	addmi	r3, #2
 8005468:	6033      	strmi	r3, [r6, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d106      	bne.n	8005480 <_printf_common+0x48>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc26      	bgt.n	80054ce <_printf_common+0x96>
 8005480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005484:	1e13      	subs	r3, r2, #0
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	bf18      	it	ne
 800548a:	2301      	movne	r3, #1
 800548c:	0692      	lsls	r2, r2, #26
 800548e:	d42b      	bmi.n	80054e8 <_printf_common+0xb0>
 8005490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005494:	4649      	mov	r1, r9
 8005496:	4638      	mov	r0, r7
 8005498:	47c0      	blx	r8
 800549a:	3001      	adds	r0, #1
 800549c:	d01e      	beq.n	80054dc <_printf_common+0xa4>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	68e5      	ldr	r5, [r4, #12]
 80054a2:	6832      	ldr	r2, [r6, #0]
 80054a4:	f003 0306 	and.w	r3, r3, #6
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	bf08      	it	eq
 80054ac:	1aad      	subeq	r5, r5, r2
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	6922      	ldr	r2, [r4, #16]
 80054b2:	bf0c      	ite	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	2500      	movne	r5, #0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bfc4      	itt	gt
 80054be:	1a9b      	subgt	r3, r3, r2
 80054c0:	18ed      	addgt	r5, r5, r3
 80054c2:	2600      	movs	r6, #0
 80054c4:	341a      	adds	r4, #26
 80054c6:	42b5      	cmp	r5, r6
 80054c8:	d11a      	bne.n	8005500 <_printf_common+0xc8>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e008      	b.n	80054e0 <_printf_common+0xa8>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4652      	mov	r2, sl
 80054d2:	4649      	mov	r1, r9
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c0      	blx	r8
 80054d8:	3001      	adds	r0, #1
 80054da:	d103      	bne.n	80054e4 <_printf_common+0xac>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	3501      	adds	r5, #1
 80054e6:	e7c6      	b.n	8005476 <_printf_common+0x3e>
 80054e8:	18e1      	adds	r1, r4, r3
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	2030      	movs	r0, #48	; 0x30
 80054ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f2:	4422      	add	r2, r4
 80054f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054fc:	3302      	adds	r3, #2
 80054fe:	e7c7      	b.n	8005490 <_printf_common+0x58>
 8005500:	2301      	movs	r3, #1
 8005502:	4622      	mov	r2, r4
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d0e6      	beq.n	80054dc <_printf_common+0xa4>
 800550e:	3601      	adds	r6, #1
 8005510:	e7d9      	b.n	80054c6 <_printf_common+0x8e>
	...

08005514 <_printf_i>:
 8005514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	7e0f      	ldrb	r7, [r1, #24]
 800551a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800551c:	2f78      	cmp	r7, #120	; 0x78
 800551e:	4691      	mov	r9, r2
 8005520:	4680      	mov	r8, r0
 8005522:	460c      	mov	r4, r1
 8005524:	469a      	mov	sl, r3
 8005526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800552a:	d807      	bhi.n	800553c <_printf_i+0x28>
 800552c:	2f62      	cmp	r7, #98	; 0x62
 800552e:	d80a      	bhi.n	8005546 <_printf_i+0x32>
 8005530:	2f00      	cmp	r7, #0
 8005532:	f000 80d8 	beq.w	80056e6 <_printf_i+0x1d2>
 8005536:	2f58      	cmp	r7, #88	; 0x58
 8005538:	f000 80a3 	beq.w	8005682 <_printf_i+0x16e>
 800553c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005544:	e03a      	b.n	80055bc <_printf_i+0xa8>
 8005546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554a:	2b15      	cmp	r3, #21
 800554c:	d8f6      	bhi.n	800553c <_printf_i+0x28>
 800554e:	a101      	add	r1, pc, #4	; (adr r1, 8005554 <_printf_i+0x40>)
 8005550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005554:	080055ad 	.word	0x080055ad
 8005558:	080055c1 	.word	0x080055c1
 800555c:	0800553d 	.word	0x0800553d
 8005560:	0800553d 	.word	0x0800553d
 8005564:	0800553d 	.word	0x0800553d
 8005568:	0800553d 	.word	0x0800553d
 800556c:	080055c1 	.word	0x080055c1
 8005570:	0800553d 	.word	0x0800553d
 8005574:	0800553d 	.word	0x0800553d
 8005578:	0800553d 	.word	0x0800553d
 800557c:	0800553d 	.word	0x0800553d
 8005580:	080056cd 	.word	0x080056cd
 8005584:	080055f1 	.word	0x080055f1
 8005588:	080056af 	.word	0x080056af
 800558c:	0800553d 	.word	0x0800553d
 8005590:	0800553d 	.word	0x0800553d
 8005594:	080056ef 	.word	0x080056ef
 8005598:	0800553d 	.word	0x0800553d
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	0800553d 	.word	0x0800553d
 80055a4:	0800553d 	.word	0x0800553d
 80055a8:	080056b7 	.word	0x080056b7
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	602a      	str	r2, [r5, #0]
 80055b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	e0a3      	b.n	8005708 <_printf_i+0x1f4>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	6829      	ldr	r1, [r5, #0]
 80055c4:	0606      	lsls	r6, r0, #24
 80055c6:	f101 0304 	add.w	r3, r1, #4
 80055ca:	d50a      	bpl.n	80055e2 <_printf_i+0xce>
 80055cc:	680e      	ldr	r6, [r1, #0]
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	2e00      	cmp	r6, #0
 80055d2:	da03      	bge.n	80055dc <_printf_i+0xc8>
 80055d4:	232d      	movs	r3, #45	; 0x2d
 80055d6:	4276      	negs	r6, r6
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	485e      	ldr	r0, [pc, #376]	; (8005758 <_printf_i+0x244>)
 80055de:	230a      	movs	r3, #10
 80055e0:	e019      	b.n	8005616 <_printf_i+0x102>
 80055e2:	680e      	ldr	r6, [r1, #0]
 80055e4:	602b      	str	r3, [r5, #0]
 80055e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ea:	bf18      	it	ne
 80055ec:	b236      	sxthne	r6, r6
 80055ee:	e7ef      	b.n	80055d0 <_printf_i+0xbc>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	1d19      	adds	r1, r3, #4
 80055f6:	6029      	str	r1, [r5, #0]
 80055f8:	0601      	lsls	r1, r0, #24
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0xec>
 80055fc:	681e      	ldr	r6, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0xf2>
 8005600:	0646      	lsls	r6, r0, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0xe8>
 8005604:	881e      	ldrh	r6, [r3, #0]
 8005606:	4854      	ldr	r0, [pc, #336]	; (8005758 <_printf_i+0x244>)
 8005608:	2f6f      	cmp	r7, #111	; 0x6f
 800560a:	bf0c      	ite	eq
 800560c:	2308      	moveq	r3, #8
 800560e:	230a      	movne	r3, #10
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005616:	6865      	ldr	r5, [r4, #4]
 8005618:	60a5      	str	r5, [r4, #8]
 800561a:	2d00      	cmp	r5, #0
 800561c:	bfa2      	ittt	ge
 800561e:	6821      	ldrge	r1, [r4, #0]
 8005620:	f021 0104 	bicge.w	r1, r1, #4
 8005624:	6021      	strge	r1, [r4, #0]
 8005626:	b90e      	cbnz	r6, 800562c <_printf_i+0x118>
 8005628:	2d00      	cmp	r5, #0
 800562a:	d04d      	beq.n	80056c8 <_printf_i+0x1b4>
 800562c:	4615      	mov	r5, r2
 800562e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005632:	fb03 6711 	mls	r7, r3, r1, r6
 8005636:	5dc7      	ldrb	r7, [r0, r7]
 8005638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800563c:	4637      	mov	r7, r6
 800563e:	42bb      	cmp	r3, r7
 8005640:	460e      	mov	r6, r1
 8005642:	d9f4      	bls.n	800562e <_printf_i+0x11a>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10b      	bne.n	8005660 <_printf_i+0x14c>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07de      	lsls	r6, r3, #31
 800564c:	d508      	bpl.n	8005660 <_printf_i+0x14c>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	6861      	ldr	r1, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	bfde      	ittt	le
 8005656:	2330      	movle	r3, #48	; 0x30
 8005658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800565c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005660:	1b52      	subs	r2, r2, r5
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	f8cd a000 	str.w	sl, [sp]
 8005668:	464b      	mov	r3, r9
 800566a:	aa03      	add	r2, sp, #12
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fee2 	bl	8005438 <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	d14c      	bne.n	8005712 <_printf_i+0x1fe>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b004      	add	sp, #16
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	4835      	ldr	r0, [pc, #212]	; (8005758 <_printf_i+0x244>)
 8005684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005688:	6829      	ldr	r1, [r5, #0]
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005690:	6029      	str	r1, [r5, #0]
 8005692:	061d      	lsls	r5, r3, #24
 8005694:	d514      	bpl.n	80056c0 <_printf_i+0x1ac>
 8005696:	07df      	lsls	r7, r3, #31
 8005698:	bf44      	itt	mi
 800569a:	f043 0320 	orrmi.w	r3, r3, #32
 800569e:	6023      	strmi	r3, [r4, #0]
 80056a0:	b91e      	cbnz	r6, 80056aa <_printf_i+0x196>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f023 0320 	bic.w	r3, r3, #32
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2310      	movs	r3, #16
 80056ac:	e7b0      	b.n	8005610 <_printf_i+0xfc>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f043 0320 	orr.w	r3, r3, #32
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	2378      	movs	r3, #120	; 0x78
 80056b8:	4828      	ldr	r0, [pc, #160]	; (800575c <_printf_i+0x248>)
 80056ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056be:	e7e3      	b.n	8005688 <_printf_i+0x174>
 80056c0:	0659      	lsls	r1, r3, #25
 80056c2:	bf48      	it	mi
 80056c4:	b2b6      	uxthmi	r6, r6
 80056c6:	e7e6      	b.n	8005696 <_printf_i+0x182>
 80056c8:	4615      	mov	r5, r2
 80056ca:	e7bb      	b.n	8005644 <_printf_i+0x130>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	6826      	ldr	r6, [r4, #0]
 80056d0:	6961      	ldr	r1, [r4, #20]
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	6028      	str	r0, [r5, #0]
 80056d6:	0635      	lsls	r5, r6, #24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x1cc>
 80056dc:	6019      	str	r1, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x1d2>
 80056e0:	0670      	lsls	r0, r6, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x1c8>
 80056e4:	8019      	strh	r1, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	4615      	mov	r5, r2
 80056ec:	e7ba      	b.n	8005664 <_printf_i+0x150>
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	602a      	str	r2, [r5, #0]
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4628      	mov	r0, r5
 80056fc:	f7fa fd70 	bl	80001e0 <memchr>
 8005700:	b108      	cbz	r0, 8005706 <_printf_i+0x1f2>
 8005702:	1b40      	subs	r0, r0, r5
 8005704:	6060      	str	r0, [r4, #4]
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	2300      	movs	r3, #0
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005710:	e7a8      	b.n	8005664 <_printf_i+0x150>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	462a      	mov	r2, r5
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d0ab      	beq.n	8005678 <_printf_i+0x164>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	079b      	lsls	r3, r3, #30
 8005724:	d413      	bmi.n	800574e <_printf_i+0x23a>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e7a4      	b.n	800567c <_printf_i+0x168>
 8005732:	2301      	movs	r3, #1
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d09b      	beq.n	8005678 <_printf_i+0x164>
 8005740:	3501      	adds	r5, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	42ab      	cmp	r3, r5
 800574a:	dcf2      	bgt.n	8005732 <_printf_i+0x21e>
 800574c:	e7eb      	b.n	8005726 <_printf_i+0x212>
 800574e:	2500      	movs	r5, #0
 8005750:	f104 0619 	add.w	r6, r4, #25
 8005754:	e7f5      	b.n	8005742 <_printf_i+0x22e>
 8005756:	bf00      	nop
 8005758:	08005b6d 	.word	0x08005b6d
 800575c:	08005b7e 	.word	0x08005b7e

08005760 <memcpy>:
 8005760:	440a      	add	r2, r1
 8005762:	4291      	cmp	r1, r2
 8005764:	f100 33ff 	add.w	r3, r0, #4294967295
 8005768:	d100      	bne.n	800576c <memcpy+0xc>
 800576a:	4770      	bx	lr
 800576c:	b510      	push	{r4, lr}
 800576e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005776:	4291      	cmp	r1, r2
 8005778:	d1f9      	bne.n	800576e <memcpy+0xe>
 800577a:	bd10      	pop	{r4, pc}

0800577c <memmove>:
 800577c:	4288      	cmp	r0, r1
 800577e:	b510      	push	{r4, lr}
 8005780:	eb01 0402 	add.w	r4, r1, r2
 8005784:	d902      	bls.n	800578c <memmove+0x10>
 8005786:	4284      	cmp	r4, r0
 8005788:	4623      	mov	r3, r4
 800578a:	d807      	bhi.n	800579c <memmove+0x20>
 800578c:	1e43      	subs	r3, r0, #1
 800578e:	42a1      	cmp	r1, r4
 8005790:	d008      	beq.n	80057a4 <memmove+0x28>
 8005792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800579a:	e7f8      	b.n	800578e <memmove+0x12>
 800579c:	4402      	add	r2, r0
 800579e:	4601      	mov	r1, r0
 80057a0:	428a      	cmp	r2, r1
 80057a2:	d100      	bne.n	80057a6 <memmove+0x2a>
 80057a4:	bd10      	pop	{r4, pc}
 80057a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ae:	e7f7      	b.n	80057a0 <memmove+0x24>

080057b0 <_free_r>:
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d044      	beq.n	8005840 <_free_r+0x90>
 80057b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ba:	9001      	str	r0, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f1a1 0404 	sub.w	r4, r1, #4
 80057c2:	bfb8      	it	lt
 80057c4:	18e4      	addlt	r4, r4, r3
 80057c6:	f000 f913 	bl	80059f0 <__malloc_lock>
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <_free_r+0x94>)
 80057cc:	9801      	ldr	r0, [sp, #4]
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	b933      	cbnz	r3, 80057e0 <_free_r+0x30>
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	6014      	str	r4, [r2, #0]
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	f000 b90e 	b.w	80059fc <__malloc_unlock>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d908      	bls.n	80057f6 <_free_r+0x46>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf01      	itttt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	e7ed      	b.n	80057d2 <_free_r+0x22>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x50>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x46>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1855      	adds	r5, r2, r1
 8005804:	42a5      	cmp	r5, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x70>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	4421      	add	r1, r4
 800580c:	1854      	adds	r4, r2, r1
 800580e:	42a3      	cmp	r3, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1e0      	bne.n	80057d6 <_free_r+0x26>
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	4421      	add	r1, r4
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	e7da      	b.n	80057d6 <_free_r+0x26>
 8005820:	d902      	bls.n	8005828 <_free_r+0x78>
 8005822:	230c      	movs	r3, #12
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	e7d6      	b.n	80057d6 <_free_r+0x26>
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1961      	adds	r1, r4, r5
 800582c:	428b      	cmp	r3, r1
 800582e:	bf04      	itt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	bf04      	itt	eq
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	6054      	str	r4, [r2, #4]
 800583e:	e7ca      	b.n	80057d6 <_free_r+0x26>
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	20000214 	.word	0x20000214

08005848 <sbrk_aligned>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4e0e      	ldr	r6, [pc, #56]	; (8005884 <sbrk_aligned+0x3c>)
 800584c:	460c      	mov	r4, r1
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	4605      	mov	r5, r0
 8005852:	b911      	cbnz	r1, 800585a <sbrk_aligned+0x12>
 8005854:	f000 f8bc 	bl	80059d0 <_sbrk_r>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f8b7 	bl	80059d0 <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <sbrk_aligned+0x34>
 8005866:	1cc4      	adds	r4, r0, #3
 8005868:	f024 0403 	bic.w	r4, r4, #3
 800586c:	42a0      	cmp	r0, r4
 800586e:	d007      	beq.n	8005880 <sbrk_aligned+0x38>
 8005870:	1a21      	subs	r1, r4, r0
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f8ac 	bl	80059d0 <_sbrk_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d101      	bne.n	8005880 <sbrk_aligned+0x38>
 800587c:	f04f 34ff 	mov.w	r4, #4294967295
 8005880:	4620      	mov	r0, r4
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	20000218 	.word	0x20000218

08005888 <_malloc_r>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	1ccd      	adds	r5, r1, #3
 800588e:	f025 0503 	bic.w	r5, r5, #3
 8005892:	3508      	adds	r5, #8
 8005894:	2d0c      	cmp	r5, #12
 8005896:	bf38      	it	cc
 8005898:	250c      	movcc	r5, #12
 800589a:	2d00      	cmp	r5, #0
 800589c:	4607      	mov	r7, r0
 800589e:	db01      	blt.n	80058a4 <_malloc_r+0x1c>
 80058a0:	42a9      	cmp	r1, r5
 80058a2:	d905      	bls.n	80058b0 <_malloc_r+0x28>
 80058a4:	230c      	movs	r3, #12
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	2600      	movs	r6, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b0:	4e2e      	ldr	r6, [pc, #184]	; (800596c <_malloc_r+0xe4>)
 80058b2:	f000 f89d 	bl	80059f0 <__malloc_lock>
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	461c      	mov	r4, r3
 80058ba:	bb34      	cbnz	r4, 800590a <_malloc_r+0x82>
 80058bc:	4629      	mov	r1, r5
 80058be:	4638      	mov	r0, r7
 80058c0:	f7ff ffc2 	bl	8005848 <sbrk_aligned>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	d14d      	bne.n	8005966 <_malloc_r+0xde>
 80058ca:	6834      	ldr	r4, [r6, #0]
 80058cc:	4626      	mov	r6, r4
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d140      	bne.n	8005954 <_malloc_r+0xcc>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4631      	mov	r1, r6
 80058d6:	4638      	mov	r0, r7
 80058d8:	eb04 0803 	add.w	r8, r4, r3
 80058dc:	f000 f878 	bl	80059d0 <_sbrk_r>
 80058e0:	4580      	cmp	r8, r0
 80058e2:	d13a      	bne.n	800595a <_malloc_r+0xd2>
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	3503      	adds	r5, #3
 80058e8:	1a6d      	subs	r5, r5, r1
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	4629      	mov	r1, r5
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7ff ffa5 	bl	8005848 <sbrk_aligned>
 80058fe:	3001      	adds	r0, #1
 8005900:	d02b      	beq.n	800595a <_malloc_r+0xd2>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	442b      	add	r3, r5
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	e00e      	b.n	8005928 <_malloc_r+0xa0>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	1b52      	subs	r2, r2, r5
 800590e:	d41e      	bmi.n	800594e <_malloc_r+0xc6>
 8005910:	2a0b      	cmp	r2, #11
 8005912:	d916      	bls.n	8005942 <_malloc_r+0xba>
 8005914:	1961      	adds	r1, r4, r5
 8005916:	42a3      	cmp	r3, r4
 8005918:	6025      	str	r5, [r4, #0]
 800591a:	bf18      	it	ne
 800591c:	6059      	strne	r1, [r3, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	bf08      	it	eq
 8005922:	6031      	streq	r1, [r6, #0]
 8005924:	5162      	str	r2, [r4, r5]
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	4638      	mov	r0, r7
 800592a:	f104 060b 	add.w	r6, r4, #11
 800592e:	f000 f865 	bl	80059fc <__malloc_unlock>
 8005932:	f026 0607 	bic.w	r6, r6, #7
 8005936:	1d23      	adds	r3, r4, #4
 8005938:	1af2      	subs	r2, r6, r3
 800593a:	d0b6      	beq.n	80058aa <_malloc_r+0x22>
 800593c:	1b9b      	subs	r3, r3, r6
 800593e:	50a3      	str	r3, [r4, r2]
 8005940:	e7b3      	b.n	80058aa <_malloc_r+0x22>
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	bf0c      	ite	eq
 8005948:	6032      	streq	r2, [r6, #0]
 800594a:	605a      	strne	r2, [r3, #4]
 800594c:	e7ec      	b.n	8005928 <_malloc_r+0xa0>
 800594e:	4623      	mov	r3, r4
 8005950:	6864      	ldr	r4, [r4, #4]
 8005952:	e7b2      	b.n	80058ba <_malloc_r+0x32>
 8005954:	4634      	mov	r4, r6
 8005956:	6876      	ldr	r6, [r6, #4]
 8005958:	e7b9      	b.n	80058ce <_malloc_r+0x46>
 800595a:	230c      	movs	r3, #12
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4638      	mov	r0, r7
 8005960:	f000 f84c 	bl	80059fc <__malloc_unlock>
 8005964:	e7a1      	b.n	80058aa <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7de      	b.n	8005928 <_malloc_r+0xa0>
 800596a:	bf00      	nop
 800596c:	20000214 	.word	0x20000214

08005970 <_realloc_r>:
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	4680      	mov	r8, r0
 8005976:	4614      	mov	r4, r2
 8005978:	460e      	mov	r6, r1
 800597a:	b921      	cbnz	r1, 8005986 <_realloc_r+0x16>
 800597c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005980:	4611      	mov	r1, r2
 8005982:	f7ff bf81 	b.w	8005888 <_malloc_r>
 8005986:	b92a      	cbnz	r2, 8005994 <_realloc_r+0x24>
 8005988:	f7ff ff12 	bl	80057b0 <_free_r>
 800598c:	4625      	mov	r5, r4
 800598e:	4628      	mov	r0, r5
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005994:	f000 f838 	bl	8005a08 <_malloc_usable_size_r>
 8005998:	4284      	cmp	r4, r0
 800599a:	4607      	mov	r7, r0
 800599c:	d802      	bhi.n	80059a4 <_realloc_r+0x34>
 800599e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059a2:	d812      	bhi.n	80059ca <_realloc_r+0x5a>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4640      	mov	r0, r8
 80059a8:	f7ff ff6e 	bl	8005888 <_malloc_r>
 80059ac:	4605      	mov	r5, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d0ed      	beq.n	800598e <_realloc_r+0x1e>
 80059b2:	42bc      	cmp	r4, r7
 80059b4:	4622      	mov	r2, r4
 80059b6:	4631      	mov	r1, r6
 80059b8:	bf28      	it	cs
 80059ba:	463a      	movcs	r2, r7
 80059bc:	f7ff fed0 	bl	8005760 <memcpy>
 80059c0:	4631      	mov	r1, r6
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7ff fef4 	bl	80057b0 <_free_r>
 80059c8:	e7e1      	b.n	800598e <_realloc_r+0x1e>
 80059ca:	4635      	mov	r5, r6
 80059cc:	e7df      	b.n	800598e <_realloc_r+0x1e>
	...

080059d0 <_sbrk_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_sbrk_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb ff6e 	bl	80018bc <_sbrk>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_sbrk_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_sbrk_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	2000021c 	.word	0x2000021c

080059f0 <__malloc_lock>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__malloc_lock+0x8>)
 80059f2:	f000 b811 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000220 	.word	0x20000220

080059fc <__malloc_unlock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__malloc_unlock+0x8>)
 80059fe:	f000 b80c 	b.w	8005a1a <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000220 	.word	0x20000220

08005a08 <_malloc_usable_size_r>:
 8005a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a0c:	1f18      	subs	r0, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bfbc      	itt	lt
 8005a12:	580b      	ldrlt	r3, [r1, r0]
 8005a14:	18c0      	addlt	r0, r0, r3
 8005a16:	4770      	bx	lr

08005a18 <__retarget_lock_acquire_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_release_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <_init>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr

08005a28 <_fini>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr
