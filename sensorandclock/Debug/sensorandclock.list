
sensorandclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000588c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b54  08005b54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000074  08005bd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08005bd0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013744  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002222  00000000  00000000  000337e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00035a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00036b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231c6  00000000  00000000  00037c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001440f  00000000  00000000  0005adde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8784  00000000  00000000  0006f1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f84  00000000  00000000  001479c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a04 	.word	0x08005a04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005a04 	.word	0x08005a04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b974 	b.w	8000bec <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468e      	mov	lr, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14d      	bne.n	80009c6 <__udivmoddi4+0xaa>
 800092a:	428a      	cmp	r2, r1
 800092c:	4694      	mov	ip, r2
 800092e:	d969      	bls.n	8000a04 <__udivmoddi4+0xe8>
 8000930:	fab2 f282 	clz	r2, r2
 8000934:	b152      	cbz	r2, 800094c <__udivmoddi4+0x30>
 8000936:	fa01 f302 	lsl.w	r3, r1, r2
 800093a:	f1c2 0120 	rsb	r1, r2, #32
 800093e:	fa20 f101 	lsr.w	r1, r0, r1
 8000942:	fa0c fc02 	lsl.w	ip, ip, r2
 8000946:	ea41 0e03 	orr.w	lr, r1, r3
 800094a:	4094      	lsls	r4, r2
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	0c21      	lsrs	r1, r4, #16
 8000952:	fbbe f6f8 	udiv	r6, lr, r8
 8000956:	fa1f f78c 	uxth.w	r7, ip
 800095a:	fb08 e316 	mls	r3, r8, r6, lr
 800095e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000962:	fb06 f107 	mul.w	r1, r6, r7
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000972:	f080 811f 	bcs.w	8000bb4 <__udivmoddi4+0x298>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 811c 	bls.w	8000bb4 <__udivmoddi4+0x298>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a5b      	subs	r3, r3, r1
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb3 f0f8 	udiv	r0, r3, r8
 8000988:	fb08 3310 	mls	r3, r8, r0, r3
 800098c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000990:	fb00 f707 	mul.w	r7, r0, r7
 8000994:	42a7      	cmp	r7, r4
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x92>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	f080 810a 	bcs.w	8000bb8 <__udivmoddi4+0x29c>
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	f240 8107 	bls.w	8000bb8 <__udivmoddi4+0x29c>
 80009aa:	4464      	add	r4, ip
 80009ac:	3802      	subs	r0, #2
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	1be4      	subs	r4, r4, r7
 80009b4:	2600      	movs	r6, #0
 80009b6:	b11d      	cbz	r5, 80009c0 <__udivmoddi4+0xa4>
 80009b8:	40d4      	lsrs	r4, r2
 80009ba:	2300      	movs	r3, #0
 80009bc:	e9c5 4300 	strd	r4, r3, [r5]
 80009c0:	4631      	mov	r1, r6
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0xc2>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	f000 80ef 	beq.w	8000bae <__udivmoddi4+0x292>
 80009d0:	2600      	movs	r6, #0
 80009d2:	e9c5 0100 	strd	r0, r1, [r5]
 80009d6:	4630      	mov	r0, r6
 80009d8:	4631      	mov	r1, r6
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	fab3 f683 	clz	r6, r3
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d14a      	bne.n	8000a7c <__udivmoddi4+0x160>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d302      	bcc.n	80009f0 <__udivmoddi4+0xd4>
 80009ea:	4282      	cmp	r2, r0
 80009ec:	f200 80f9 	bhi.w	8000be2 <__udivmoddi4+0x2c6>
 80009f0:	1a84      	subs	r4, r0, r2
 80009f2:	eb61 0303 	sbc.w	r3, r1, r3
 80009f6:	2001      	movs	r0, #1
 80009f8:	469e      	mov	lr, r3
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d0e0      	beq.n	80009c0 <__udivmoddi4+0xa4>
 80009fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a02:	e7dd      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000a04:	b902      	cbnz	r2, 8000a08 <__udivmoddi4+0xec>
 8000a06:	deff      	udf	#255	; 0xff
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 8092 	bne.w	8000b36 <__udivmoddi4+0x21a>
 8000a12:	eba1 010c 	sub.w	r1, r1, ip
 8000a16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1a:	fa1f fe8c 	uxth.w	lr, ip
 8000a1e:	2601      	movs	r6, #1
 8000a20:	0c20      	lsrs	r0, r4, #16
 8000a22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a26:	fb07 1113 	mls	r1, r7, r3, r1
 8000a2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a2e:	fb0e f003 	mul.w	r0, lr, r3
 8000a32:	4288      	cmp	r0, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x12c>
 8000a36:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x12a>
 8000a40:	4288      	cmp	r0, r1
 8000a42:	f200 80cb 	bhi.w	8000bdc <__udivmoddi4+0x2c0>
 8000a46:	4643      	mov	r3, r8
 8000a48:	1a09      	subs	r1, r1, r0
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a50:	fb07 1110 	mls	r1, r7, r0, r1
 8000a54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a58:	fb0e fe00 	mul.w	lr, lr, r0
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x156>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x154>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	f200 80bb 	bhi.w	8000be6 <__udivmoddi4+0x2ca>
 8000a70:	4608      	mov	r0, r1
 8000a72:	eba4 040e 	sub.w	r4, r4, lr
 8000a76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a7a:	e79c      	b.n	80009b6 <__udivmoddi4+0x9a>
 8000a7c:	f1c6 0720 	rsb	r7, r6, #32
 8000a80:	40b3      	lsls	r3, r6
 8000a82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a92:	431c      	orrs	r4, r3
 8000a94:	40f9      	lsrs	r1, r7
 8000a96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aa2:	0c20      	lsrs	r0, r4, #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b8>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ac4:	f080 8088 	bcs.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f240 8085 	bls.w	8000bd8 <__udivmoddi4+0x2bc>
 8000ace:	f1a8 0802 	sub.w	r8, r8, #2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000adc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	458e      	cmp	lr, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1e2>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000af4:	d26c      	bcs.n	8000bd0 <__udivmoddi4+0x2b4>
 8000af6:	458e      	cmp	lr, r1
 8000af8:	d96a      	bls.n	8000bd0 <__udivmoddi4+0x2b4>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b02:	fba0 9402 	umull	r9, r4, r0, r2
 8000b06:	eba1 010e 	sub.w	r1, r1, lr
 8000b0a:	42a1      	cmp	r1, r4
 8000b0c:	46c8      	mov	r8, r9
 8000b0e:	46a6      	mov	lr, r4
 8000b10:	d356      	bcc.n	8000bc0 <__udivmoddi4+0x2a4>
 8000b12:	d053      	beq.n	8000bbc <__udivmoddi4+0x2a0>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x212>
 8000b16:	ebb3 0208 	subs.w	r2, r3, r8
 8000b1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b22:	fa22 f306 	lsr.w	r3, r2, r6
 8000b26:	40f1      	lsrs	r1, r6
 8000b28:	431f      	orrs	r7, r3
 8000b2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b40:	fa21 f303 	lsr.w	r3, r1, r3
 8000b44:	4091      	lsls	r1, r2
 8000b46:	4301      	orrs	r1, r0
 8000b48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4c:	fa1f fe8c 	uxth.w	lr, ip
 8000b50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b54:	fb07 3610 	mls	r6, r7, r0, r3
 8000b58:	0c0b      	lsrs	r3, r1, #16
 8000b5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b62:	429e      	cmp	r6, r3
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x260>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b72:	d22f      	bcs.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b74:	429e      	cmp	r6, r3
 8000b76:	d92d      	bls.n	8000bd4 <__udivmoddi4+0x2b8>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	b289      	uxth	r1, r1
 8000b80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b84:	fb07 3316 	mls	r3, r7, r6, r3
 8000b88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d908      	bls.n	8000ba6 <__udivmoddi4+0x28a>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b9c:	d216      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d914      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000ba2:	3e02      	subs	r6, #2
 8000ba4:	4461      	add	r1, ip
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bac:	e738      	b.n	8000a20 <__udivmoddi4+0x104>
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e705      	b.n	80009c0 <__udivmoddi4+0xa4>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e3      	b.n	8000980 <__udivmoddi4+0x64>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6f8      	b.n	80009ae <__udivmoddi4+0x92>
 8000bbc:	454b      	cmp	r3, r9
 8000bbe:	d2a9      	bcs.n	8000b14 <__udivmoddi4+0x1f8>
 8000bc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7a3      	b.n	8000b14 <__udivmoddi4+0x1f8>
 8000bcc:	4646      	mov	r6, r8
 8000bce:	e7ea      	b.n	8000ba6 <__udivmoddi4+0x28a>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	e794      	b.n	8000afe <__udivmoddi4+0x1e2>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	e7d1      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bd8:	46d0      	mov	r8, sl
 8000bda:	e77b      	b.n	8000ad4 <__udivmoddi4+0x1b8>
 8000bdc:	3b02      	subs	r3, #2
 8000bde:	4461      	add	r1, ip
 8000be0:	e732      	b.n	8000a48 <__udivmoddi4+0x12c>
 8000be2:	4630      	mov	r0, r6
 8000be4:	e709      	b.n	80009fa <__udivmoddi4+0xde>
 8000be6:	4464      	add	r4, ip
 8000be8:	3802      	subs	r0, #2
 8000bea:	e742      	b.n	8000a72 <__udivmoddi4+0x156>

08000bec <__aeabi_idiv0>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <printer>:
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);


void printer(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	; 0x40
 8000bf4:	af02      	add	r7, sp, #8
	char buffer[50];
	sprintf(buffer, "\rWork Mode:                 %02lu:%02lu:%02lu", hours, minutes, seconds);
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <printer+0x44>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <printer+0x48>)
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <printer+0x4c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1d38      	adds	r0, r7, #4
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	460b      	mov	r3, r1
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <printer+0x50>)
 8000c0a:	f004 fa8d 	bl	8005128 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fadd 	bl	80001d0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	1d39      	adds	r1, r7, #4
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <printer+0x54>)
 8000c22:	f003 fdb1 	bl	8004788 <HAL_UART_Transmit>
	adjustButtonPressed = false;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <printer+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200001c0 	.word	0x200001c0
 8000c38:	200001bc 	.word	0x200001bc
 8000c3c:	200001b8 	.word	0x200001b8
 8000c40:	08005a1c 	.word	0x08005a1c
 8000c44:	200000dc 	.word	0x200000dc
 8000c48:	200001cc 	.word	0x200001cc

08000c4c <AdjustmentPrinter>:

void AdjustmentPrinter(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
	char buffer[50];
	sprintf(buffer, "\rAdjustment Mode:           %02lu:%02lu:00", hours, minutes);
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <AdjustmentPrinter+0x38>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <AdjustmentPrinter+0x3c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1d38      	adds	r0, r7, #4
 8000c5c:	490b      	ldr	r1, [pc, #44]	; (8000c8c <AdjustmentPrinter+0x40>)
 8000c5e:	f004 fa63 	bl	8005128 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fab3 	bl	80001d0 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	1d39      	adds	r1, r7, #4
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <AdjustmentPrinter+0x44>)
 8000c76:	f003 fd87 	bl	8004788 <HAL_UART_Transmit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001c0 	.word	0x200001c0
 8000c88:	200001bc 	.word	0x200001bc
 8000c8c:	08005a4c 	.word	0x08005a4c
 8000c90:	200000dc 	.word	0x200000dc

08000c94 <NOTAdjustedPrinter>:

void NOTAdjustedPrinter(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0
	char buffer[50];
	sprintf(buffer, "\rAdjustment Mode:           %02lu:%02lu:00", hours, minutes);
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <NOTAdjustedPrinter+0x3c>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <NOTAdjustedPrinter+0x40>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1d38      	adds	r0, r7, #4
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <NOTAdjustedPrinter+0x44>)
 8000ca6:	f004 fa3f 	bl	8005128 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa8f 	bl	80001d0 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	1d39      	adds	r1, r7, #4
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <NOTAdjustedPrinter+0x48>)
 8000cbe:	f003 fd63 	bl	8004788 <HAL_UART_Transmit>
	adjustButtonPressed = false;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <NOTAdjustedPrinter+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	3738      	adds	r7, #56	; 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001c0 	.word	0x200001c0
 8000cd4:	200001bc 	.word	0x200001bc
 8000cd8:	08005a4c 	.word	0x08005a4c
 8000cdc:	200000dc 	.word	0x200000dc
 8000ce0:	200001cc 	.word	0x200001cc

08000ce4 <AdjustHour>:

//------------------------------------------------------ADJUST HOUR & MINUTE---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//
void AdjustHour(uint32_t *hours, uint16_t GPIO_Pin) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]


	if (GPIO_Pin == GPIO_PIN_7) {
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	2b80      	cmp	r3, #128	; 0x80
 8000cf4:	d111      	bne.n	8000d1a <AdjustHour+0x36>
		(*hours)++;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
		if (*hours >= 24) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b17      	cmp	r3, #23
 8000d06:	d902      	bls.n	8000d0e <AdjustHour+0x2a>
			*hours = 0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		}
		AdjustmentPrinter();
 8000d0e:	f7ff ff9d 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <AdjustHour+0x68>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	}
}
 8000d18:	e014      	b.n	8000d44 <AdjustHour+0x60>
	} else if (GPIO_Pin == GPIO_PIN_8) {
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d20:	d110      	bne.n	8000d44 <AdjustHour+0x60>
		(*hours)--;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
		if (*hours == 0) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <AdjustHour+0x56>
			*hours = 23;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2217      	movs	r2, #23
 8000d38:	601a      	str	r2, [r3, #0]
		AdjustmentPrinter();
 8000d3a:	f7ff ff87 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <AdjustHour+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001cc 	.word	0x200001cc

08000d50 <AdjustMinute>:

void AdjustMinute(uint32_t *minutes, uint16_t GPIO_Pin) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]

	if (GPIO_Pin == GPIO_PIN_7) {
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	2b80      	cmp	r3, #128	; 0x80
 8000d60:	d111      	bne.n	8000d86 <AdjustMinute+0x36>
		(*minutes)++;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	601a      	str	r2, [r3, #0]
		if (*minutes >= 60) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b3b      	cmp	r3, #59	; 0x3b
 8000d72:	d902      	bls.n	8000d7a <AdjustMinute+0x2a>
			*minutes = 0;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		}
		AdjustmentPrinter();
 8000d7a:	f7ff ff67 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <AdjustMinute+0x6c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	}
}
 8000d84:	e015      	b.n	8000db2 <AdjustMinute+0x62>
	} else if (GPIO_Pin == GPIO_PIN_8) {
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d8c:	d111      	bne.n	8000db2 <AdjustMinute+0x62>
		if (*minutes == 0) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <AdjustMinute+0x4e>
			*minutes = 59;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	223b      	movs	r2, #59	; 0x3b
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e004      	b.n	8000da8 <AdjustMinute+0x58>
			(*minutes)--;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1e5a      	subs	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
		AdjustmentPrinter();
 8000da8:	f7ff ff50 	bl	8000c4c <AdjustmentPrinter>
		adjustButtonPressed = false;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <AdjustMinute+0x6c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001cc 	.word	0x200001cc

08000dc0 <HAL_GPIO_EXTI_Callback>:
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTimestamp = HAL_GetTick();
 8000dca:	f000 fe71 	bl	8001ab0 <HAL_GetTick>
 8000dce:	60f8      	str	r0, [r7, #12]
	// Add the variables to keep track of modes and set button press count
	static bool isInHourAdjustmentMode = false;
	static bool isInMinuteAdjustmentMode = false;
	static int setButtonPressCount = 0;

	if (GPIO_Pin == set_Pin)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dd6:	d164      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0xe2>
	{



		if (currentTimestamp - lastButtonPressTime < DEBOUNCE_DELAY_MS)
 8000dd8:	4b73      	ldr	r3, [pc, #460]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2bc7      	cmp	r3, #199	; 0xc7
 8000de2:	f240 80d6 	bls.w	8000f92 <HAL_GPIO_EXTI_Callback+0x1d2>
			// Ignore this button press (debounce)
			return;
		}

		// Update the last button press timestamp
		lastButtonPressTime = currentTimestamp;
 8000de6:	4a70      	ldr	r2, [pc, #448]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6013      	str	r3, [r2, #0]

		setButtonPressCount++;
 8000dec:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a6e      	ldr	r2, [pc, #440]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000df4:	6013      	str	r3, [r2, #0]


		// If the "set" button is pressed once, switch to hour adjustment mode
		if (isInDefaultMode && setButtonPressCount == 1 )
 8000df6:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d014      	beq.n	8000e28 <HAL_GPIO_EXTI_Callback+0x68>
 8000dfe:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d110      	bne.n	8000e28 <HAL_GPIO_EXTI_Callback+0x68>
		{



			isInDefaultMode = false;
 8000e06:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
			isInHourAdjustmentMode = true;
 8000e0c:	4b69      	ldr	r3, [pc, #420]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
			setButtonPressCount = 0;
 8000e12:	4b66      	ldr	r3, [pc, #408]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\rHour Adjustment Mode", 23, HAL_MAX_DELAY);
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	2217      	movs	r2, #23
 8000e1e:	4966      	ldr	r1, [pc, #408]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e20:	4866      	ldr	r0, [pc, #408]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e22:	f003 fcb1 	bl	8004788 <HAL_UART_Transmit>
 8000e26:	e0bb      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		// If the "set" button is pressed once, switch to minute adjustment mode
		else if (isInHourAdjustmentMode && setButtonPressCount == 1)
 8000e28:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_EXTI_Callback+0xa0>
 8000e30:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d113      	bne.n	8000e60 <HAL_GPIO_EXTI_Callback+0xa0>
		{


			isInDefaultMode = false;
 8000e38:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
			isInHourAdjustmentMode = false;
 8000e3e:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			isInMinuteAdjustmentMode = true;
 8000e44:	4b5e      	ldr	r3, [pc, #376]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x200>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
			setButtonPressCount = 0;
 8000e4a:	4b58      	ldr	r3, [pc, #352]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\rMinute Adjustment Mode", 23, HAL_MAX_DELAY);
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	2217      	movs	r2, #23
 8000e56:	495b      	ldr	r1, [pc, #364]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x204>)
 8000e58:	4858      	ldr	r0, [pc, #352]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e5a:	f003 fc95 	bl	8004788 <HAL_UART_Transmit>
 8000e5e:	e09f      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		// If the "set" button is pressed once, switch back to default mode
		else if (isInMinuteAdjustmentMode && setButtonPressCount == 1)
 8000e60:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x200>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 809b 	beq.w	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
 8000e6a:	4b50      	ldr	r3, [pc, #320]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	f040 8096 	bne.w	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		{
			seconds = 0;
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x208>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]

			isInMinuteAdjustmentMode = false;
 8000e7a:	4b51      	ldr	r3, [pc, #324]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x200>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			isInDefaultMode = true;
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
			setButtonPressCount = 0;
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\rWorking Mode", 13, HAL_MAX_DELAY);
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	220d      	movs	r2, #13
 8000e92:	494e      	ldr	r1, [pc, #312]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x20c>)
 8000e94:	4849      	ldr	r0, [pc, #292]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e96:	f003 fc77 	bl	8004788 <HAL_UART_Transmit>
			adjustButtonPressed = false;
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x210>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e07e      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		}


	}
	else if ((GPIO_Pin == increase_Pin || GPIO_Pin == decrease_Pin) && isInHourAdjustmentMode)
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea8:	d002      	beq.n	8000eb0 <HAL_GPIO_EXTI_Callback+0xf0>
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	2b80      	cmp	r3, #128	; 0x80
 8000eae:	d134      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x15a>
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d030      	beq.n	8000f1a <HAL_GPIO_EXTI_Callback+0x15a>
	{
		if (currentTimestamp - lastAdjustButtonPressTime < DEBOUNCE_DELAY_MS_ADJUST)
 8000eb8:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b95      	cmp	r3, #149	; 0x95
 8000ec2:	d968      	bls.n	8000f96 <HAL_GPIO_EXTI_Callback+0x1d6>

			// Ignore this button press (debounce)
			return;
		}

		lastAdjustButtonPressTime = currentTimestamp;
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6013      	str	r3, [r2, #0]
		// Handle the increase and decrease buttons for hour adjustment
		if (GPIO_Pin == increase_Pin)
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed0:	d110      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x134>
		{
			lastButtonPressTime = HAL_GetTick();
 8000ed2:	f000 fded 	bl	8001ab0 <HAL_GetTick>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000eda:	6013      	str	r3, [r2, #0]
			isInDefaultMode = false;
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
			adjustButtonPressed = true;
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x210>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
			// Adjust the hour
			AdjustHour(&hours, increase_Pin);
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	483a      	ldr	r0, [pc, #232]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x218>)
 8000eee:	f7ff fef9 	bl	8000ce4 <AdjustHour>
		if (GPIO_Pin == increase_Pin)
 8000ef2:	e052      	b.n	8000f9a <HAL_GPIO_EXTI_Callback+0x1da>
		}
		else if (GPIO_Pin == decrease_Pin)
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b80      	cmp	r3, #128	; 0x80
 8000ef8:	d14f      	bne.n	8000f9a <HAL_GPIO_EXTI_Callback+0x1da>
		{
			lastButtonPressTime = HAL_GetTick();
 8000efa:	f000 fdd9 	bl	8001ab0 <HAL_GetTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f02:	6013      	str	r3, [r2, #0]
			isInDefaultMode = false;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
			adjustButtonPressed = true;
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
			// Adjust the hour
			AdjustHour(&hours, decrease_Pin);
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	4831      	ldr	r0, [pc, #196]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x218>)
 8000f14:	f7ff fee6 	bl	8000ce4 <AdjustHour>
		if (GPIO_Pin == increase_Pin)
 8000f18:	e03f      	b.n	8000f9a <HAL_GPIO_EXTI_Callback+0x1da>
		}


	}
	else if ((GPIO_Pin == increase_Pin || GPIO_Pin == decrease_Pin) && isInMinuteAdjustmentMode)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f20:	d002      	beq.n	8000f28 <HAL_GPIO_EXTI_Callback+0x168>
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	2b80      	cmp	r3, #128	; 0x80
 8000f26:	d13b      	bne.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x200>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d037      	beq.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (currentTimestamp - lastAdjustButtonPressTime < DEBOUNCE_DELAY_MS_ADJUST)
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b95      	cmp	r3, #149	; 0x95
 8000f3a:	d930      	bls.n	8000f9e <HAL_GPIO_EXTI_Callback+0x1de>

			// Ignore this button press (debounce)
			return;
		}

		lastAdjustButtonPressTime = currentTimestamp;
 8000f3c:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x214>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6013      	str	r3, [r2, #0]
		// Handle the increase and decrease buttons for minute adjustment
		if (GPIO_Pin == increase_Pin)
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f48:	d110      	bne.n	8000f6c <HAL_GPIO_EXTI_Callback+0x1ac>
		{
			lastButtonPressTime = HAL_GetTick();
 8000f4a:	f000 fdb1 	bl	8001ab0 <HAL_GetTick>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f52:	6013      	str	r3, [r2, #0]

			adjustButtonPressed = true;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
			isInDefaultMode = false;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
			// Adjust the minute
			AdjustMinute(&minutes, increase_Pin);
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	481d      	ldr	r0, [pc, #116]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x21c>)
 8000f66:	f7ff fef3 	bl	8000d50 <AdjustMinute>
 8000f6a:	e019      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else if (GPIO_Pin == decrease_Pin)
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b80      	cmp	r3, #128	; 0x80
 8000f70:	d116      	bne.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		{
			lastButtonPressTime = HAL_GetTick();
 8000f72:	f000 fd9d 	bl	8001ab0 <HAL_GetTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f7a:	6013      	str	r3, [r2, #0]

			adjustButtonPressed = true;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x210>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
			isInDefaultMode = false;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
			// Adjust the minute
			AdjustMinute(&minutes, decrease_Pin);
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x21c>)
 8000f8c:	f7ff fee0 	bl	8000d50 <AdjustMinute>
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
			return;
 8000f92:	bf00      	nop
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
			return;
 8000f96:	bf00      	nop
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
		if (GPIO_Pin == increase_Pin)
 8000f9a:	bf00      	nop
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x1e0>
			return;
 8000f9e:	bf00      	nop
		}
	}
}
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001c4 	.word	0x200001c4
 8000fac:	200001d0 	.word	0x200001d0
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	200001d4 	.word	0x200001d4
 8000fb8:	08005a78 	.word	0x08005a78
 8000fbc:	200000dc 	.word	0x200000dc
 8000fc0:	200001d5 	.word	0x200001d5
 8000fc4:	08005a90 	.word	0x08005a90
 8000fc8:	200001b8 	.word	0x200001b8
 8000fcc:	08005aa8 	.word	0x08005aa8
 8000fd0:	200001cc 	.word	0x200001cc
 8000fd4:	200001c8 	.word	0x200001c8
 8000fd8:	200001c0 	.word	0x200001c0
 8000fdc:	200001bc 	.word	0x200001bc

08000fe0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af02      	add	r7, sp, #8
	uint8_t buf[11];
	int16_t val;
	float temp_c;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fe6:	f000 fcf3 	bl	80019d0 <HAL_Init>
	SystemClock_Config();
 8000fea:	f000 f94b 	bl	8001284 <SystemClock_Config>
	MX_GPIO_Init();
 8000fee:	f000 fa4d 	bl	800148c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ff2:	f000 fa1b 	bl	800142c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000ff6:	f000 f9cb 	bl	8001390 <MX_TIM2_Init>
	MX_I2C1_Init();
 8000ffa:	f000 f989 	bl	8001310 <MX_I2C1_Init>
	{



		/* USER CODE END WHILE */
		buf[0] = REG_TEMP; //buffer = temp register
 8000ffe:	2300      	movs	r3, #0
 8001000:	713b      	strb	r3, [r7, #4]
		ret = HAL_I2C_Master_Transmit(&hi2c1, TMP100_ADDR, buf, 1, HAL_MAX_DELAY); // return value of the function //pointer @I2C handle(It represents the specific I2C peripheral or bus that the communication will take place on.), address of sensor, buf, one byte, islemin bitmesi icin yeterli sure
 8001002:	2390      	movs	r3, #144	; 0x90
 8001004:	b299      	uxth	r1, r3
 8001006:	1d3a      	adds	r2, r7, #4
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	488e      	ldr	r0, [pc, #568]	; (800124c <main+0x26c>)
 8001012:	f001 f8a5 	bl	8002160 <HAL_I2C_Master_Transmit>
 8001016:	4603      	mov	r3, r0
 8001018:	777b      	strb	r3, [r7, #29]
		if ( ret != HAL_OK ) { //HAL_OK , execution basarili sekilde yapildigi anlamina geliyor
 800101a:	7f7b      	ldrb	r3, [r7, #29]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <main+0x4c>
			strcpy((char*)buf, "Error Tx\r"); //strcpy, copy a string from one location to another (char*)buf, converts the buffer to a char* pointer. This means the buffer is converted to a character array
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4a8b      	ldr	r2, [pc, #556]	; (8001250 <main+0x270>)
 8001024:	ca07      	ldmia	r2, {r0, r1, r2}
 8001026:	c303      	stmia	r3!, {r0, r1}
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	e06a      	b.n	8001102 <main+0x122>
		} else {

			ret = HAL_I2C_Master_Receive(&hi2c1, TMP100_ADDR, buf, 2, HAL_MAX_DELAY);
 800102c:	2390      	movs	r3, #144	; 0x90
 800102e:	b299      	uxth	r1, r3
 8001030:	1d3a      	adds	r2, r7, #4
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <main+0x26c>)
 800103c:	f001 f984 	bl	8002348 <HAL_I2C_Master_Receive>
 8001040:	4603      	mov	r3, r0
 8001042:	777b      	strb	r3, [r7, #29]
			if ( ret != HAL_OK ) {
 8001044:	7f7b      	ldrb	r3, [r7, #29]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <main+0x76>
				strcpy((char*)buf, "Error Tx\r"); //
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4a80      	ldr	r2, [pc, #512]	; (8001250 <main+0x270>)
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	c303      	stmia	r3!, {r0, r1}
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	e049      	b.n	80010ea <main+0x10a>

			}else{

				val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); //12 bitlik bir integer icin buf[0] 4 birim sola shiftliyoruz, buf[1]i 4 birim saga daha sonra combine ediyoruz
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	b21a      	sxth	r2, r3
 800105c:	797b      	ldrb	r3, [r7, #5]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	b2db      	uxtb	r3, r3
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	83fb      	strh	r3, [r7, #30]

				if (val > 0x7FF) { //eger value en buyuk hexadecimalden buyukse
 8001068:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800106c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001070:	db05      	blt.n	800107e <main+0x9e>
					val |= 0xF000;//degeri eksi yap, most significant 4 bit 1 oluyor
 8001072:	8bfb      	ldrh	r3, [r7, #30]
 8001074:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001078:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800107c:	83fb      	strh	r3, [r7, #30]
				}

				temp_c = val * 0.0625;
 800107e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb78 	bl	8000778 <__aeabi_i2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b71      	ldr	r3, [pc, #452]	; (8001254 <main+0x274>)
 800108e:	f7ff f8f7 	bl	8000280 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fbd7 	bl	800084c <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	61bb      	str	r3, [r7, #24]
				temp_c *= 100;
 80010a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001258 <main+0x278>
 80010aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ae:	edc7 7a06 	vstr	s15, [r7, #24]

				sprintf((char*)buf, // sprintf format the temp and store it as a string
						"\r%u.%02u C",
						((unsigned int)temp_c / 100), //tam sayi kismi
 80010b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ba:	ee17 2a90 	vmov	r2, s15
				sprintf((char*)buf, // sprintf format the temp and store it as a string
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <main+0x27c>)
 80010c0:	fba3 2302 	umull	r2, r3, r3, r2
 80010c4:	095a      	lsrs	r2, r3, #5
						((unsigned int)temp_c % 100));//ondalikli kismi
 80010c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ce:	ee17 1a90 	vmov	r1, s15
				sprintf((char*)buf, // sprintf format the temp and store it as a string
 80010d2:	4b62      	ldr	r3, [pc, #392]	; (800125c <main+0x27c>)
 80010d4:	fba3 0301 	umull	r0, r3, r3, r1
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	fb00 f303 	mul.w	r3, r0, r3
 80010e0:	1acb      	subs	r3, r1, r3
 80010e2:	1d38      	adds	r0, r7, #4
 80010e4:	495e      	ldr	r1, [pc, #376]	; (8001260 <main+0x280>)
 80010e6:	f004 f81f 	bl	8005128 <siprintf>

			}
			HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	1d39      	adds	r1, r7, #4
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	4859      	ldr	r0, [pc, #356]	; (8001264 <main+0x284>)
 80010fe:	f003 fb43 	bl	8004788 <HAL_UART_Transmit>





		if (!adjustButtonPressed && !isInDefaultMode && HAL_GetTick() - lastButtonPressTime >= 10000)
 8001102:	4b59      	ldr	r3, [pc, #356]	; (8001268 <main+0x288>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d015      	beq.n	800113c <main+0x15c>
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <main+0x28c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	f083 0301 	eor.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00e      	beq.n	800113c <main+0x15c>
 800111e:	f000 fcc7 	bl	8001ab0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	4b52      	ldr	r3, [pc, #328]	; (8001270 <main+0x290>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f242 720f 	movw	r2, #9999	; 0x270f
 800112e:	4293      	cmp	r3, r2
 8001130:	d904      	bls.n	800113c <main+0x15c>
		{

			isInDefaultMode = true; // Exit the adjustment mode
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <main+0x28c>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
			// Perform any other actions needed after exiting adjustment mode
			NOTAdjustedPrinter();
 8001138:	f7ff fdac 	bl	8000c94 <NOTAdjustedPrinter>
		}


		if (isInDefaultMode) {
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <main+0x28c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d041      	beq.n	80011c8 <main+0x1e8>


			// Update clock every second
			int currentValue = HAL_GetTick();
 8001144:	f000 fcb4 	bl	8001ab0 <HAL_GetTick>
 8001148:	4603      	mov	r3, r0
 800114a:	613b      	str	r3, [r7, #16]
			if (currentValue - milliseconds >= 1000) {
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <main+0x294>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001158:	f4ff af51 	bcc.w	8000ffe <main+0x1e>
				milliseconds = currentValue;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4a45      	ldr	r2, [pc, #276]	; (8001274 <main+0x294>)
 8001160:	6013      	str	r3, [r2, #0]
				seconds++;
 8001162:	4b45      	ldr	r3, [pc, #276]	; (8001278 <main+0x298>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a43      	ldr	r2, [pc, #268]	; (8001278 <main+0x298>)
 800116a:	6013      	str	r3, [r2, #0]

				if (seconds >= 60) {
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <main+0x298>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b3b      	cmp	r3, #59	; 0x3b
 8001172:	d91a      	bls.n	80011aa <main+0x1ca>
					seconds = 0;
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <main+0x298>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
					minutes++;
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <main+0x29c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a3e      	ldr	r2, [pc, #248]	; (800127c <main+0x29c>)
 8001182:	6013      	str	r3, [r2, #0]

					if (minutes >= 60) {
 8001184:	4b3d      	ldr	r3, [pc, #244]	; (800127c <main+0x29c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b3b      	cmp	r3, #59	; 0x3b
 800118a:	d90e      	bls.n	80011aa <main+0x1ca>
						minutes = 0;
 800118c:	4b3b      	ldr	r3, [pc, #236]	; (800127c <main+0x29c>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
						hours++;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <main+0x2a0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a39      	ldr	r2, [pc, #228]	; (8001280 <main+0x2a0>)
 800119a:	6013      	str	r3, [r2, #0]

						if (hours >= 24) {
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <main+0x2a0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b17      	cmp	r3, #23
 80011a2:	d902      	bls.n	80011aa <main+0x1ca>
							hours = 0;
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <main+0x2a0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
						}
					}
				}

				// Print the clock time every second
				printer();
 80011aa:	f7ff fd21 	bl	8000bf0 <printer>
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f80d 	bl	80001d0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	1d39      	adds	r1, r7, #4
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	4828      	ldr	r0, [pc, #160]	; (8001264 <main+0x284>)
 80011c2:	f003 fae1 	bl	8004788 <HAL_UART_Transmit>
 80011c6:	e71a      	b.n	8000ffe <main+0x1e>
		}

		else {


			int currentValue = HAL_GetTick();
 80011c8:	f000 fc72 	bl	8001ab0 <HAL_GetTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]
			if (currentValue - milliseconds >= 1000) {
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <main+0x294>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011dc:	f4ff af0f 	bcc.w	8000ffe <main+0x1e>
				milliseconds = currentValue;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <main+0x294>)
 80011e4:	6013      	str	r3, [r2, #0]
				seconds++;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <main+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <main+0x298>)
 80011ee:	6013      	str	r3, [r2, #0]

				if (seconds >= 60) {
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <main+0x298>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b3b      	cmp	r3, #59	; 0x3b
 80011f6:	d91a      	bls.n	800122e <main+0x24e>
					seconds = 0;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <main+0x298>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
					minutes++;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <main+0x29c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <main+0x29c>)
 8001206:	6013      	str	r3, [r2, #0]

					if (minutes >= 60) {
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <main+0x29c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b3b      	cmp	r3, #59	; 0x3b
 800120e:	d90e      	bls.n	800122e <main+0x24e>
						minutes = 0;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <main+0x29c>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
						hours++;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <main+0x2a0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <main+0x2a0>)
 800121e:	6013      	str	r3, [r2, #0]

						if (hours >= 24) {
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <main+0x2a0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b17      	cmp	r3, #23
 8001226:	d902      	bls.n	800122e <main+0x24e>
							hours = 0;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <main+0x2a0>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
						}
					}
				}
				AdjustmentPrinter();
 800122e:	f7ff fd0d 	bl	8000c4c <AdjustmentPrinter>
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7fe ffcb 	bl	80001d0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	1d39      	adds	r1, r7, #4
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <main+0x284>)
 8001246:	f003 fa9f 	bl	8004788 <HAL_UART_Transmit>
		buf[0] = REG_TEMP; //buffer = temp register
 800124a:	e6d8      	b.n	8000ffe <main+0x1e>
 800124c:	20000160 	.word	0x20000160
 8001250:	08005ab8 	.word	0x08005ab8
 8001254:	3fb00000 	.word	0x3fb00000
 8001258:	42c80000 	.word	0x42c80000
 800125c:	51eb851f 	.word	0x51eb851f
 8001260:	08005ac4 	.word	0x08005ac4
 8001264:	200000dc 	.word	0x200000dc
 8001268:	200001cc 	.word	0x200001cc
 800126c:	20000000 	.word	0x20000000
 8001270:	200001c4 	.word	0x200001c4
 8001274:	200001b4 	.word	0x200001b4
 8001278:	200001b8 	.word	0x200001b8
 800127c:	200001bc 	.word	0x200001bc
 8001280:	200001c0 	.word	0x200001c0

08001284 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2244      	movs	r2, #68	; 0x44
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f003 ff40 	bl	8005118 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012aa:	f001 fc61 	bl	8002b70 <HAL_PWREx_ControlVoltageScaling>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80012b4:	f000 f9aa 	bl	800160c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b8:	2302      	movs	r3, #2
 80012ba:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c2:	2310      	movs	r3, #16
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fca4 	bl	8002c1c <HAL_RCC_OscConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80012da:	f000 f997 	bl	800160c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012de:	230f      	movs	r3, #15
 80012e0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f8a4 	bl	8003444 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8001302:	f000 f983 	bl	800160c <Error_Handler>
	}
}
 8001306:	bf00      	nop
 8001308:	3758      	adds	r7, #88	; 0x58
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_I2C1_Init+0x74>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <MX_I2C1_Init+0x78>)
 8001318:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_I2C1_Init+0x74>)
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <MX_I2C1_Init+0x7c>)
 800131e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_I2C1_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_I2C1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134a:	480e      	ldr	r0, [pc, #56]	; (8001384 <MX_I2C1_Init+0x74>)
 800134c:	f000 fe78 	bl	8002040 <HAL_I2C_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001356:	f000 f959 	bl	800160c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135a:	2100      	movs	r1, #0
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <MX_I2C1_Init+0x74>)
 800135e:	f001 fb61 	bl	8002a24 <HAL_I2CEx_ConfigAnalogFilter>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001368:	f000 f950 	bl	800160c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_I2C1_Init+0x74>)
 8001370:	f001 fba3 	bl	8002aba <HAL_I2CEx_ConfigDigitalFilter>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800137a:	f000 f947 	bl	800160c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000160 	.word	0x20000160
 8001388:	40005400 	.word	0x40005400
 800138c:	00303d5b 	.word	0x00303d5b

08001390 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42015;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b8:	f24a 421f 	movw	r2, #42015	; 0xa41f
 80013bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM2_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000-1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM2_Init+0x98>)
 80013c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_TIM2_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM2_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_TIM2_Init+0x98>)
 80013da:	f002 fd93 	bl	8003f04 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 80013e4:	f000 f912 	bl	800160c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM2_Init+0x98>)
 80013f6:	f002 fefb 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001400:	f000 f904 	bl	800160c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM2_Init+0x98>)
 8001412:	f003 f8e7 	bl	80045e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 800141c:	f000 f8f6 	bl	800160c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000090 	.word	0x20000090

0800142c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_USART2_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART2_UART_Init+0x58>)
 8001470:	f003 f93c 	bl	80046ec <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800147a:	f000 f8c7 	bl	800160c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000dc 	.word	0x200000dc
 8001488:	40004400 	.word	0x40004400

0800148c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <MX_GPIO_Init+0x174>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a56      	ldr	r2, [pc, #344]	; (8001600 <MX_GPIO_Init+0x174>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <MX_GPIO_Init+0x174>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <MX_GPIO_Init+0x174>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a50      	ldr	r2, [pc, #320]	; (8001600 <MX_GPIO_Init+0x174>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <MX_GPIO_Init+0x174>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <MX_GPIO_Init+0x174>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <MX_GPIO_Init+0x174>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b48      	ldr	r3, [pc, #288]	; (8001600 <MX_GPIO_Init+0x174>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <MX_GPIO_Init+0x174>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a44      	ldr	r2, [pc, #272]	; (8001600 <MX_GPIO_Init+0x174>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <MX_GPIO_Init+0x174>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	21b0      	movs	r1, #176	; 0xb0
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f000 fd69 	bl	8001fe0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001514:	483b      	ldr	r0, [pc, #236]	; (8001604 <MX_GPIO_Init+0x178>)
 8001516:	f000 fd63 	bl	8001fe0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001520:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001524:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001526:	2301      	movs	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4835      	ldr	r0, [pc, #212]	; (8001608 <MX_GPIO_Init+0x17c>)
 8001532:	f000 fbdb 	bl	8001cec <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8001536:	23b0      	movs	r3, #176	; 0xb0
 8001538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	f000 fbcc 	bl	8001cec <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156a:	f000 fbbf 	bl	8001cec <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	481f      	ldr	r0, [pc, #124]	; (8001604 <MX_GPIO_Init+0x178>)
 8001588:	f000 fbb0 	bl	8001cec <HAL_GPIO_Init>

	/*Configure GPIO pins : set_Pin decrease_Pin increase_Pin */
	GPIO_InitStruct.Pin = set_Pin|decrease_Pin|increase_Pin;
 800158c:	f44f 4383 	mov.w	r3, #16768	; 0x4180
 8001590:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001596:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <MX_GPIO_Init+0x178>)
 80015a4:	f000 fba2 	bl	8001cec <HAL_GPIO_Init>


	HAL_NVIC_SetPriority(B1_EXTI_IRQn, 0, 0); // Higher priority for button
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2028      	movs	r0, #40	; 0x28
 80015ae:	f000 fb66 	bl	8001c7e <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(B1_EXTI_IRQn);
 80015b2:	2028      	movs	r0, #40	; 0x28
 80015b4:	f000 fb7f 	bl	8001cb6 <HAL_NVIC_EnableIRQ>

	    // ... (other GPIO configurations)

	    /* Configure I2C interrupt */
	    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0); // Lower priority for I2C
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	201f      	movs	r0, #31
 80015be:	f000 fb5e 	bl	8001c7e <HAL_NVIC_SetPriority>
	    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0); // Lower priority for I2C errors
 80015c2:	2200      	movs	r2, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	2020      	movs	r0, #32
 80015c8:	f000 fb59 	bl	8001c7e <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015cc:	201f      	movs	r0, #31
 80015ce:	f000 fb72 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
	    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015d2:	2020      	movs	r0, #32
 80015d4:	f000 fb6f 	bl	8001cb6 <HAL_NVIC_EnableIRQ>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2017      	movs	r0, #23
 80015de:	f000 fb4e 	bl	8001c7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015e2:	2017      	movs	r0, #23
 80015e4:	f000 fb67 	bl	8001cb6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2028      	movs	r0, #40	; 0x28
 80015ee:	f000 fb46 	bl	8001c7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f2:	2028      	movs	r0, #40	; 0x28
 80015f4:	f000 fb5f 	bl	8001cb6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	48000400 	.word	0x48000400
 8001608:	48000800 	.word	0x48000800

0800160c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x44>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_MspInit+0x44>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6613      	str	r3, [r2, #96]	; 0x60
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x44>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_MspInit+0x44>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_MspInit+0x44>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6593      	str	r3, [r2, #88]	; 0x58
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_MspInit+0x44>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0a2      	sub	sp, #136	; 0x88
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2260      	movs	r2, #96	; 0x60
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fd49 	bl	8005118 <memset>
  if(hi2c->Instance==I2C1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_I2C_MspInit+0xec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d158      	bne.n	8001742 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001690:	2340      	movs	r3, #64	; 0x40
 8001692:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001694:	2300      	movs	r3, #0
 8001696:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4618      	mov	r0, r3
 800169e:	f002 f8f5 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016a8:	f7ff ffb0 	bl	800160c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f0:	2304      	movs	r3, #4
 80016f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f000 faf4 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001718:	2304      	movs	r3, #4
 800171a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_I2C_MspInit+0xf4>)
 8001726:	f000 fae1 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_I2C_MspInit+0xf0>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3788      	adds	r7, #136	; 0x88
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40005400 	.word	0x40005400
 8001750:	40021000 	.word	0x40021000
 8001754:	48000400 	.word	0x48000400

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d113      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_TIM_Base_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_TIM_Base_MspInit+0x44>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_TIM_Base_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201c      	movs	r0, #28
 8001788:	f000 fa79 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f000 fa92 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b0a2      	sub	sp, #136	; 0x88
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2260      	movs	r2, #96	; 0x60
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fca9 	bl	8005118 <memset>
  if(huart->Instance==USART2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_UART_MspInit+0xac>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d138      	bne.n	8001842 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 f855 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e8:	f7ff ff10 	bl	800160c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_UART_MspInit+0xb0>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_UART_MspInit+0xb0>)
 80017f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_UART_MspInit+0xb0>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_UART_MspInit+0xb0>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_UART_MspInit+0xb0>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_UART_MspInit+0xb0>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800181c:	230c      	movs	r3, #12
 800181e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800182e:	2307      	movs	r3, #7
 8001830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f000 fa55 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3788      	adds	r7, #136	; 0x88
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40004400 	.word	0x40004400
 8001850:	40021000 	.word	0x40021000

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f8f2 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(decrease_Pin);
 80018ac:	2080      	movs	r0, #128	; 0x80
 80018ae:	f000 fbaf 	bl	8002010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(increase_Pin);
 80018b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018b6:	f000 fbab 	bl	8002010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <TIM2_IRQHandler+0x10>)
 80018c6:	f002 fb74 	bl	8003fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000090 	.word	0x20000090

080018d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018dc:	f000 fb98 	bl	8002010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(set_Pin);
 80018e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018e4:	f000 fb94 	bl	8002010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f003 fbd2 	bl	80050c4 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20010000 	.word	0x20010000
 800194c:	00000400 	.word	0x00000400
 8001950:	200001d8 	.word	0x200001d8
 8001954:	200001f0 	.word	0x200001f0

08001958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001980:	f7ff ffea 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <LoopForever+0xe>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	; (80019c8 <LoopForever+0x16>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f003 fb91 	bl	80050d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ae:	f7ff fb17 	bl	8000fe0 <main>

080019b2 <LoopForever>:

LoopForever:
    b LoopForever
 80019b2:	e7fe      	b.n	80019b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019c0:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 80019c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019c8:	200001f0 	.word	0x200001f0

080019cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_Init+0x3c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <HAL_Init+0x3c>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e6:	2003      	movs	r0, #3
 80019e8:	f000 f93e 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f80f 	bl	8001a10 <HAL_InitTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	e001      	b.n	8001a02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fe:	f7ff fe0b 	bl	8001618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40022000 	.word	0x40022000

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_InitTick+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d023      	beq.n	8001a6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_InitTick+0x70>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_InitTick+0x6c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f949 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10f      	bne.n	8001a66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d809      	bhi.n	8001a60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f913 	bl	8001c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_InitTick+0x74>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e007      	b.n	8001a70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e004      	b.n	8001a70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	e001      	b.n	8001a70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	20000004 	.word	0x20000004
 8001a84:	20000008 	.word	0x20000008

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	200001dc 	.word	0x200001dc

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200001dc 	.word	0x200001dc

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff3e 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff31 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e154      	b.n	8001fa6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8146 	beq.w	8001fa0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d005      	beq.n	8001d2c <HAL_GPIO_Init+0x40>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d130      	bne.n	8001d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d62:	2201      	movs	r2, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 0201 	and.w	r2, r3, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d017      	beq.n	8001dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d123      	bne.n	8001e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	6939      	ldr	r1, [r7, #16]
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0203 	and.w	r2, r3, #3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80a0 	beq.w	8001fa0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e60:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_GPIO_Init+0x2d8>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <HAL_GPIO_Init+0x2d8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6c:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <HAL_GPIO_Init+0x2d8>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e78:	4a53      	ldr	r2, [pc, #332]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea2:	d019      	beq.n	8001ed8 <HAL_GPIO_Init+0x1ec>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2e0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1e8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2e4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1e0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1dc>
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	e008      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ec8:	2307      	movs	r3, #7
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1ee>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eea:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x2dc>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1c:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f46:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f aea3 	bne.w	8001cfc <HAL_GPIO_Init+0x10>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fec6 	bl	8000dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e081      	b.n	8002156 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fafa 	bl	8001660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002090:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	e006      	b.n	80020c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d104      	bne.n	80020da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	461a      	mov	r2, r3
 800216c:	460b      	mov	r3, r1
 800216e:	817b      	strh	r3, [r7, #10]
 8002170:	4613      	mov	r3, r2
 8002172:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b20      	cmp	r3, #32
 800217e:	f040 80da 	bne.w	8002336 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_I2C_Master_Transmit+0x30>
 800218c:	2302      	movs	r3, #2
 800218e:	e0d3      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1d8>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002198:	f7ff fc8a 	bl	8001ab0 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2319      	movs	r3, #25
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f9e6 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0be      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2221      	movs	r2, #33	; 0x21
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2210      	movs	r2, #16
 80021c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	893a      	ldrh	r2, [r7, #8]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2bff      	cmp	r3, #255	; 0xff
 80021ea:	d90e      	bls.n	800220a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	22ff      	movs	r2, #255	; 0xff
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	8979      	ldrh	r1, [r7, #10]
 80021fa:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_I2C_Master_Transmit+0x1e0>)
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fbdc 	bl	80029c0 <I2C_TransferConfig>
 8002208:	e06c      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	b2da      	uxtb	r2, r3
 800221a:	8979      	ldrh	r1, [r7, #10]
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_I2C_Master_Transmit+0x1e0>)
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fbcb 	bl	80029c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800222a:	e05b      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	6a39      	ldr	r1, [r7, #32]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f9e3 	bl	80025fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e07b      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d034      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0x184>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d130      	bne.n	80022e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f975 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e04d      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2bff      	cmp	r3, #255	; 0xff
 80022a4:	d90e      	bls.n	80022c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	22ff      	movs	r2, #255	; 0xff
 80022aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	8979      	ldrh	r1, [r7, #10]
 80022b4:	2300      	movs	r3, #0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fb7f 	bl	80029c0 <I2C_TransferConfig>
 80022c2:	e00f      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	8979      	ldrh	r1, [r7, #10]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fb6e 	bl	80029c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d19e      	bne.n	800222c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f9c2 	bl	800267c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e01a      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2220      	movs	r2, #32
 8002308:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_I2C_Master_Transmit+0x1e4>)
 8002316:	400b      	ands	r3, r1
 8002318:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002336:	2302      	movs	r3, #2
  }
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	80002000 	.word	0x80002000
 8002344:	fe00e800 	.word	0xfe00e800

08002348 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	461a      	mov	r2, r3
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
 8002358:	4613      	mov	r3, r2
 800235a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b20      	cmp	r3, #32
 8002366:	f040 80db 	bne.w	8002520 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_I2C_Master_Receive+0x30>
 8002374:	2302      	movs	r3, #2
 8002376:	e0d4      	b.n	8002522 <HAL_I2C_Master_Receive+0x1da>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002380:	f7ff fb96 	bl	8001ab0 <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2319      	movs	r3, #25
 800238c:	2201      	movs	r2, #1
 800238e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f8f2 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0bf      	b.n	8002522 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2222      	movs	r2, #34	; 0x22
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2210      	movs	r2, #16
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	893a      	ldrh	r2, [r7, #8]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2bff      	cmp	r3, #255	; 0xff
 80023d2:	d90e      	bls.n	80023f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	8979      	ldrh	r1, [r7, #10]
 80023e2:	4b52      	ldr	r3, [pc, #328]	; (800252c <HAL_I2C_Master_Receive+0x1e4>)
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fae8 	bl	80029c0 <I2C_TransferConfig>
 80023f0:	e06d      	b.n	80024ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	b2da      	uxtb	r2, r3
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_I2C_Master_Receive+0x1e4>)
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fad7 	bl	80029c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002412:	e05c      	b.n	80024ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f96b 	bl	80026f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e07c      	b.n	8002522 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d034      	beq.n	80024ce <HAL_I2C_Master_Receive+0x186>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d130      	bne.n	80024ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2200      	movs	r2, #0
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f880 	bl	800257c <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e04d      	b.n	8002522 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2bff      	cmp	r3, #255	; 0xff
 800248e:	d90e      	bls.n	80024ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	22ff      	movs	r2, #255	; 0xff
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	b2da      	uxtb	r2, r3
 800249c:	8979      	ldrh	r1, [r7, #10]
 800249e:	2300      	movs	r3, #0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa8a 	bl	80029c0 <I2C_TransferConfig>
 80024ac:	e00f      	b.n	80024ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	8979      	ldrh	r1, [r7, #10]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fa79 	bl	80029c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d19d      	bne.n	8002414 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	6a39      	ldr	r1, [r7, #32]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f8cd 	bl	800267c <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e01a      	b.n	8002522 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2220      	movs	r2, #32
 80024f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_I2C_Master_Receive+0x1e8>)
 8002500:	400b      	ands	r3, r1
 8002502:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002520:	2302      	movs	r3, #2
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	80002400 	.word	0x80002400
 8002530:	fe00e800 	.word	0xfe00e800

08002534 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d103      	bne.n	8002552 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d007      	beq.n	8002570 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	619a      	str	r2, [r3, #24]
  }
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258c:	e022      	b.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d01e      	beq.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7ff fa8b 	bl	8001ab0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d113      	bne.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00f      	b.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d0cd      	beq.n	800258e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002608:	e02c      	b.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f8ea 	bl	80027e8 <I2C_IsErrorOccurred>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e02a      	b.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d01e      	beq.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7ff fa43 	bl	8001ab0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d113      	bne.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d1cb      	bne.n	800260a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002688:	e028      	b.n	80026dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8aa 	bl	80027e8 <I2C_IsErrorOccurred>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e026      	b.n	80026ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7ff fa07 	bl	8001ab0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d113      	bne.n	80026dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d1cf      	bne.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002700:	e064      	b.n	80027cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f86e 	bl	80027e8 <I2C_IsErrorOccurred>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e062      	b.n	80027dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b20      	cmp	r3, #32
 8002722:	d138      	bne.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d105      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e04e      	b.n	80027dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b10      	cmp	r3, #16
 800274a:	d107      	bne.n	800275c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2204      	movs	r2, #4
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
 800275a:	e002      	b.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2220      	movs	r2, #32
 8002768:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002776:	400b      	ands	r3, r1
 8002778:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e022      	b.n	80027dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7ff f98b 	bl	8001ab0 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e007      	b.n	80027dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d193      	bne.n	8002702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d075      	beq.n	8002900 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800281c:	e056      	b.n	80028cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d052      	beq.n	80028cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7ff f943 	bl	8001ab0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_IsErrorOccurred+0x54>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d147      	bne.n	80028cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800284e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285e:	d12e      	bne.n	80028be <I2C_IsErrorOccurred+0xd6>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002866:	d02a      	beq.n	80028be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b20      	cmp	r3, #32
 800286c:	d027      	beq.n	80028be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800287e:	f7ff f917 	bl	8001ab0 <HAL_GetTick>
 8002882:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002884:	e01b      	b.n	80028be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002886:	f7ff f913 	bl	8001ab0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b19      	cmp	r3, #25
 8002892:	d914      	bls.n	80028be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d1dc      	bne.n	8002886 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d003      	beq.n	80028e2 <I2C_IsErrorOccurred+0xfa>
 80028da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d09d      	beq.n	800281e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2220      	movs	r2, #32
 80028f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002922:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800296e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01c      	beq.n	80029b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fddc 	bl	8002534 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <I2C_IsErrorOccurred+0x1d4>)
 8002988:	400b      	ands	r3, r1
 800298a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	fe00e800 	.word	0xfe00e800

080029c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	817b      	strh	r3, [r7, #10]
 80029ce:	4613      	mov	r3, r2
 80029d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029d8:	7a7b      	ldrb	r3, [r7, #9]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	0d5b      	lsrs	r3, r3, #21
 80029fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <I2C_TransferConfig+0x60>)
 8002a00:	430b      	orrs	r3, r1
 8002a02:	43db      	mvns	r3, r3
 8002a04:	ea02 0103 	and.w	r1, r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	03ff63ff 	.word	0x03ff63ff

08002a24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d138      	bne.n	8002aac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e032      	b.n	8002aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d139      	bne.n	8002b44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e033      	b.n	8002b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2224      	movs	r2, #36	; 0x24
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40007000 	.word	0x40007000

08002b70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7e:	d130      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d038      	beq.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2232      	movs	r2, #50	; 0x32
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9b      	lsrs	r3, r3, #18
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb4:	e002      	b.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc8:	d102      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f2      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bdc:	d110      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e00f      	b.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d007      	beq.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bf8:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40007000 	.word	0x40007000
 8002c14:	20000004 	.word	0x20000004
 8002c18:	431bde83 	.word	0x431bde83

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f000 bc02 	b.w	8003434 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c30:	4b96      	ldr	r3, [pc, #600]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c3a:	4b94      	ldr	r3, [pc, #592]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80e4 	beq.w	8002e1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4c>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	f040 808b 	bne.w	8002d76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f040 8087 	bne.w	8002d76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c68:	4b88      	ldr	r3, [pc, #544]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x64>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e3d9      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	4b81      	ldr	r3, [pc, #516]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_RCC_OscConfig+0x7e>
 8002c90:	4b7e      	ldr	r3, [pc, #504]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c98:	e005      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8a>
 8002c9a:	4b7c      	ldr	r3, [pc, #496]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d223      	bcs.n	8002cf2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fd8c 	bl	80037cc <RCC_SetFlashLatencyFromMSIRange>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e3ba      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b73      	ldr	r3, [pc, #460]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b70      	ldr	r3, [pc, #448]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	496d      	ldr	r1, [pc, #436]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4968      	ldr	r1, [pc, #416]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	e025      	b.n	8002d3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf2:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a65      	ldr	r2, [pc, #404]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4960      	ldr	r1, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	495b      	ldr	r1, [pc, #364]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fd4c 	bl	80037cc <RCC_SetFlashLatencyFromMSIRange>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e37a      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3e:	f000 fc81 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	4950      	ldr	r1, [pc, #320]	; (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a4e      	ldr	r2, [pc, #312]	; (8002e94 <HAL_RCC_OscConfig+0x278>)
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fe54 	bl	8001a10 <HAL_InitTick>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d052      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	e35e      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d032      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a42      	ldr	r2, [pc, #264]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fe91 	bl	8001ab0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d92:	f7fe fe8d 	bl	8001ab0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e347      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da4:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a35      	ldr	r2, [pc, #212]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4930      	ldr	r1, [pc, #192]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	492b      	ldr	r1, [pc, #172]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
 8002de2:	e01a      	b.n	8002e1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de4:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fe5e 	bl	8001ab0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df8:	f7fe fe5a 	bl	8001ab0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e314      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1dc>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d073      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_OscConfig+0x21c>
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d10e      	bne.n	8002e50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d063      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d15f      	bne.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e2f1      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x24c>
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e025      	b.n	8002eb4 <HAL_RCC_OscConfig+0x298>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d114      	bne.n	8002e9c <HAL_RCC_OscConfig+0x280>
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a02      	ldr	r2, [pc, #8]	; (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e013      	b.n	8002eb4 <HAL_RCC_OscConfig+0x298>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08005ad0 	.word	0x08005ad0
 8002e94:	20000004 	.word	0x20000004
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a9f      	ldr	r2, [pc, #636]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b9d      	ldr	r3, [pc, #628]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a9c      	ldr	r2, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fdf8 	bl	8001ab0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fdf4 	bl	8001ab0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e2ae      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed6:	4b92      	ldr	r3, [pc, #584]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2a8>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fde4 	bl	8001ab0 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fde0 	bl	8001ab0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e29a      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d0>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d060      	beq.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x310>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d119      	bne.n	8002f5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d116      	bne.n	8002f5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x328>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e277      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4973      	ldr	r1, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	e040      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d023      	beq.n	8002faa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6e      	ldr	r2, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fd9f 	bl	8001ab0 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fd9b 	bl	8001ab0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e255      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	495f      	ldr	r1, [pc, #380]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	e018      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fd7b 	bl	8001ab0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fd77 	bl	8001ab0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e231      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03c      	beq.n	8003062 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01c      	beq.n	800302a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fe fd56 	bl	8001ab0 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fe fd52 	bl	8001ab0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e20c      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 800301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCC_OscConfig+0x3ec>
 8003028:	e01b      	b.n	8003062 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fe fd39 	bl	8001ab0 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003042:	f7fe fd35 	bl	8001ab0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1ef      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ef      	bne.n	8003042 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a6 	beq.w	80031bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	; 0x58
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x508>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_OscConfig+0x508>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x508>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fcfc 	bl	8001ab0 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fe fcf8 	bl	8001ab0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1b2      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCC_OscConfig+0x508>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4d8>
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f2:	e029      	b.n	8003148 <HAL_RCC_OscConfig+0x52c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d115      	bne.n	8003128 <HAL_RCC_OscConfig+0x50c>
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	4a03      	ldr	r2, [pc, #12]	; (8003120 <HAL_RCC_OscConfig+0x504>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800311c:	e014      	b.n	8003148 <HAL_RCC_OscConfig+0x52c>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
 8003128:	4b9a      	ldr	r3, [pc, #616]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	4a99      	ldr	r2, [pc, #612]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003138:	4b96      	ldr	r3, [pc, #600]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	4a95      	ldr	r2, [pc, #596]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fcae 	bl	8001ab0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fcaa 	bl	8001ab0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e162      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ed      	beq.n	8003158 <HAL_RCC_OscConfig+0x53c>
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fc97 	bl	8001ab0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fc93 	bl	8001ab0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e14b      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319c:	4b7d      	ldr	r3, [pc, #500]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ed      	bne.n	8003186 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7ffb      	ldrb	r3, [r7, #31]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	4a77      	ldr	r2, [pc, #476]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d03c      	beq.n	8003242 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031d0:	4b70      	ldr	r3, [pc, #448]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80031d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d6:	4a6f      	ldr	r2, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fc66 	bl	8001ab0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e8:	f7fe fc62 	bl	8001ab0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e11c      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031fa:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80031fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ef      	beq.n	80031e8 <HAL_RCC_OscConfig+0x5cc>
 8003208:	e01b      	b.n	8003242 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800320c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003210:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fc49 	bl	8001ab0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003222:	f7fe fc45 	bl	8001ab0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0ff      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003234:	4b57      	ldr	r3, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80f3 	beq.w	8003432 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	2b02      	cmp	r3, #2
 8003252:	f040 80c9 	bne.w	80033e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003256:	4b4f      	ldr	r3, [pc, #316]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0203 	and.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	429a      	cmp	r2, r3
 8003268:	d12c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	3b01      	subs	r3, #1
 8003276:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d123      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d11b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d113      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d109      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d06b      	beq.n	800339c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d062      	beq.n	8003390 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032ca:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0ac      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2d      	ldr	r2, [pc, #180]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 80032e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e6:	f7fe fbe3 	bl	8001ab0 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fbdf 	bl	8001ab0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e099      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x77c>)
 8003312:	4013      	ands	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800331c:	3a01      	subs	r2, #1
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	4311      	orrs	r1, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003326:	0212      	lsls	r2, r2, #8
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800332e:	0852      	lsrs	r2, r2, #1
 8003330:	3a01      	subs	r2, #1
 8003332:	0552      	lsls	r2, r2, #21
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800333a:	0852      	lsrs	r2, r2, #1
 800333c:	3a01      	subs	r2, #1
 800333e:	0652      	lsls	r2, r2, #25
 8003340:	4311      	orrs	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003346:	06d2      	lsls	r2, r2, #27
 8003348:	430a      	orrs	r2, r1
 800334a:	4912      	ldr	r1, [pc, #72]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800334c:	4313      	orrs	r3, r2
 800334e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003368:	f7fe fba2 	bl	8001ab0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fb9e 	bl	8001ab0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e058      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_RCC_OscConfig+0x778>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800338e:	e050      	b.n	8003432 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e04f      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
 8003394:	40021000 	.word	0x40021000
 8003398:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_OscConfig+0x820>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d144      	bne.n	8003432 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a23      	ldr	r2, [pc, #140]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c0:	f7fe fb76 	bl	8001ab0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fb72 	bl	8001ab0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e02c      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x7ac>
 80033e6:	e024      	b.n	8003432 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d01f      	beq.n	800342e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_RCC_OscConfig+0x820>)
 80033f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fb59 	bl	8001ab0 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fb55 	bl	8001ab0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e00f      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_OscConfig+0x820>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_RCC_OscConfig+0x820>)
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	4905      	ldr	r1, [pc, #20]	; (800343c <HAL_RCC_OscConfig+0x820>)
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_OscConfig+0x824>)
 8003428:	4013      	ands	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
 800342c:	e001      	b.n	8003432 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	feeefffc 	.word	0xfeeefffc

08003444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0e7      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b75      	ldr	r3, [pc, #468]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d910      	bls.n	8003488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b72      	ldr	r3, [pc, #456]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 0207 	bic.w	r2, r3, #7
 800346e:	4970      	ldr	r1, [pc, #448]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b6e      	ldr	r3, [pc, #440]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cf      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d908      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4960      	ldr	r1, [pc, #384]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d04c      	beq.n	800355c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d121      	bne.n	800351a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0a6      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d115      	bne.n	800351a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e09a      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034fa:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08e      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e086      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800351a:	4b46      	ldr	r3, [pc, #280]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4943      	ldr	r1, [pc, #268]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352c:	f7fe fac0 	bl	8001ab0 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	e00a      	b.n	800354a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fe fabc 	bl	8001ab0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e06e      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 020c 	and.w	r2, r3, #12
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	429a      	cmp	r2, r3
 800355a:	d1eb      	bne.n	8003534 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	429a      	cmp	r2, r3
 8003576:	d208      	bcs.n	800358a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	492b      	ldr	r1, [pc, #172]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800358a:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d210      	bcs.n	80035ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 0207 	bic.w	r2, r3, #7
 80035a0:	4923      	ldr	r1, [pc, #140]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a8:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_RCC_ClockConfig+0x1ec>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e036      	b.n	8003628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4918      	ldr	r1, [pc, #96]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4910      	ldr	r1, [pc, #64]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035f8:	f000 f824 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	490b      	ldr	r1, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1f4>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	4a09      	ldr	r2, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1f8>)
 8003616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1fc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe f9f7 	bl	8001a10 <HAL_InitTick>
 8003622:	4603      	mov	r3, r0
 8003624:	72fb      	strb	r3, [r7, #11]

  return status;
 8003626:	7afb      	ldrb	r3, [r7, #11]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40022000 	.word	0x40022000
 8003634:	40021000 	.word	0x40021000
 8003638:	08005ad0 	.word	0x08005ad0
 800363c:	20000004 	.word	0x20000004
 8003640:	20000008 	.word	0x20000008

08003644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x34>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d121      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d11e      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	e005      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036a0:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10d      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCC_GetSysClockFreq+0x110>)
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e004      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d134      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d2:	4b1e      	ldr	r3, [pc, #120]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0xa6>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d003      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0xac>
 80036e8:	e005      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ec:	617b      	str	r3, [r7, #20]
      break;
 80036ee:	e005      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCC_GetSysClockFreq+0x114>)
 80036f2:	617b      	str	r3, [r7, #20]
      break;
 80036f4:	e002      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	617b      	str	r3, [r7, #20]
      break;
 80036fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	3301      	adds	r3, #1
 8003708:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	fb03 f202 	mul.w	r2, r3, r2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_RCC_GetSysClockFreq+0x108>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	0e5b      	lsrs	r3, r3, #25
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	3301      	adds	r3, #1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800373c:	69bb      	ldr	r3, [r7, #24]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	08005ae8 	.word	0x08005ae8
 8003754:	00f42400 	.word	0x00f42400
 8003758:	007a1200 	.word	0x007a1200

0800375c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4904      	ldr	r1, [pc, #16]	; (800379c <HAL_RCC_GetPCLK1Freq+0x28>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	08005ae0 	.word	0x08005ae0

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037a4:	f7ff ffda 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0adb      	lsrs	r3, r3, #11
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08005ae0 	.word	0x08005ae0

080037cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037d8:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037e4:	f7ff f9b6 	bl	8002b54 <HAL_PWREx_GetVoltageRange>
 80037e8:	6178      	str	r0, [r7, #20]
 80037ea:	e014      	b.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	4a24      	ldr	r2, [pc, #144]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	6593      	str	r3, [r2, #88]	; 0x58
 80037f8:	4b22      	ldr	r3, [pc, #136]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003804:	f7ff f9a6 	bl	8002b54 <HAL_PWREx_GetVoltageRange>
 8003808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381c:	d10b      	bne.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b80      	cmp	r3, #128	; 0x80
 8003822:	d919      	bls.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2ba0      	cmp	r3, #160	; 0xa0
 8003828:	d902      	bls.n	8003830 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800382a:	2302      	movs	r3, #2
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e013      	b.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003830:	2301      	movs	r3, #1
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	e010      	b.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d902      	bls.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800383c:	2303      	movs	r3, #3
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e00a      	b.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d102      	bne.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003848:	2302      	movs	r3, #2
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e004      	b.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b70      	cmp	r3, #112	; 0x70
 8003852:	d101      	bne.n	8003858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003854:	2301      	movs	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 0207 	bic.w	r2, r3, #7
 8003860:	4909      	ldr	r1, [pc, #36]	; (8003888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003868:	4b07      	ldr	r3, [pc, #28]	; (8003888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	429a      	cmp	r2, r3
 8003874:	d001      	beq.n	800387a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	40022000 	.word	0x40022000

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003894:	2300      	movs	r3, #0
 8003896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003898:	2300      	movs	r3, #0
 800389a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d031      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b0:	d01a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b6:	d814      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038c2:	4b5d      	ldr	r3, [pc, #372]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ce:	e00c      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fa22 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	74fb      	strb	r3, [r7, #19]
      break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ea:	7cfb      	ldrb	r3, [r7, #19]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f0:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	494e      	ldr	r1, [pc, #312]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 809e 	beq.w	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a3f      	ldr	r2, [pc, #252]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
 8003940:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394c:	2301      	movs	r3, #1
 800394e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a39      	ldr	r2, [pc, #228]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800395c:	f7fe f8a8 	bl	8001ab0 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003962:	e009      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003964:	f7fe f8a4 	bl	8001ab0 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	74fb      	strb	r3, [r7, #19]
        break;
 8003976:	e005      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ef      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d15a      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01e      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d019      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d016      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe f864 	bl	8001ab0 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ea:	e00b      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe f860 	bl	8001ab0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d902      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	74fb      	strb	r3, [r7, #19]
            break;
 8003a02:	e006      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ec      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a2e:	e009      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a44:	7c7b      	ldrb	r3, [r7, #17]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b8d      	ldr	r3, [pc, #564]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	4a8c      	ldr	r2, [pc, #560]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a62:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4983      	ldr	r1, [pc, #524]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a84:	4b7e      	ldr	r3, [pc, #504]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 020c 	bic.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	497b      	ldr	r1, [pc, #492]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	4972      	ldr	r1, [pc, #456]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	496a      	ldr	r1, [pc, #424]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	4961      	ldr	r1, [pc, #388]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b0c:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4959      	ldr	r1, [pc, #356]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	4950      	ldr	r1, [pc, #320]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	4948      	ldr	r1, [pc, #288]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b72:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	493f      	ldr	r1, [pc, #252]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d028      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b94:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	4937      	ldr	r1, [pc, #220]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bbe:	60d3      	str	r3, [r2, #12]
 8003bc0:	e011      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f8a4 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	491f      	ldr	r1, [pc, #124]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c10:	d106      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1c:	60d3      	str	r3, [r2, #12]
 8003c1e:	e011      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f875 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d02b      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a02      	ldr	r2, [pc, #8]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7a:	60d3      	str	r3, [r2, #12]
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f843 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01c      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	4916      	ldr	r1, [pc, #88]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f820 	bl	8003d20 <RCCEx_PLLSAI1_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	4904      	ldr	r1, [pc, #16]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d10:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000

08003d20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2e:	4b74      	ldr	r3, [pc, #464]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d3a:	4b71      	ldr	r3, [pc, #452]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10d      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d52:	4b6b      	ldr	r3, [pc, #428]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
       ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d047      	beq.n	8003df6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e044      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d018      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x86>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d825      	bhi.n	8003dc4 <RCCEx_PLLSAI1_Config+0xa4>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <RCCEx_PLLSAI1_Config+0x62>
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d009      	beq.n	8003d94 <RCCEx_PLLSAI1_Config+0x74>
 8003d80:	e020      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11d      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e01a      	b.n	8003dca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d94:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e013      	b.n	8003dce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003db2:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dc2:	e006      	b.n	8003dd2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e004      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dda:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4943      	ldr	r1, [pc, #268]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d17c      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dfc:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3f      	ldr	r2, [pc, #252]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fd fe52 	bl	8001ab0 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e0e:	e009      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e10:	f7fd fe4e 	bl	8001ab0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
        break;
 8003e22:	e005      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e24:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ef      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d15f      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	06d2      	lsls	r2, r2, #27
 8003e54:	430a      	orrs	r2, r1
 8003e56:	492a      	ldr	r1, [pc, #168]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	610b      	str	r3, [r1, #16]
 8003e5c:	e027      	b.n	8003eae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d112      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6892      	ldr	r2, [r2, #8]
 8003e74:	0211      	lsls	r1, r2, #8
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6912      	ldr	r2, [r2, #16]
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0552      	lsls	r2, r2, #21
 8003e80:	430a      	orrs	r2, r1
 8003e82:	491f      	ldr	r1, [pc, #124]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	610b      	str	r3, [r1, #16]
 8003e88:	e011      	b.n	8003eae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6892      	ldr	r2, [r2, #8]
 8003e9a:	0211      	lsls	r1, r2, #8
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6952      	ldr	r2, [r2, #20]
 8003ea0:	0852      	lsrs	r2, r2, #1
 8003ea2:	3a01      	subs	r2, #1
 8003ea4:	0652      	lsls	r2, r2, #25
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	4915      	ldr	r1, [pc, #84]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd fdf9 	bl	8001ab0 <HAL_GetTick>
 8003ebe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ec0:	e009      	b.n	8003ed6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec2:	f7fd fdf5 	bl	8001ab0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d902      	bls.n	8003ed6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ed4:	e005      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ef      	beq.n	8003ec2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e049      	b.n	8003faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd fc14 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fa50 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d122      	bne.n	800400e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d11b      	bne.n	800400e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0202 	mvn.w	r2, #2
 8003fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f9d8 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8003ffa:	e005      	b.n	8004008 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f9ca 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9db 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b04      	cmp	r3, #4
 800401a:	d122      	bne.n	8004062 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d11b      	bne.n	8004062 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f06f 0204 	mvn.w	r2, #4
 8004032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f9ae 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 800404e:	e005      	b.n	800405c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9a0 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9b1 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b08      	cmp	r3, #8
 800406e:	d122      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b08      	cmp	r3, #8
 800407c:	d11b      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0208 	mvn.w	r2, #8
 8004086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2204      	movs	r2, #4
 800408c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f984 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 80040a2:	e005      	b.n	80040b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f976 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f987 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d122      	bne.n	800410a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d11b      	bne.n	800410a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0210 	mvn.w	r2, #16
 80040da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2208      	movs	r2, #8
 80040e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f95a 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 80040f6:	e005      	b.n	8004104 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f94c 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f95d 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f06f 0201 	mvn.w	r2, #1
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f926 	bl	8004382 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d10e      	bne.n	8004162 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d107      	bne.n	8004162 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fab1 	bl	80046c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	d10e      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d107      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 faa4 	bl	80046d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f90b 	bl	80043d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0220 	mvn.w	r2, #32
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa64 	bl	80046b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x1c>
 8004208:	2302      	movs	r3, #2
 800420a:	e0b6      	b.n	800437a <HAL_TIM_ConfigClockSource+0x18a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d03e      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0xd8>
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424e:	f200 8087 	bhi.w	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	f000 8086 	beq.w	8004366 <HAL_TIM_ConfigClockSource+0x176>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d87f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d01a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xaa>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d87b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d050      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x11e>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d877      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d03c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xfe>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d873      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d058      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x13e>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d86f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d064      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d86b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d060      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d867      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d05a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004298:	e062      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 f97b 	bl	80045a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
      break;
 80042c6:	e04f      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f000 f964 	bl	80045a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e03c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 f8d8 	bl	80044b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2150      	movs	r1, #80	; 0x50
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f931 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 800430c:	e02c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 f8f7 	bl	800450e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2160      	movs	r1, #96	; 0x60
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f921 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 800432c:	e01c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 f8b8 	bl	80044b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f911 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 800434c:	e00c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f000 f908 	bl	800456e <TIM_ITRx_SetConfig>
      break;
 800435e:	e003      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      break;
 8004364:	e000      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0x20>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d108      	bne.n	800441a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <TIM_Base_SetConfig+0x52>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004428:	d007      	beq.n	800443a <TIM_Base_SetConfig+0x52>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <TIM_Base_SetConfig+0xc0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_Base_SetConfig+0x52>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <TIM_Base_SetConfig+0xc4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d108      	bne.n	800444c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0xa0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <TIM_Base_SetConfig+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0xa0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <TIM_Base_SetConfig+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400

080044b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 030a 	bic.w	r3, r3, #10
 80044ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0210 	bic.w	r2, r3, #16
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	031b      	lsls	r3, r3, #12
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800454a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	f043 0307 	orr.w	r3, r3, #7
 8004590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e04f      	b.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800462c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d004      	beq.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a10      	ldr	r2, [pc, #64]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10c      	bne.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004676:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40014000 	.word	0x40014000

080046b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e040      	b.n	8004780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fd f846 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8c0 	bl	80048b0 <UART_SetConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e022      	b.n	8004780 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fb0e 	bl	8004d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb95 	bl	8004ea8 <UART_CheckIdleState>
 800477e:	4603      	mov	r3, r0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800479c:	2b20      	cmp	r3, #32
 800479e:	f040 8082 	bne.w	80048a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_Transmit+0x26>
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07a      	b.n	80048a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit+0x38>
 80047bc:	2302      	movs	r3, #2
 80047be:	e073      	b.n	80048a8 <HAL_UART_Transmit+0x120>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2221      	movs	r2, #33	; 0x21
 80047d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d6:	f7fd f96b 	bl	8001ab0 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d108      	bne.n	8004808 <HAL_UART_Transmit+0x80>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e003      	b.n	8004810 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004818:	e02d      	b.n	8004876 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fb88 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e039      	b.n	80048a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004846:	b292      	uxth	r2, r2
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	3302      	adds	r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e008      	b.n	8004864 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b292      	uxth	r2, r2
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1cb      	bne.n	800481a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2200      	movs	r2, #0
 800488a:	2140      	movs	r1, #64	; 0x40
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fb54 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e005      	b.n	80048a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e000      	b.n	80048a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80048a6:	2302      	movs	r3, #2
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b4:	b08a      	sub	sp, #40	; 0x28
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b9e      	ldr	r3, [pc, #632]	; (8004b58 <UART_SetConfig+0x2a8>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a93      	ldr	r2, [pc, #588]	; (8004b5c <UART_SetConfig+0x2ac>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004918:	4313      	orrs	r3, r2
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a8a      	ldr	r2, [pc, #552]	; (8004b60 <UART_SetConfig+0x2b0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d126      	bne.n	8004988 <UART_SetConfig+0xd8>
 800493a:	4b8a      	ldr	r3, [pc, #552]	; (8004b64 <UART_SetConfig+0x2b4>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d81b      	bhi.n	8004980 <UART_SetConfig+0xd0>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0xa0>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004961 	.word	0x08004961
 8004954:	08004971 	.word	0x08004971
 8004958:	08004969 	.word	0x08004969
 800495c:	08004979 	.word	0x08004979
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e0ab      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e0a7      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e0a3      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e09f      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e09b      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a76      	ldr	r2, [pc, #472]	; (8004b68 <UART_SetConfig+0x2b8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d138      	bne.n	8004a04 <UART_SetConfig+0x154>
 8004992:	4b74      	ldr	r3, [pc, #464]	; (8004b64 <UART_SetConfig+0x2b4>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d82d      	bhi.n	80049fc <UART_SetConfig+0x14c>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0xf8>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	080049fd 	.word	0x080049fd
 80049b4:	080049fd 	.word	0x080049fd
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	080049fd 	.word	0x080049fd
 80049c0:	080049fd 	.word	0x080049fd
 80049c4:	080049fd 	.word	0x080049fd
 80049c8:	080049e5 	.word	0x080049e5
 80049cc:	080049fd 	.word	0x080049fd
 80049d0:	080049fd 	.word	0x080049fd
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e06d      	b.n	8004ac0 <UART_SetConfig+0x210>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ea:	e069      	b.n	8004ac0 <UART_SetConfig+0x210>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f2:	e065      	b.n	8004ac0 <UART_SetConfig+0x210>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e061      	b.n	8004ac0 <UART_SetConfig+0x210>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e05d      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <UART_SetConfig+0x2bc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d125      	bne.n	8004a5a <UART_SetConfig+0x1aa>
 8004a0e:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <UART_SetConfig+0x2b4>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a18:	2b30      	cmp	r3, #48	; 0x30
 8004a1a:	d016      	beq.n	8004a4a <UART_SetConfig+0x19a>
 8004a1c:	2b30      	cmp	r3, #48	; 0x30
 8004a1e:	d818      	bhi.n	8004a52 <UART_SetConfig+0x1a2>
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d00a      	beq.n	8004a3a <UART_SetConfig+0x18a>
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d814      	bhi.n	8004a52 <UART_SetConfig+0x1a2>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <UART_SetConfig+0x182>
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d008      	beq.n	8004a42 <UART_SetConfig+0x192>
 8004a30:	e00f      	b.n	8004a52 <UART_SetConfig+0x1a2>
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a38:	e042      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a40:	e03e      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a42:	2304      	movs	r3, #4
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a48:	e03a      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a50:	e036      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a52:	2310      	movs	r3, #16
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a58:	e032      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <UART_SetConfig+0x2ac>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d12a      	bne.n	8004aba <UART_SetConfig+0x20a>
 8004a64:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <UART_SetConfig+0x2b4>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a72:	d01a      	beq.n	8004aaa <UART_SetConfig+0x1fa>
 8004a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a78:	d81b      	bhi.n	8004ab2 <UART_SetConfig+0x202>
 8004a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7e:	d00c      	beq.n	8004a9a <UART_SetConfig+0x1ea>
 8004a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a84:	d815      	bhi.n	8004ab2 <UART_SetConfig+0x202>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x1e2>
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d008      	beq.n	8004aa2 <UART_SetConfig+0x1f2>
 8004a90:	e00f      	b.n	8004ab2 <UART_SetConfig+0x202>
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a98:	e012      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa0:	e00e      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa8:	e00a      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab0:	e006      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab8:	e002      	b.n	8004ac0 <UART_SetConfig+0x210>
 8004aba:	2310      	movs	r3, #16
 8004abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <UART_SetConfig+0x2ac>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f040 808a 	bne.w	8004be0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d824      	bhi.n	8004b1e <UART_SetConfig+0x26e>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x22c>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b0f 	.word	0x08004b0f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b1f 	.word	0x08004b1f
 8004afc:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7fe fe38 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8004b04:	61f8      	str	r0, [r7, #28]
        break;
 8004b06:	e010      	b.n	8004b2a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <UART_SetConfig+0x2c0>)
 8004b0a:	61fb      	str	r3, [r7, #28]
        break;
 8004b0c:	e00d      	b.n	8004b2a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe fd99 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8004b12:	61f8      	str	r0, [r7, #28]
        break;
 8004b14:	e009      	b.n	8004b2a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	61fb      	str	r3, [r7, #28]
        break;
 8004b1c:	e005      	b.n	8004b2a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8109 	beq.w	8004d44 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d305      	bcc.n	8004b4e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d912      	bls.n	8004b74 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b54:	e0f6      	b.n	8004d44 <UART_SetConfig+0x494>
 8004b56:	bf00      	nop
 8004b58:	efff69f3 	.word	0xefff69f3
 8004b5c:	40008000 	.word	0x40008000
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40004400 	.word	0x40004400
 8004b6c:	40004800 	.word	0x40004800
 8004b70:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2200      	movs	r2, #0
 8004b78:	461c      	mov	r4, r3
 8004b7a:	4615      	mov	r5, r2
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	022b      	lsls	r3, r5, #8
 8004b86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b8a:	0222      	lsls	r2, r4, #8
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	6849      	ldr	r1, [r1, #4]
 8004b90:	0849      	lsrs	r1, r1, #1
 8004b92:	2000      	movs	r0, #0
 8004b94:	4688      	mov	r8, r1
 8004b96:	4681      	mov	r9, r0
 8004b98:	eb12 0a08 	adds.w	sl, r2, r8
 8004b9c:	eb43 0b09 	adc.w	fp, r3, r9
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bae:	4650      	mov	r0, sl
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	f7fb fe9b 	bl	80008ec <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4613      	mov	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc4:	d308      	bcc.n	8004bd8 <UART_SetConfig+0x328>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bcc:	d204      	bcs.n	8004bd8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	e0b5      	b.n	8004d44 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bde:	e0b1      	b.n	8004d44 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	d15d      	bne.n	8004ca6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d827      	bhi.n	8004c42 <UART_SetConfig+0x392>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x348>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c2d 	.word	0x08004c2d
 8004c04:	08004c43 	.word	0x08004c43
 8004c08:	08004c33 	.word	0x08004c33
 8004c0c:	08004c43 	.word	0x08004c43
 8004c10:	08004c43 	.word	0x08004c43
 8004c14:	08004c43 	.word	0x08004c43
 8004c18:	08004c3b 	.word	0x08004c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fe fdaa 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8004c20:	61f8      	str	r0, [r7, #28]
        break;
 8004c22:	e014      	b.n	8004c4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c24:	f7fe fdbc 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8004c28:	61f8      	str	r0, [r7, #28]
        break;
 8004c2a:	e010      	b.n	8004c4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c2c:	4b4c      	ldr	r3, [pc, #304]	; (8004d60 <UART_SetConfig+0x4b0>)
 8004c2e:	61fb      	str	r3, [r7, #28]
        break;
 8004c30:	e00d      	b.n	8004c4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c32:	f7fe fd07 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8004c36:	61f8      	str	r0, [r7, #28]
        break;
 8004c38:	e009      	b.n	8004c4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	61fb      	str	r3, [r7, #28]
        break;
 8004c40:	e005      	b.n	8004c4e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d077      	beq.n	8004d44 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	005a      	lsls	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	441a      	add	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	d916      	bls.n	8004c9e <UART_SetConfig+0x3ee>
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c76:	d212      	bcs.n	8004c9e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f023 030f 	bic.w	r3, r3, #15
 8004c80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	8afb      	ldrh	r3, [r7, #22]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	8afa      	ldrh	r2, [r7, #22]
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	e052      	b.n	8004d44 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ca4:	e04e      	b.n	8004d44 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d827      	bhi.n	8004cfe <UART_SetConfig+0x44e>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x404>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fd4c 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	61f8      	str	r0, [r7, #28]
        break;
 8004cde:	e014      	b.n	8004d0a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7fe fd5e 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	61f8      	str	r0, [r7, #28]
        break;
 8004ce6:	e010      	b.n	8004d0a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <UART_SetConfig+0x4b0>)
 8004cea:	61fb      	str	r3, [r7, #28]
        break;
 8004cec:	e00d      	b.n	8004d0a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fe fca9 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8004cf2:	61f8      	str	r0, [r7, #28]
        break;
 8004cf4:	e009      	b.n	8004d0a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	61fb      	str	r3, [r7, #28]
        break;
 8004cfc:	e005      	b.n	8004d0a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d08:	bf00      	nop
    }

    if (pclk != 0U)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d019      	beq.n	8004d44 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	085a      	lsrs	r2, r3, #1
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	d909      	bls.n	8004d3e <UART_SetConfig+0x48e>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d30:	d205      	bcs.n	8004d3e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
 8004d3c:	e002      	b.n	8004d44 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3728      	adds	r7, #40	; 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d10a      	bne.n	8004e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb8:	f7fc fdfa 	bl	8001ab0 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d10e      	bne.n	8004eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f82d 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e023      	b.n	8004f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d10e      	bne.n	8004f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f817 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e00d      	b.n	8004f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b09c      	sub	sp, #112	; 0x70
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	e0a5      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	f000 80a1 	beq.w	8005098 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fc fdab 	bl	8001ab0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d13e      	bne.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f80:	667b      	str	r3, [r7, #100]	; 0x64
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e6      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e067      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d04f      	beq.n	8005098 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005006:	d147      	bne.n	8005098 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005010:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
 8005032:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e6      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3308      	adds	r3, #8
 800504a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	613b      	str	r3, [r7, #16]
   return(result);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	66bb      	str	r3, [r7, #104]	; 0x68
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3308      	adds	r3, #8
 8005062:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005064:	623a      	str	r2, [r7, #32]
 8005066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	69f9      	ldr	r1, [r7, #28]
 800506a:	6a3a      	ldr	r2, [r7, #32]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	61bb      	str	r3, [r7, #24]
   return(result);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e010      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4013      	ands	r3, r2
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	f43f af4a 	beq.w	8004f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3770      	adds	r7, #112	; 0x70
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <__errno>:
 80050c4:	4b01      	ldr	r3, [pc, #4]	; (80050cc <__errno+0x8>)
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20000010 	.word	0x20000010

080050d0 <__libc_init_array>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4d0d      	ldr	r5, [pc, #52]	; (8005108 <__libc_init_array+0x38>)
 80050d4:	4c0d      	ldr	r4, [pc, #52]	; (800510c <__libc_init_array+0x3c>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	2600      	movs	r6, #0
 80050dc:	42a6      	cmp	r6, r4
 80050de:	d109      	bne.n	80050f4 <__libc_init_array+0x24>
 80050e0:	4d0b      	ldr	r5, [pc, #44]	; (8005110 <__libc_init_array+0x40>)
 80050e2:	4c0c      	ldr	r4, [pc, #48]	; (8005114 <__libc_init_array+0x44>)
 80050e4:	f000 fc8e 	bl	8005a04 <_init>
 80050e8:	1b64      	subs	r4, r4, r5
 80050ea:	10a4      	asrs	r4, r4, #2
 80050ec:	2600      	movs	r6, #0
 80050ee:	42a6      	cmp	r6, r4
 80050f0:	d105      	bne.n	80050fe <__libc_init_array+0x2e>
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f8:	4798      	blx	r3
 80050fa:	3601      	adds	r6, #1
 80050fc:	e7ee      	b.n	80050dc <__libc_init_array+0xc>
 80050fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005102:	4798      	blx	r3
 8005104:	3601      	adds	r6, #1
 8005106:	e7f2      	b.n	80050ee <__libc_init_array+0x1e>
 8005108:	08005b54 	.word	0x08005b54
 800510c:	08005b54 	.word	0x08005b54
 8005110:	08005b54 	.word	0x08005b54
 8005114:	08005b58 	.word	0x08005b58

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <siprintf>:
 8005128:	b40e      	push	{r1, r2, r3}
 800512a:	b500      	push	{lr}
 800512c:	b09c      	sub	sp, #112	; 0x70
 800512e:	ab1d      	add	r3, sp, #116	; 0x74
 8005130:	9002      	str	r0, [sp, #8]
 8005132:	9006      	str	r0, [sp, #24]
 8005134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005138:	4809      	ldr	r0, [pc, #36]	; (8005160 <siprintf+0x38>)
 800513a:	9107      	str	r1, [sp, #28]
 800513c:	9104      	str	r1, [sp, #16]
 800513e:	4909      	ldr	r1, [pc, #36]	; (8005164 <siprintf+0x3c>)
 8005140:	f853 2b04 	ldr.w	r2, [r3], #4
 8005144:	9105      	str	r1, [sp, #20]
 8005146:	6800      	ldr	r0, [r0, #0]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	a902      	add	r1, sp, #8
 800514c:	f000 f868 	bl	8005220 <_svfiprintf_r>
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	b01c      	add	sp, #112	; 0x70
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b003      	add	sp, #12
 800515e:	4770      	bx	lr
 8005160:	20000010 	.word	0x20000010
 8005164:	ffff0208 	.word	0xffff0208

08005168 <__ssputs_r>:
 8005168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	688e      	ldr	r6, [r1, #8]
 800516e:	429e      	cmp	r6, r3
 8005170:	4682      	mov	sl, r0
 8005172:	460c      	mov	r4, r1
 8005174:	4690      	mov	r8, r2
 8005176:	461f      	mov	r7, r3
 8005178:	d838      	bhi.n	80051ec <__ssputs_r+0x84>
 800517a:	898a      	ldrh	r2, [r1, #12]
 800517c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005180:	d032      	beq.n	80051e8 <__ssputs_r+0x80>
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	6909      	ldr	r1, [r1, #16]
 8005186:	eba5 0901 	sub.w	r9, r5, r1
 800518a:	6965      	ldr	r5, [r4, #20]
 800518c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005194:	3301      	adds	r3, #1
 8005196:	444b      	add	r3, r9
 8005198:	106d      	asrs	r5, r5, #1
 800519a:	429d      	cmp	r5, r3
 800519c:	bf38      	it	cc
 800519e:	461d      	movcc	r5, r3
 80051a0:	0553      	lsls	r3, r2, #21
 80051a2:	d531      	bpl.n	8005208 <__ssputs_r+0xa0>
 80051a4:	4629      	mov	r1, r5
 80051a6:	f000 fb63 	bl	8005870 <_malloc_r>
 80051aa:	4606      	mov	r6, r0
 80051ac:	b950      	cbnz	r0, 80051c4 <__ssputs_r+0x5c>
 80051ae:	230c      	movs	r3, #12
 80051b0:	f8ca 3000 	str.w	r3, [sl]
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c4:	6921      	ldr	r1, [r4, #16]
 80051c6:	464a      	mov	r2, r9
 80051c8:	f000 fabe 	bl	8005748 <memcpy>
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d6:	81a3      	strh	r3, [r4, #12]
 80051d8:	6126      	str	r6, [r4, #16]
 80051da:	6165      	str	r5, [r4, #20]
 80051dc:	444e      	add	r6, r9
 80051de:	eba5 0509 	sub.w	r5, r5, r9
 80051e2:	6026      	str	r6, [r4, #0]
 80051e4:	60a5      	str	r5, [r4, #8]
 80051e6:	463e      	mov	r6, r7
 80051e8:	42be      	cmp	r6, r7
 80051ea:	d900      	bls.n	80051ee <__ssputs_r+0x86>
 80051ec:	463e      	mov	r6, r7
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	4632      	mov	r2, r6
 80051f2:	4641      	mov	r1, r8
 80051f4:	f000 fab6 	bl	8005764 <memmove>
 80051f8:	68a3      	ldr	r3, [r4, #8]
 80051fa:	1b9b      	subs	r3, r3, r6
 80051fc:	60a3      	str	r3, [r4, #8]
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	4433      	add	r3, r6
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	2000      	movs	r0, #0
 8005206:	e7db      	b.n	80051c0 <__ssputs_r+0x58>
 8005208:	462a      	mov	r2, r5
 800520a:	f000 fba5 	bl	8005958 <_realloc_r>
 800520e:	4606      	mov	r6, r0
 8005210:	2800      	cmp	r0, #0
 8005212:	d1e1      	bne.n	80051d8 <__ssputs_r+0x70>
 8005214:	6921      	ldr	r1, [r4, #16]
 8005216:	4650      	mov	r0, sl
 8005218:	f000 fabe 	bl	8005798 <_free_r>
 800521c:	e7c7      	b.n	80051ae <__ssputs_r+0x46>
	...

08005220 <_svfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	4698      	mov	r8, r3
 8005226:	898b      	ldrh	r3, [r1, #12]
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	b09d      	sub	sp, #116	; 0x74
 800522c:	4607      	mov	r7, r0
 800522e:	460d      	mov	r5, r1
 8005230:	4614      	mov	r4, r2
 8005232:	d50e      	bpl.n	8005252 <_svfiprintf_r+0x32>
 8005234:	690b      	ldr	r3, [r1, #16]
 8005236:	b963      	cbnz	r3, 8005252 <_svfiprintf_r+0x32>
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	f000 fb19 	bl	8005870 <_malloc_r>
 800523e:	6028      	str	r0, [r5, #0]
 8005240:	6128      	str	r0, [r5, #16]
 8005242:	b920      	cbnz	r0, 800524e <_svfiprintf_r+0x2e>
 8005244:	230c      	movs	r3, #12
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	e0d1      	b.n	80053f2 <_svfiprintf_r+0x1d2>
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	616b      	str	r3, [r5, #20]
 8005252:	2300      	movs	r3, #0
 8005254:	9309      	str	r3, [sp, #36]	; 0x24
 8005256:	2320      	movs	r3, #32
 8005258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800525c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005260:	2330      	movs	r3, #48	; 0x30
 8005262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800540c <_svfiprintf_r+0x1ec>
 8005266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800526a:	f04f 0901 	mov.w	r9, #1
 800526e:	4623      	mov	r3, r4
 8005270:	469a      	mov	sl, r3
 8005272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005276:	b10a      	cbz	r2, 800527c <_svfiprintf_r+0x5c>
 8005278:	2a25      	cmp	r2, #37	; 0x25
 800527a:	d1f9      	bne.n	8005270 <_svfiprintf_r+0x50>
 800527c:	ebba 0b04 	subs.w	fp, sl, r4
 8005280:	d00b      	beq.n	800529a <_svfiprintf_r+0x7a>
 8005282:	465b      	mov	r3, fp
 8005284:	4622      	mov	r2, r4
 8005286:	4629      	mov	r1, r5
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff6d 	bl	8005168 <__ssputs_r>
 800528e:	3001      	adds	r0, #1
 8005290:	f000 80aa 	beq.w	80053e8 <_svfiprintf_r+0x1c8>
 8005294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005296:	445a      	add	r2, fp
 8005298:	9209      	str	r2, [sp, #36]	; 0x24
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a2 	beq.w	80053e8 <_svfiprintf_r+0x1c8>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ae:	f10a 0a01 	add.w	sl, sl, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	9307      	str	r3, [sp, #28]
 80052b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ba:	931a      	str	r3, [sp, #104]	; 0x68
 80052bc:	4654      	mov	r4, sl
 80052be:	2205      	movs	r2, #5
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	4851      	ldr	r0, [pc, #324]	; (800540c <_svfiprintf_r+0x1ec>)
 80052c6:	f7fa ff8b 	bl	80001e0 <memchr>
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	b9d8      	cbnz	r0, 8005306 <_svfiprintf_r+0xe6>
 80052ce:	06d0      	lsls	r0, r2, #27
 80052d0:	bf44      	itt	mi
 80052d2:	2320      	movmi	r3, #32
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d8:	0711      	lsls	r1, r2, #28
 80052da:	bf44      	itt	mi
 80052dc:	232b      	movmi	r3, #43	; 0x2b
 80052de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e2:	f89a 3000 	ldrb.w	r3, [sl]
 80052e6:	2b2a      	cmp	r3, #42	; 0x2a
 80052e8:	d015      	beq.n	8005316 <_svfiprintf_r+0xf6>
 80052ea:	9a07      	ldr	r2, [sp, #28]
 80052ec:	4654      	mov	r4, sl
 80052ee:	2000      	movs	r0, #0
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4621      	mov	r1, r4
 80052f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fa:	3b30      	subs	r3, #48	; 0x30
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	d94e      	bls.n	800539e <_svfiprintf_r+0x17e>
 8005300:	b1b0      	cbz	r0, 8005330 <_svfiprintf_r+0x110>
 8005302:	9207      	str	r2, [sp, #28]
 8005304:	e014      	b.n	8005330 <_svfiprintf_r+0x110>
 8005306:	eba0 0308 	sub.w	r3, r0, r8
 800530a:	fa09 f303 	lsl.w	r3, r9, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	46a2      	mov	sl, r4
 8005314:	e7d2      	b.n	80052bc <_svfiprintf_r+0x9c>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	9103      	str	r1, [sp, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfbb      	ittet	lt
 8005322:	425b      	neglt	r3, r3
 8005324:	f042 0202 	orrlt.w	r2, r2, #2
 8005328:	9307      	strge	r3, [sp, #28]
 800532a:	9307      	strlt	r3, [sp, #28]
 800532c:	bfb8      	it	lt
 800532e:	9204      	strlt	r2, [sp, #16]
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	2b2e      	cmp	r3, #46	; 0x2e
 8005334:	d10c      	bne.n	8005350 <_svfiprintf_r+0x130>
 8005336:	7863      	ldrb	r3, [r4, #1]
 8005338:	2b2a      	cmp	r3, #42	; 0x2a
 800533a:	d135      	bne.n	80053a8 <_svfiprintf_r+0x188>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	9203      	str	r2, [sp, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	bfb8      	it	lt
 8005348:	f04f 33ff 	movlt.w	r3, #4294967295
 800534c:	3402      	adds	r4, #2
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800541c <_svfiprintf_r+0x1fc>
 8005354:	7821      	ldrb	r1, [r4, #0]
 8005356:	2203      	movs	r2, #3
 8005358:	4650      	mov	r0, sl
 800535a:	f7fa ff41 	bl	80001e0 <memchr>
 800535e:	b140      	cbz	r0, 8005372 <_svfiprintf_r+0x152>
 8005360:	2340      	movs	r3, #64	; 0x40
 8005362:	eba0 000a 	sub.w	r0, r0, sl
 8005366:	fa03 f000 	lsl.w	r0, r3, r0
 800536a:	9b04      	ldr	r3, [sp, #16]
 800536c:	4303      	orrs	r3, r0
 800536e:	3401      	adds	r4, #1
 8005370:	9304      	str	r3, [sp, #16]
 8005372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005376:	4826      	ldr	r0, [pc, #152]	; (8005410 <_svfiprintf_r+0x1f0>)
 8005378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537c:	2206      	movs	r2, #6
 800537e:	f7fa ff2f 	bl	80001e0 <memchr>
 8005382:	2800      	cmp	r0, #0
 8005384:	d038      	beq.n	80053f8 <_svfiprintf_r+0x1d8>
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <_svfiprintf_r+0x1f4>)
 8005388:	bb1b      	cbnz	r3, 80053d2 <_svfiprintf_r+0x1b2>
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	3307      	adds	r3, #7
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	3308      	adds	r3, #8
 8005394:	9303      	str	r3, [sp, #12]
 8005396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005398:	4433      	add	r3, r6
 800539a:	9309      	str	r3, [sp, #36]	; 0x24
 800539c:	e767      	b.n	800526e <_svfiprintf_r+0x4e>
 800539e:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a2:	460c      	mov	r4, r1
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7a5      	b.n	80052f4 <_svfiprintf_r+0xd4>
 80053a8:	2300      	movs	r3, #0
 80053aa:	3401      	adds	r4, #1
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	4619      	mov	r1, r3
 80053b0:	f04f 0c0a 	mov.w	ip, #10
 80053b4:	4620      	mov	r0, r4
 80053b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ba:	3a30      	subs	r2, #48	; 0x30
 80053bc:	2a09      	cmp	r2, #9
 80053be:	d903      	bls.n	80053c8 <_svfiprintf_r+0x1a8>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0c5      	beq.n	8005350 <_svfiprintf_r+0x130>
 80053c4:	9105      	str	r1, [sp, #20]
 80053c6:	e7c3      	b.n	8005350 <_svfiprintf_r+0x130>
 80053c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053cc:	4604      	mov	r4, r0
 80053ce:	2301      	movs	r3, #1
 80053d0:	e7f0      	b.n	80053b4 <_svfiprintf_r+0x194>
 80053d2:	ab03      	add	r3, sp, #12
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	462a      	mov	r2, r5
 80053d8:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <_svfiprintf_r+0x1f8>)
 80053da:	a904      	add	r1, sp, #16
 80053dc:	4638      	mov	r0, r7
 80053de:	f3af 8000 	nop.w
 80053e2:	1c42      	adds	r2, r0, #1
 80053e4:	4606      	mov	r6, r0
 80053e6:	d1d6      	bne.n	8005396 <_svfiprintf_r+0x176>
 80053e8:	89ab      	ldrh	r3, [r5, #12]
 80053ea:	065b      	lsls	r3, r3, #25
 80053ec:	f53f af2c 	bmi.w	8005248 <_svfiprintf_r+0x28>
 80053f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f2:	b01d      	add	sp, #116	; 0x74
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	ab03      	add	r3, sp, #12
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <_svfiprintf_r+0x1f8>)
 8005400:	a904      	add	r1, sp, #16
 8005402:	4638      	mov	r0, r7
 8005404:	f000 f87a 	bl	80054fc <_printf_i>
 8005408:	e7eb      	b.n	80053e2 <_svfiprintf_r+0x1c2>
 800540a:	bf00      	nop
 800540c:	08005b18 	.word	0x08005b18
 8005410:	08005b22 	.word	0x08005b22
 8005414:	00000000 	.word	0x00000000
 8005418:	08005169 	.word	0x08005169
 800541c:	08005b1e 	.word	0x08005b1e

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	4699      	mov	r9, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005430:	4293      	cmp	r3, r2
 8005432:	bfb8      	it	lt
 8005434:	4613      	movlt	r3, r2
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800543c:	4607      	mov	r7, r0
 800543e:	460c      	mov	r4, r1
 8005440:	b10a      	cbz	r2, 8005446 <_printf_common+0x26>
 8005442:	3301      	adds	r3, #1
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	6833      	ldrmi	r3, [r6, #0]
 800544e:	3302      	addmi	r3, #2
 8005450:	6033      	strmi	r3, [r6, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	f015 0506 	ands.w	r5, r5, #6
 8005458:	d106      	bne.n	8005468 <_printf_common+0x48>
 800545a:	f104 0a19 	add.w	sl, r4, #25
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	42ab      	cmp	r3, r5
 8005466:	dc26      	bgt.n	80054b6 <_printf_common+0x96>
 8005468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800546c:	1e13      	subs	r3, r2, #0
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	bf18      	it	ne
 8005472:	2301      	movne	r3, #1
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d42b      	bmi.n	80054d0 <_printf_common+0xb0>
 8005478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547c:	4649      	mov	r1, r9
 800547e:	4638      	mov	r0, r7
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d01e      	beq.n	80054c4 <_printf_common+0xa4>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	68e5      	ldr	r5, [r4, #12]
 800548a:	6832      	ldr	r2, [r6, #0]
 800548c:	f003 0306 	and.w	r3, r3, #6
 8005490:	2b04      	cmp	r3, #4
 8005492:	bf08      	it	eq
 8005494:	1aad      	subeq	r5, r5, r2
 8005496:	68a3      	ldr	r3, [r4, #8]
 8005498:	6922      	ldr	r2, [r4, #16]
 800549a:	bf0c      	ite	eq
 800549c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a0:	2500      	movne	r5, #0
 80054a2:	4293      	cmp	r3, r2
 80054a4:	bfc4      	itt	gt
 80054a6:	1a9b      	subgt	r3, r3, r2
 80054a8:	18ed      	addgt	r5, r5, r3
 80054aa:	2600      	movs	r6, #0
 80054ac:	341a      	adds	r4, #26
 80054ae:	42b5      	cmp	r5, r6
 80054b0:	d11a      	bne.n	80054e8 <_printf_common+0xc8>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e008      	b.n	80054c8 <_printf_common+0xa8>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	4649      	mov	r1, r9
 80054bc:	4638      	mov	r0, r7
 80054be:	47c0      	blx	r8
 80054c0:	3001      	adds	r0, #1
 80054c2:	d103      	bne.n	80054cc <_printf_common+0xac>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	3501      	adds	r5, #1
 80054ce:	e7c6      	b.n	800545e <_printf_common+0x3e>
 80054d0:	18e1      	adds	r1, r4, r3
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	2030      	movs	r0, #48	; 0x30
 80054d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054da:	4422      	add	r2, r4
 80054dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054e4:	3302      	adds	r3, #2
 80054e6:	e7c7      	b.n	8005478 <_printf_common+0x58>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4622      	mov	r2, r4
 80054ec:	4649      	mov	r1, r9
 80054ee:	4638      	mov	r0, r7
 80054f0:	47c0      	blx	r8
 80054f2:	3001      	adds	r0, #1
 80054f4:	d0e6      	beq.n	80054c4 <_printf_common+0xa4>
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7d9      	b.n	80054ae <_printf_common+0x8e>
	...

080054fc <_printf_i>:
 80054fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	7e0f      	ldrb	r7, [r1, #24]
 8005502:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005504:	2f78      	cmp	r7, #120	; 0x78
 8005506:	4691      	mov	r9, r2
 8005508:	4680      	mov	r8, r0
 800550a:	460c      	mov	r4, r1
 800550c:	469a      	mov	sl, r3
 800550e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005512:	d807      	bhi.n	8005524 <_printf_i+0x28>
 8005514:	2f62      	cmp	r7, #98	; 0x62
 8005516:	d80a      	bhi.n	800552e <_printf_i+0x32>
 8005518:	2f00      	cmp	r7, #0
 800551a:	f000 80d8 	beq.w	80056ce <_printf_i+0x1d2>
 800551e:	2f58      	cmp	r7, #88	; 0x58
 8005520:	f000 80a3 	beq.w	800566a <_printf_i+0x16e>
 8005524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800552c:	e03a      	b.n	80055a4 <_printf_i+0xa8>
 800552e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005532:	2b15      	cmp	r3, #21
 8005534:	d8f6      	bhi.n	8005524 <_printf_i+0x28>
 8005536:	a101      	add	r1, pc, #4	; (adr r1, 800553c <_printf_i+0x40>)
 8005538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800553c:	08005595 	.word	0x08005595
 8005540:	080055a9 	.word	0x080055a9
 8005544:	08005525 	.word	0x08005525
 8005548:	08005525 	.word	0x08005525
 800554c:	08005525 	.word	0x08005525
 8005550:	08005525 	.word	0x08005525
 8005554:	080055a9 	.word	0x080055a9
 8005558:	08005525 	.word	0x08005525
 800555c:	08005525 	.word	0x08005525
 8005560:	08005525 	.word	0x08005525
 8005564:	08005525 	.word	0x08005525
 8005568:	080056b5 	.word	0x080056b5
 800556c:	080055d9 	.word	0x080055d9
 8005570:	08005697 	.word	0x08005697
 8005574:	08005525 	.word	0x08005525
 8005578:	08005525 	.word	0x08005525
 800557c:	080056d7 	.word	0x080056d7
 8005580:	08005525 	.word	0x08005525
 8005584:	080055d9 	.word	0x080055d9
 8005588:	08005525 	.word	0x08005525
 800558c:	08005525 	.word	0x08005525
 8005590:	0800569f 	.word	0x0800569f
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	1d1a      	adds	r2, r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	602a      	str	r2, [r5, #0]
 800559c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0a3      	b.n	80056f0 <_printf_i+0x1f4>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	6829      	ldr	r1, [r5, #0]
 80055ac:	0606      	lsls	r6, r0, #24
 80055ae:	f101 0304 	add.w	r3, r1, #4
 80055b2:	d50a      	bpl.n	80055ca <_printf_i+0xce>
 80055b4:	680e      	ldr	r6, [r1, #0]
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	2e00      	cmp	r6, #0
 80055ba:	da03      	bge.n	80055c4 <_printf_i+0xc8>
 80055bc:	232d      	movs	r3, #45	; 0x2d
 80055be:	4276      	negs	r6, r6
 80055c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c4:	485e      	ldr	r0, [pc, #376]	; (8005740 <_printf_i+0x244>)
 80055c6:	230a      	movs	r3, #10
 80055c8:	e019      	b.n	80055fe <_printf_i+0x102>
 80055ca:	680e      	ldr	r6, [r1, #0]
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055d2:	bf18      	it	ne
 80055d4:	b236      	sxthne	r6, r6
 80055d6:	e7ef      	b.n	80055b8 <_printf_i+0xbc>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	1d19      	adds	r1, r3, #4
 80055de:	6029      	str	r1, [r5, #0]
 80055e0:	0601      	lsls	r1, r0, #24
 80055e2:	d501      	bpl.n	80055e8 <_printf_i+0xec>
 80055e4:	681e      	ldr	r6, [r3, #0]
 80055e6:	e002      	b.n	80055ee <_printf_i+0xf2>
 80055e8:	0646      	lsls	r6, r0, #25
 80055ea:	d5fb      	bpl.n	80055e4 <_printf_i+0xe8>
 80055ec:	881e      	ldrh	r6, [r3, #0]
 80055ee:	4854      	ldr	r0, [pc, #336]	; (8005740 <_printf_i+0x244>)
 80055f0:	2f6f      	cmp	r7, #111	; 0x6f
 80055f2:	bf0c      	ite	eq
 80055f4:	2308      	moveq	r3, #8
 80055f6:	230a      	movne	r3, #10
 80055f8:	2100      	movs	r1, #0
 80055fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055fe:	6865      	ldr	r5, [r4, #4]
 8005600:	60a5      	str	r5, [r4, #8]
 8005602:	2d00      	cmp	r5, #0
 8005604:	bfa2      	ittt	ge
 8005606:	6821      	ldrge	r1, [r4, #0]
 8005608:	f021 0104 	bicge.w	r1, r1, #4
 800560c:	6021      	strge	r1, [r4, #0]
 800560e:	b90e      	cbnz	r6, 8005614 <_printf_i+0x118>
 8005610:	2d00      	cmp	r5, #0
 8005612:	d04d      	beq.n	80056b0 <_printf_i+0x1b4>
 8005614:	4615      	mov	r5, r2
 8005616:	fbb6 f1f3 	udiv	r1, r6, r3
 800561a:	fb03 6711 	mls	r7, r3, r1, r6
 800561e:	5dc7      	ldrb	r7, [r0, r7]
 8005620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005624:	4637      	mov	r7, r6
 8005626:	42bb      	cmp	r3, r7
 8005628:	460e      	mov	r6, r1
 800562a:	d9f4      	bls.n	8005616 <_printf_i+0x11a>
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10b      	bne.n	8005648 <_printf_i+0x14c>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07de      	lsls	r6, r3, #31
 8005634:	d508      	bpl.n	8005648 <_printf_i+0x14c>
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6861      	ldr	r1, [r4, #4]
 800563a:	4299      	cmp	r1, r3
 800563c:	bfde      	ittt	le
 800563e:	2330      	movle	r3, #48	; 0x30
 8005640:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005644:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005648:	1b52      	subs	r2, r2, r5
 800564a:	6122      	str	r2, [r4, #16]
 800564c:	f8cd a000 	str.w	sl, [sp]
 8005650:	464b      	mov	r3, r9
 8005652:	aa03      	add	r2, sp, #12
 8005654:	4621      	mov	r1, r4
 8005656:	4640      	mov	r0, r8
 8005658:	f7ff fee2 	bl	8005420 <_printf_common>
 800565c:	3001      	adds	r0, #1
 800565e:	d14c      	bne.n	80056fa <_printf_i+0x1fe>
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	b004      	add	sp, #16
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	4835      	ldr	r0, [pc, #212]	; (8005740 <_printf_i+0x244>)
 800566c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f851 6b04 	ldr.w	r6, [r1], #4
 8005678:	6029      	str	r1, [r5, #0]
 800567a:	061d      	lsls	r5, r3, #24
 800567c:	d514      	bpl.n	80056a8 <_printf_i+0x1ac>
 800567e:	07df      	lsls	r7, r3, #31
 8005680:	bf44      	itt	mi
 8005682:	f043 0320 	orrmi.w	r3, r3, #32
 8005686:	6023      	strmi	r3, [r4, #0]
 8005688:	b91e      	cbnz	r6, 8005692 <_printf_i+0x196>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	f023 0320 	bic.w	r3, r3, #32
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	2310      	movs	r3, #16
 8005694:	e7b0      	b.n	80055f8 <_printf_i+0xfc>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f043 0320 	orr.w	r3, r3, #32
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	2378      	movs	r3, #120	; 0x78
 80056a0:	4828      	ldr	r0, [pc, #160]	; (8005744 <_printf_i+0x248>)
 80056a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056a6:	e7e3      	b.n	8005670 <_printf_i+0x174>
 80056a8:	0659      	lsls	r1, r3, #25
 80056aa:	bf48      	it	mi
 80056ac:	b2b6      	uxthmi	r6, r6
 80056ae:	e7e6      	b.n	800567e <_printf_i+0x182>
 80056b0:	4615      	mov	r5, r2
 80056b2:	e7bb      	b.n	800562c <_printf_i+0x130>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	6826      	ldr	r6, [r4, #0]
 80056b8:	6961      	ldr	r1, [r4, #20]
 80056ba:	1d18      	adds	r0, r3, #4
 80056bc:	6028      	str	r0, [r5, #0]
 80056be:	0635      	lsls	r5, r6, #24
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	d501      	bpl.n	80056c8 <_printf_i+0x1cc>
 80056c4:	6019      	str	r1, [r3, #0]
 80056c6:	e002      	b.n	80056ce <_printf_i+0x1d2>
 80056c8:	0670      	lsls	r0, r6, #25
 80056ca:	d5fb      	bpl.n	80056c4 <_printf_i+0x1c8>
 80056cc:	8019      	strh	r1, [r3, #0]
 80056ce:	2300      	movs	r3, #0
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	4615      	mov	r5, r2
 80056d4:	e7ba      	b.n	800564c <_printf_i+0x150>
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	1d1a      	adds	r2, r3, #4
 80056da:	602a      	str	r2, [r5, #0]
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	6862      	ldr	r2, [r4, #4]
 80056e0:	2100      	movs	r1, #0
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7fa fd7c 	bl	80001e0 <memchr>
 80056e8:	b108      	cbz	r0, 80056ee <_printf_i+0x1f2>
 80056ea:	1b40      	subs	r0, r0, r5
 80056ec:	6060      	str	r0, [r4, #4]
 80056ee:	6863      	ldr	r3, [r4, #4]
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	2300      	movs	r3, #0
 80056f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f8:	e7a8      	b.n	800564c <_printf_i+0x150>
 80056fa:	6923      	ldr	r3, [r4, #16]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	47d0      	blx	sl
 8005704:	3001      	adds	r0, #1
 8005706:	d0ab      	beq.n	8005660 <_printf_i+0x164>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	079b      	lsls	r3, r3, #30
 800570c:	d413      	bmi.n	8005736 <_printf_i+0x23a>
 800570e:	68e0      	ldr	r0, [r4, #12]
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	4298      	cmp	r0, r3
 8005714:	bfb8      	it	lt
 8005716:	4618      	movlt	r0, r3
 8005718:	e7a4      	b.n	8005664 <_printf_i+0x168>
 800571a:	2301      	movs	r3, #1
 800571c:	4632      	mov	r2, r6
 800571e:	4649      	mov	r1, r9
 8005720:	4640      	mov	r0, r8
 8005722:	47d0      	blx	sl
 8005724:	3001      	adds	r0, #1
 8005726:	d09b      	beq.n	8005660 <_printf_i+0x164>
 8005728:	3501      	adds	r5, #1
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	9903      	ldr	r1, [sp, #12]
 800572e:	1a5b      	subs	r3, r3, r1
 8005730:	42ab      	cmp	r3, r5
 8005732:	dcf2      	bgt.n	800571a <_printf_i+0x21e>
 8005734:	e7eb      	b.n	800570e <_printf_i+0x212>
 8005736:	2500      	movs	r5, #0
 8005738:	f104 0619 	add.w	r6, r4, #25
 800573c:	e7f5      	b.n	800572a <_printf_i+0x22e>
 800573e:	bf00      	nop
 8005740:	08005b29 	.word	0x08005b29
 8005744:	08005b3a 	.word	0x08005b3a

08005748 <memcpy>:
 8005748:	440a      	add	r2, r1
 800574a:	4291      	cmp	r1, r2
 800574c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005750:	d100      	bne.n	8005754 <memcpy+0xc>
 8005752:	4770      	bx	lr
 8005754:	b510      	push	{r4, lr}
 8005756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575e:	4291      	cmp	r1, r2
 8005760:	d1f9      	bne.n	8005756 <memcpy+0xe>
 8005762:	bd10      	pop	{r4, pc}

08005764 <memmove>:
 8005764:	4288      	cmp	r0, r1
 8005766:	b510      	push	{r4, lr}
 8005768:	eb01 0402 	add.w	r4, r1, r2
 800576c:	d902      	bls.n	8005774 <memmove+0x10>
 800576e:	4284      	cmp	r4, r0
 8005770:	4623      	mov	r3, r4
 8005772:	d807      	bhi.n	8005784 <memmove+0x20>
 8005774:	1e43      	subs	r3, r0, #1
 8005776:	42a1      	cmp	r1, r4
 8005778:	d008      	beq.n	800578c <memmove+0x28>
 800577a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005782:	e7f8      	b.n	8005776 <memmove+0x12>
 8005784:	4402      	add	r2, r0
 8005786:	4601      	mov	r1, r0
 8005788:	428a      	cmp	r2, r1
 800578a:	d100      	bne.n	800578e <memmove+0x2a>
 800578c:	bd10      	pop	{r4, pc}
 800578e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005796:	e7f7      	b.n	8005788 <memmove+0x24>

08005798 <_free_r>:
 8005798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800579a:	2900      	cmp	r1, #0
 800579c:	d044      	beq.n	8005828 <_free_r+0x90>
 800579e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a2:	9001      	str	r0, [sp, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f1a1 0404 	sub.w	r4, r1, #4
 80057aa:	bfb8      	it	lt
 80057ac:	18e4      	addlt	r4, r4, r3
 80057ae:	f000 f913 	bl	80059d8 <__malloc_lock>
 80057b2:	4a1e      	ldr	r2, [pc, #120]	; (800582c <_free_r+0x94>)
 80057b4:	9801      	ldr	r0, [sp, #4]
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	b933      	cbnz	r3, 80057c8 <_free_r+0x30>
 80057ba:	6063      	str	r3, [r4, #4]
 80057bc:	6014      	str	r4, [r2, #0]
 80057be:	b003      	add	sp, #12
 80057c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c4:	f000 b90e 	b.w	80059e4 <__malloc_unlock>
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d908      	bls.n	80057de <_free_r+0x46>
 80057cc:	6825      	ldr	r5, [r4, #0]
 80057ce:	1961      	adds	r1, r4, r5
 80057d0:	428b      	cmp	r3, r1
 80057d2:	bf01      	itttt	eq
 80057d4:	6819      	ldreq	r1, [r3, #0]
 80057d6:	685b      	ldreq	r3, [r3, #4]
 80057d8:	1949      	addeq	r1, r1, r5
 80057da:	6021      	streq	r1, [r4, #0]
 80057dc:	e7ed      	b.n	80057ba <_free_r+0x22>
 80057de:	461a      	mov	r2, r3
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b10b      	cbz	r3, 80057e8 <_free_r+0x50>
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	d9fa      	bls.n	80057de <_free_r+0x46>
 80057e8:	6811      	ldr	r1, [r2, #0]
 80057ea:	1855      	adds	r5, r2, r1
 80057ec:	42a5      	cmp	r5, r4
 80057ee:	d10b      	bne.n	8005808 <_free_r+0x70>
 80057f0:	6824      	ldr	r4, [r4, #0]
 80057f2:	4421      	add	r1, r4
 80057f4:	1854      	adds	r4, r2, r1
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	6011      	str	r1, [r2, #0]
 80057fa:	d1e0      	bne.n	80057be <_free_r+0x26>
 80057fc:	681c      	ldr	r4, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	6053      	str	r3, [r2, #4]
 8005802:	4421      	add	r1, r4
 8005804:	6011      	str	r1, [r2, #0]
 8005806:	e7da      	b.n	80057be <_free_r+0x26>
 8005808:	d902      	bls.n	8005810 <_free_r+0x78>
 800580a:	230c      	movs	r3, #12
 800580c:	6003      	str	r3, [r0, #0]
 800580e:	e7d6      	b.n	80057be <_free_r+0x26>
 8005810:	6825      	ldr	r5, [r4, #0]
 8005812:	1961      	adds	r1, r4, r5
 8005814:	428b      	cmp	r3, r1
 8005816:	bf04      	itt	eq
 8005818:	6819      	ldreq	r1, [r3, #0]
 800581a:	685b      	ldreq	r3, [r3, #4]
 800581c:	6063      	str	r3, [r4, #4]
 800581e:	bf04      	itt	eq
 8005820:	1949      	addeq	r1, r1, r5
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	6054      	str	r4, [r2, #4]
 8005826:	e7ca      	b.n	80057be <_free_r+0x26>
 8005828:	b003      	add	sp, #12
 800582a:	bd30      	pop	{r4, r5, pc}
 800582c:	200001e0 	.word	0x200001e0

08005830 <sbrk_aligned>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4e0e      	ldr	r6, [pc, #56]	; (800586c <sbrk_aligned+0x3c>)
 8005834:	460c      	mov	r4, r1
 8005836:	6831      	ldr	r1, [r6, #0]
 8005838:	4605      	mov	r5, r0
 800583a:	b911      	cbnz	r1, 8005842 <sbrk_aligned+0x12>
 800583c:	f000 f8bc 	bl	80059b8 <_sbrk_r>
 8005840:	6030      	str	r0, [r6, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	4628      	mov	r0, r5
 8005846:	f000 f8b7 	bl	80059b8 <_sbrk_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	d00a      	beq.n	8005864 <sbrk_aligned+0x34>
 800584e:	1cc4      	adds	r4, r0, #3
 8005850:	f024 0403 	bic.w	r4, r4, #3
 8005854:	42a0      	cmp	r0, r4
 8005856:	d007      	beq.n	8005868 <sbrk_aligned+0x38>
 8005858:	1a21      	subs	r1, r4, r0
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f8ac 	bl	80059b8 <_sbrk_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d101      	bne.n	8005868 <sbrk_aligned+0x38>
 8005864:	f04f 34ff 	mov.w	r4, #4294967295
 8005868:	4620      	mov	r0, r4
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	200001e4 	.word	0x200001e4

08005870 <_malloc_r>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	1ccd      	adds	r5, r1, #3
 8005876:	f025 0503 	bic.w	r5, r5, #3
 800587a:	3508      	adds	r5, #8
 800587c:	2d0c      	cmp	r5, #12
 800587e:	bf38      	it	cc
 8005880:	250c      	movcc	r5, #12
 8005882:	2d00      	cmp	r5, #0
 8005884:	4607      	mov	r7, r0
 8005886:	db01      	blt.n	800588c <_malloc_r+0x1c>
 8005888:	42a9      	cmp	r1, r5
 800588a:	d905      	bls.n	8005898 <_malloc_r+0x28>
 800588c:	230c      	movs	r3, #12
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	2600      	movs	r6, #0
 8005892:	4630      	mov	r0, r6
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	4e2e      	ldr	r6, [pc, #184]	; (8005954 <_malloc_r+0xe4>)
 800589a:	f000 f89d 	bl	80059d8 <__malloc_lock>
 800589e:	6833      	ldr	r3, [r6, #0]
 80058a0:	461c      	mov	r4, r3
 80058a2:	bb34      	cbnz	r4, 80058f2 <_malloc_r+0x82>
 80058a4:	4629      	mov	r1, r5
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7ff ffc2 	bl	8005830 <sbrk_aligned>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	4604      	mov	r4, r0
 80058b0:	d14d      	bne.n	800594e <_malloc_r+0xde>
 80058b2:	6834      	ldr	r4, [r6, #0]
 80058b4:	4626      	mov	r6, r4
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d140      	bne.n	800593c <_malloc_r+0xcc>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4631      	mov	r1, r6
 80058be:	4638      	mov	r0, r7
 80058c0:	eb04 0803 	add.w	r8, r4, r3
 80058c4:	f000 f878 	bl	80059b8 <_sbrk_r>
 80058c8:	4580      	cmp	r8, r0
 80058ca:	d13a      	bne.n	8005942 <_malloc_r+0xd2>
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	3503      	adds	r5, #3
 80058d0:	1a6d      	subs	r5, r5, r1
 80058d2:	f025 0503 	bic.w	r5, r5, #3
 80058d6:	3508      	adds	r5, #8
 80058d8:	2d0c      	cmp	r5, #12
 80058da:	bf38      	it	cc
 80058dc:	250c      	movcc	r5, #12
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ffa5 	bl	8005830 <sbrk_aligned>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d02b      	beq.n	8005942 <_malloc_r+0xd2>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	442b      	add	r3, r5
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	e00e      	b.n	8005910 <_malloc_r+0xa0>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	1b52      	subs	r2, r2, r5
 80058f6:	d41e      	bmi.n	8005936 <_malloc_r+0xc6>
 80058f8:	2a0b      	cmp	r2, #11
 80058fa:	d916      	bls.n	800592a <_malloc_r+0xba>
 80058fc:	1961      	adds	r1, r4, r5
 80058fe:	42a3      	cmp	r3, r4
 8005900:	6025      	str	r5, [r4, #0]
 8005902:	bf18      	it	ne
 8005904:	6059      	strne	r1, [r3, #4]
 8005906:	6863      	ldr	r3, [r4, #4]
 8005908:	bf08      	it	eq
 800590a:	6031      	streq	r1, [r6, #0]
 800590c:	5162      	str	r2, [r4, r5]
 800590e:	604b      	str	r3, [r1, #4]
 8005910:	4638      	mov	r0, r7
 8005912:	f104 060b 	add.w	r6, r4, #11
 8005916:	f000 f865 	bl	80059e4 <__malloc_unlock>
 800591a:	f026 0607 	bic.w	r6, r6, #7
 800591e:	1d23      	adds	r3, r4, #4
 8005920:	1af2      	subs	r2, r6, r3
 8005922:	d0b6      	beq.n	8005892 <_malloc_r+0x22>
 8005924:	1b9b      	subs	r3, r3, r6
 8005926:	50a3      	str	r3, [r4, r2]
 8005928:	e7b3      	b.n	8005892 <_malloc_r+0x22>
 800592a:	6862      	ldr	r2, [r4, #4]
 800592c:	42a3      	cmp	r3, r4
 800592e:	bf0c      	ite	eq
 8005930:	6032      	streq	r2, [r6, #0]
 8005932:	605a      	strne	r2, [r3, #4]
 8005934:	e7ec      	b.n	8005910 <_malloc_r+0xa0>
 8005936:	4623      	mov	r3, r4
 8005938:	6864      	ldr	r4, [r4, #4]
 800593a:	e7b2      	b.n	80058a2 <_malloc_r+0x32>
 800593c:	4634      	mov	r4, r6
 800593e:	6876      	ldr	r6, [r6, #4]
 8005940:	e7b9      	b.n	80058b6 <_malloc_r+0x46>
 8005942:	230c      	movs	r3, #12
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4638      	mov	r0, r7
 8005948:	f000 f84c 	bl	80059e4 <__malloc_unlock>
 800594c:	e7a1      	b.n	8005892 <_malloc_r+0x22>
 800594e:	6025      	str	r5, [r4, #0]
 8005950:	e7de      	b.n	8005910 <_malloc_r+0xa0>
 8005952:	bf00      	nop
 8005954:	200001e0 	.word	0x200001e0

08005958 <_realloc_r>:
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	4680      	mov	r8, r0
 800595e:	4614      	mov	r4, r2
 8005960:	460e      	mov	r6, r1
 8005962:	b921      	cbnz	r1, 800596e <_realloc_r+0x16>
 8005964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	4611      	mov	r1, r2
 800596a:	f7ff bf81 	b.w	8005870 <_malloc_r>
 800596e:	b92a      	cbnz	r2, 800597c <_realloc_r+0x24>
 8005970:	f7ff ff12 	bl	8005798 <_free_r>
 8005974:	4625      	mov	r5, r4
 8005976:	4628      	mov	r0, r5
 8005978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800597c:	f000 f838 	bl	80059f0 <_malloc_usable_size_r>
 8005980:	4284      	cmp	r4, r0
 8005982:	4607      	mov	r7, r0
 8005984:	d802      	bhi.n	800598c <_realloc_r+0x34>
 8005986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800598a:	d812      	bhi.n	80059b2 <_realloc_r+0x5a>
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff ff6e 	bl	8005870 <_malloc_r>
 8005994:	4605      	mov	r5, r0
 8005996:	2800      	cmp	r0, #0
 8005998:	d0ed      	beq.n	8005976 <_realloc_r+0x1e>
 800599a:	42bc      	cmp	r4, r7
 800599c:	4622      	mov	r2, r4
 800599e:	4631      	mov	r1, r6
 80059a0:	bf28      	it	cs
 80059a2:	463a      	movcs	r2, r7
 80059a4:	f7ff fed0 	bl	8005748 <memcpy>
 80059a8:	4631      	mov	r1, r6
 80059aa:	4640      	mov	r0, r8
 80059ac:	f7ff fef4 	bl	8005798 <_free_r>
 80059b0:	e7e1      	b.n	8005976 <_realloc_r+0x1e>
 80059b2:	4635      	mov	r5, r6
 80059b4:	e7df      	b.n	8005976 <_realloc_r+0x1e>
	...

080059b8 <_sbrk_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_sbrk_r+0x1c>)
 80059bc:	2300      	movs	r3, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	f7fb ff92 	bl	80018ec <_sbrk>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_sbrk_r+0x1a>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_sbrk_r+0x1a>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	200001e8 	.word	0x200001e8

080059d8 <__malloc_lock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__malloc_lock+0x8>)
 80059da:	f000 b811 	b.w	8005a00 <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	200001ec 	.word	0x200001ec

080059e4 <__malloc_unlock>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__malloc_unlock+0x8>)
 80059e6:	f000 b80c 	b.w	8005a02 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	200001ec 	.word	0x200001ec

080059f0 <_malloc_usable_size_r>:
 80059f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f4:	1f18      	subs	r0, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bfbc      	itt	lt
 80059fa:	580b      	ldrlt	r3, [r1, r0]
 80059fc:	18c0      	addlt	r0, r0, r3
 80059fe:	4770      	bx	lr

08005a00 <__retarget_lock_acquire_recursive>:
 8005a00:	4770      	bx	lr

08005a02 <__retarget_lock_release_recursive>:
 8005a02:	4770      	bx	lr

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
