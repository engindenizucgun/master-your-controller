#include "stm32l4xx.h"
#include <stdio.h>

// Function prototypes
void SystemClock_Config(void);
void UART_Init(void);
void printTime(uint8_t hours, uint8_t minutes, uint8_t seconds);

int main(void) {
    SystemClock_Config();
    UART_Init();

    uint8_t hours = 0;
    uint8_t minutes = 0;
    uint8_t seconds = 0;

    while (1) {
        // Code to increment hours, minutes, and seconds
        // You can implement this part based on your application
        // For this example, we'll just increment seconds every second.
        seconds++;
        if (seconds == 60) {
            seconds = 0;
            minutes++;
            if (minutes == 60) {
                minutes = 0;
                hours++;
                if (hours == 24) {
                    hours = 0;
                }
            }
        }

        // Display the time on the UART
        printTime(hours, minutes, seconds);

        // Add a delay to make the clock update every second
        HAL_Delay(1000);
    }
}

void printTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
    char timeString[9];
    snprintf(timeString, sizeof(timeString), "%02u:%02u:%02u", hours, minutes, seconds);
    HAL_UART_Transmit(&huart1, (uint8_t*)timeString, sizeof(timeString) - 1, HAL_MAX_DELAY);
}

// System Clock Configuration
void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
        Error_Handler();
    }
}

// UART Initialization
void UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK) {
        Error_Handler();
    }
}

// Error Handler (for debugging)
void Error_Handler(void) {
    while (1) {}
}
