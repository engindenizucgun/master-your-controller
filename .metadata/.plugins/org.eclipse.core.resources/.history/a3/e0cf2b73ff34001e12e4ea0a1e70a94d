#include "main.h"
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_tim.h"


TIM_HandleTypeDef htim2;
UART_HandleTypeDef huart2;
I2C_HandleTypeDef hi2c1;

static const uint8_t TMP100_ADDR = 0x48 << 1;
static const uint8_t REG_TEMP = 0x00;

#define DEBOUNCE_DELAY_MS 200
#define DEBOUNCE_DELAY_MS_ADJUST 150

uint32_t milliseconds = 0;
uint32_t seconds = 0;
uint32_t minutes = 0;
uint32_t hours = 0;

uint16_t adjustHourPin = GPIO_PIN_7;
uint16_t adjustMinutePin = GPIO_PIN_8;

uint32_t lastButtonPressTime = 0;
uint32_t lastAdjustButtonPressTime = 0;
uint32_t setButtonPressStartTime = 0;

bool isInDefaultMode = true;
bool isInHourAdjustmentMode = false;
bool isInMinuteAdjustmentMode = false;
bool adjustButtonPressed = false;

void AdjustHour(uint32_t *hours, uint16_t GPIO_Pin);
void AdjustMinute(uint32_t *minutes, uint16_t GPIO_Pin);

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);


void printer(void) {
	char buffer[50];
	sprintf(buffer, "\rWork Mode:                 %02lu:%02lu:%02lu", hours, minutes, seconds);
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
	adjustButtonPressed = false;
}

void AdjustmentPrinter(void) {
	char buffer[50];
	sprintf(buffer, "\rAdjustment Mode:           %02lu:%02lu:00", hours, minutes);
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

}

void NOTAdjustedPrinter(void) {
	char buffer[50];
	sprintf(buffer, "\rAdjustment Mode:           %02lu:%02lu:00", hours, minutes);
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
	adjustButtonPressed = false;
}

//------------------------------------------------------ADJUST HOUR & MINUTE---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//
void AdjustHour(uint32_t *hours, uint16_t GPIO_Pin) {


	if (GPIO_Pin == GPIO_PIN_7) {
		(*hours)++;
		if (*hours >= 24) {
			*hours = 0;
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	} else if (GPIO_Pin == GPIO_PIN_8) {
		(*hours)--;
		if (*hours == 0) {
			*hours = 23;
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	}
}

void AdjustMinute(uint32_t *minutes, uint16_t GPIO_Pin) {

	if (GPIO_Pin == GPIO_PIN_7) {
		(*minutes)++;
		if (*minutes >= 60) {
			*minutes = 0;
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	} else if (GPIO_Pin == GPIO_PIN_8) {
		if (*minutes == 0) {
			*minutes = 59;
		} else {
			(*minutes)--;
		}
		AdjustmentPrinter();
		adjustButtonPressed = false;

	}
}




//------------------------------------------------------BUTTON PRESSED---------------------------------------------------------------------------//
//00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000//



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	uint32_t currentTimestamp = HAL_GetTick();

	// Check if the button press is within the debounce delay


	// Add the variables to keep track of modes and set button press count
	static bool isInHourAdjustmentMode = false;
	static bool isInMinuteAdjustmentMode = false;
	static int setButtonPressCount = 0;

	if (GPIO_Pin == set_Pin)
	{



		if (currentTimestamp - lastButtonPressTime < DEBOUNCE_DELAY_MS)
		{
			// Ignore this button press (debounce)
			return;
		}

		// Update the last button press timestamp
		lastButtonPressTime = currentTimestamp;

		setButtonPressCount++;


		// If the "set" button is pressed once, switch to hour adjustment mode
		if (isInDefaultMode && setButtonPressCount == 1 )
		{



			isInDefaultMode = false;
			isInHourAdjustmentMode = true;
			setButtonPressCount = 0;
			HAL_UART_Transmit(&huart2, (uint8_t*)"\rHour Adjustment Mode", 23, HAL_MAX_DELAY);
		}
		// If the "set" button is pressed once, switch to minute adjustment mode
		else if (isInHourAdjustmentMode && setButtonPressCount == 1)
		{


			isInDefaultMode = false;
			isInHourAdjustmentMode = false;
			isInMinuteAdjustmentMode = true;
			setButtonPressCount = 0;
			HAL_UART_Transmit(&huart2, (uint8_t*)"\rMinute Adjustment Mode", 23, HAL_MAX_DELAY);
		}
		// If the "set" button is pressed once, switch back to default mode
		else if (isInMinuteAdjustmentMode && setButtonPressCount == 1)
		{
			seconds = 0;

			isInMinuteAdjustmentMode = false;
			isInDefaultMode = true;
			setButtonPressCount = 0;
			HAL_UART_Transmit(&huart2, (uint8_t*)"\rWorking Mode", 13, HAL_MAX_DELAY);
			adjustButtonPressed = false;
		}


	}
	else if ((GPIO_Pin == increase_Pin || GPIO_Pin == decrease_Pin) && isInHourAdjustmentMode)
	{
		if (currentTimestamp - lastAdjustButtonPressTime < DEBOUNCE_DELAY_MS_ADJUST)
		{

			// Ignore this button press (debounce)
			return;
		}

		lastAdjustButtonPressTime = currentTimestamp;
		// Handle the increase and decrease buttons for hour adjustment
		if (GPIO_Pin == increase_Pin)
		{
			lastButtonPressTime = HAL_GetTick();
			isInDefaultMode = false;
			adjustButtonPressed = true;
			// Adjust the hour
			AdjustHour(&hours, increase_Pin);
		}
		else if (GPIO_Pin == decrease_Pin)
		{
			lastButtonPressTime = HAL_GetTick();
			isInDefaultMode = false;
			adjustButtonPressed = true;
			// Adjust the hour
			AdjustHour(&hours, decrease_Pin);
		}


	}
	else if ((GPIO_Pin == increase_Pin || GPIO_Pin == decrease_Pin) && isInMinuteAdjustmentMode)
	{
		if (currentTimestamp - lastAdjustButtonPressTime < DEBOUNCE_DELAY_MS_ADJUST)
		{

			// Ignore this button press (debounce)
			return;
		}

		lastAdjustButtonPressTime = currentTimestamp;
		// Handle the increase and decrease buttons for minute adjustment
		if (GPIO_Pin == increase_Pin)
		{
			lastButtonPressTime = HAL_GetTick();

			adjustButtonPressed = true;
			isInDefaultMode = false;
			// Adjust the minute
			AdjustMinute(&minutes, increase_Pin);
		}
		else if (GPIO_Pin == decrease_Pin)
		{
			lastButtonPressTime = HAL_GetTick();

			adjustButtonPressed = true;
			isInDefaultMode = false;
			// Adjust the minute
			AdjustMinute(&minutes, decrease_Pin);
		}
	}
}

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	/* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t buf[11];
	int16_t val;
	float temp_c;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM2_Init();
	MX_I2C1_Init();




	while (1)
	{



		/* USER CODE END WHILE */
		buf[0] = REG_TEMP; //buffer = temp register
		ret = HAL_I2C_Master_Transmit(&hi2c1, TMP100_ADDR, buf, 1, HAL_MAX_DELAY); // return value of the function //pointer @I2C handle(It represents the specific I2C peripheral or bus that the communication will take place on.), address of sensor, buf, one byte, islemin bitmesi icin yeterli sure
		if ( ret != HAL_OK ) { //HAL_OK , execution basarili sekilde yapildigi anlamina geliyor
			strcpy((char*)buf, "Error Tx\r"); //strcpy, copy a string from one location to another (char*)buf, converts the buffer to a char* pointer. This means the buffer is converted to a character array
		} else {

			ret = HAL_I2C_Master_Receive(&hi2c1, TMP100_ADDR, buf, 2, HAL_MAX_DELAY);
			if ( ret != HAL_OK ) {
				strcpy((char*)buf, "Error Tx\r"); //

			}else{

				val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); //12 bitlik bir integer icin buf[0] 4 birim sola shiftliyoruz, buf[1]i 4 birim saga daha sonra combine ediyoruz

				if (val > 0x7FF) { //eger value en buyuk hexadecimalden buyukse
					val |= 0xF000;//degeri eksi yap, most significant 4 bit 1 oluyor
				}

				temp_c = val * 0.0625;
				temp_c *= 100;

				sprintf((char*)buf, // sprintf format the temp and store it as a string
						"\r%u.%02u C",
						((unsigned int)temp_c / 100), //tam sayi kismi
						((unsigned int)temp_c % 100));//ondalikli kismi

			}
			HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
		}








		if (!adjustButtonPressed && !isInDefaultMode && HAL_GetTick() - lastButtonPressTime >= 10000)
		{

			isInDefaultMode = true; // Exit the adjustment mode
			// Perform any other actions needed after exiting adjustment mode
			NOTAdjustedPrinter();
		}


		if (isInDefaultMode) {


			// Update clock every second
			int currentValue = HAL_GetTick();
			if (currentValue - milliseconds >= 1000) {
				milliseconds = currentValue;
				seconds++;

				if (seconds >= 60) {
					seconds = 0;
					minutes++;

					if (minutes >= 60) {
						minutes = 0;
						hours++;

						if (hours >= 24) {
							hours = 0;
						}
					}
				}

				// Print the clock time every second
				printer();
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
			}
		}

		else {


			int currentValue = HAL_GetTick();
			if (currentValue - milliseconds >= 1000) {
				milliseconds = currentValue;
				seconds++;

				if (seconds >= 60) {
					seconds = 0;
					minutes++;

					if (minutes >= 60) {
						minutes = 0;
						hours++;

						if (hours >= 24) {
							hours = 0;
						}
					}
				}
				AdjustmentPrinter();
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
			}

		}
	}
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
	{
		Error_Handler();
	}
}


static void MX_I2C1_Init(void)
{
	hi2c1.Instance = I2C1;
	hi2c1.Init.Timing = 0x00303D5B;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c1.Init.OwnAddress2 = 0;
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
	{
		Error_Handler();
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
	{
		Error_Handler();
	}

}


static void MX_TIM2_Init(void)
{

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
	TIM_MasterConfigTypeDef sMasterConfig = {0};

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
	htim2.Init.Prescaler = 42015;
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim2.Init.Period = 1000-1;
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
	{
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart2) != HAL_OK)
	{
		Error_Handler();
	}

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : set_Pin decrease_Pin increase_Pin */
	GPIO_InitStruct.Pin = set_Pin|decrease_Pin|increase_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);




	// ... (other GPIO configurations)

	/* Configure I2C interrupt */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);


	HAL_NVIC_SetPriority(B1_EXTI_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(B1_EXTI_IRQn);

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
